// Copyright 2023 Enfonica Pty Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import * as localAuth from '@enfonica/auth-library';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './regulatory_listings_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Manages regulatory listings.
 * @class
 * @memberof v1beta1
 */
export class RegulatoryListingsClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: any;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  regulatoryListingsStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of RegulatoryListingsClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: any) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof RegulatoryListingsClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
opts.auth = new localAuth.GoogleAuth({keyFilename: opts.keyFile});

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the RegulatoryListingsClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof RegulatoryListingsClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as any);

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      phoneNumberPathTemplate: new this._gaxModule.PathTemplate(
        'phoneNumbers/{phone_number}'
      ),
      phoneNumberInstancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/phoneNumberInstances/{phone_number_instance}'
      ),
      regulatoryListingPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/regulatoryListings/{regulatory_listing}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listRegulatoryListings:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'regulatoryListings'),
      searchRegulatoryListings:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'regulatoryListings')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'enfonica.numbering.v1beta1.RegulatoryListings', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.regulatoryListingsStub) {
      return this.regulatoryListingsStub;
    }

    // Put together the "service stub" for
    // enfonica.numbering.v1beta1.RegulatoryListings.
    this.regulatoryListingsStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('enfonica.numbering.v1beta1.RegulatoryListings') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).enfonica.numbering.v1beta1.RegulatoryListings,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const regulatoryListingsStubMethods =
        ['createRegulatoryListing', 'getRegulatoryListing', 'listRegulatoryListings', 'updateRegulatoryListing', 'deleteRegulatoryListing', 'searchRegulatoryListings'];
    for (const methodName of regulatoryListingsStubMethods) {
      const callPromise = this.regulatoryListingsStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.regulatoryListingsStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'numbering.api.enfonica.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'numbering.api.enfonica.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://api.enfonica.com/auth/numbering'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing,
        protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest|undefined, {}|undefined
      ]>;
  createRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
  createRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest,
      callback: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a regulatory listing.
 *
 * By creating a regulatory listing, you acknowledge that the person or entity
 * located at the specified address is the only party that will be utilizing
 * phone numbers associated with this regulatory listing. You acknowledge that
 * Enfonica may process the information provided for the purpose of identity
 * verification, and will share this information with local telecommunications
 * providers or authorities where required by local law. You understand that
 * Enfonica phone numbers may be taken out of service if inaccurate or false
 * information has been provided.
 *
 * The caller must have `numbering.regulatoryListings.create` permission on the project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The project under which to create the regulatory listing
 *   in the form `projects/*`.
 * @param {enfonica.numbering.v1beta1.RegulatoryListing} request.regulatoryListing
 *   The resource to be created.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing,
        protos.enfonica.numbering.v1beta1.ICreateRegulatoryListingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createRegulatoryListing(request, options, callback);
  }
  getRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing,
        protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest|undefined, {}|undefined
      ]>;
  getRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
  getRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest,
      callback: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves a regulatory listing.
 *
 * The caller must have `numbering.regulatoryListings.get` permission on the project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the regulatory listing to retrieve.
 *   Must be of the form `projects/* /regulatoryListings/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing,
        protos.enfonica.numbering.v1beta1.IGetRegulatoryListingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getRegulatoryListing(request, options, callback);
  }
  updateRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing,
        protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest|undefined, {}|undefined
      ]>;
  updateRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
  updateRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest,
      callback: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a regulatory listing.
 *
 * The caller must have `numbering.regulatoryListings.update` permission on the project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {enfonica.numbering.v1beta1.RegulatoryListing} request.regulatoryListing
 *   The updated definition of the RegulatoryListing.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Fields to be updated.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.enfonica.numbering.v1beta1.IRegulatoryListing,
          protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing,
        protos.enfonica.numbering.v1beta1.IUpdateRegulatoryListingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'regulatory_listing.name': request.regulatoryListing!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateRegulatoryListing(request, options, callback);
  }
  deleteRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest|undefined, {}|undefined
      ]>;
  deleteRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a regulatory listing. Regulatory listings that are associated with
 * an active phone number instance cannot be deleted.
 *
 * The caller must have `numbering.regulatoryListings.delete` permission on the project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the regulatory listing to be deleted.
 *   Must be of the form `projects/* /regulatoryListings/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteRegulatoryListing(
      request: protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.enfonica.numbering.v1beta1.IDeleteRegulatoryListingRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteRegulatoryListing(request, options, callback);
  }

  listRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing[],
        protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest|null,
        protos.enfonica.numbering.v1beta1.IListRegulatoryListingsResponse
      ]>;
  listRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>): void;
  listRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
      callback: PaginationCallback<
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>): void;
/**
 * Lists all regulatory listings.
 *
 * List returns regulatory listings sorted by `create_time` descending.
 *
 * The caller must have `numbering.regulatoryListings.list` permission on the project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The project under which to list regulatory listing, in the form `projects/*`.
 * @param {number} request.pageSize
 *   The maximum number of regulatory listing to return in the response.
 *   Default value of 10 and maximum value of 100.
 * @param {string} request.pageToken
 *   A pagination token returned from a previous call to `ListRegulatoryListings`
 *   that indicates where this listing should continue from.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListRegulatoryListingsRequest]{@link enfonica.numbering.v1beta1.ListRegulatoryListingsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListRegulatoryListingsResponse]{@link enfonica.numbering.v1beta1.ListRegulatoryListingsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>,
      callback?: PaginationCallback<
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.IListRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing[],
        protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest|null,
        protos.enfonica.numbering.v1beta1.IListRegulatoryListingsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listRegulatoryListings(request, options, callback);
  }

/**
 * Equivalent to {@link listRegulatoryListings}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listRegulatoryListings} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The project under which to list regulatory listing, in the form `projects/*`.
 * @param {number} request.pageSize
 *   The maximum number of regulatory listing to return in the response.
 *   Default value of 10 and maximum value of 100.
 * @param {string} request.pageToken
 *   A pagination token returned from a previous call to `ListRegulatoryListings`
 *   that indicates where this listing should continue from.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing} on 'data' event.
 */
  listRegulatoryListingsStream(
      request?: protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listRegulatoryListings.createStream(
      this.innerApiCalls.listRegulatoryListings as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link listRegulatoryListings}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The project under which to list regulatory listing, in the form `projects/*`.
 * @param {number} request.pageSize
 *   The maximum number of regulatory listing to return in the response.
 *   Default value of 10 and maximum value of 100.
 * @param {string} request.pageToken
 *   A pagination token returned from a previous call to `ListRegulatoryListings`
 *   that indicates where this listing should continue from.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  listRegulatoryListingsAsync(
      request?: protos.enfonica.numbering.v1beta1.IListRegulatoryListingsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.enfonica.numbering.v1beta1.IRegulatoryListing>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listRegulatoryListings.asyncIterate(
      this.innerApiCalls['listRegulatoryListings'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.enfonica.numbering.v1beta1.IRegulatoryListing>;
  }
  searchRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing[],
        protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest|null,
        protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsResponse
      ]>;
  searchRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>): void;
  searchRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
      callback: PaginationCallback<
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>): void;
/**
 * Searches all usable regulatory listings with the specified number type.
 *
 * List returns regulatory listings sorted by `create_time` descending.
 *
 * The caller must have `numbering.regulatoryListings.list` permission on the project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The project under which to list regulatory listing, in the form `projects/*`.
 * @param {number} request.pageSize
 *   The maximum number of regulatory listing to return in the response.
 *   Default value of 10 and maximum value of 100.
 * @param {string} request.pageToken
 *   A pagination token returned from a previous call to `ListRegulatoryListings`
 *   that indicates where this listing should continue from.
 * @param {string} request.regionCode
 *   The region code of the number that the regulatory listing must be usable
 *   with.
 * @param {enfonica.numbering.v1beta1.PhoneNumber.PhoneNumberType} request.numberType
 *   The type of number that the regulatory listing must be usable with.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [SearchRegulatoryListingsRequest]{@link enfonica.numbering.v1beta1.SearchRegulatoryListingsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [SearchRegulatoryListingsResponse]{@link enfonica.numbering.v1beta1.SearchRegulatoryListingsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  searchRegulatoryListings(
      request: protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>,
      callback?: PaginationCallback<
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
          protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsResponse|null|undefined,
          protos.enfonica.numbering.v1beta1.IRegulatoryListing>):
      Promise<[
        protos.enfonica.numbering.v1beta1.IRegulatoryListing[],
        protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest|null,
        protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.searchRegulatoryListings(request, options, callback);
  }

/**
 * Equivalent to {@link searchRegulatoryListings}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link searchRegulatoryListings} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The project under which to list regulatory listing, in the form `projects/*`.
 * @param {number} request.pageSize
 *   The maximum number of regulatory listing to return in the response.
 *   Default value of 10 and maximum value of 100.
 * @param {string} request.pageToken
 *   A pagination token returned from a previous call to `ListRegulatoryListings`
 *   that indicates where this listing should continue from.
 * @param {string} request.regionCode
 *   The region code of the number that the regulatory listing must be usable
 *   with.
 * @param {enfonica.numbering.v1beta1.PhoneNumber.PhoneNumberType} request.numberType
 *   The type of number that the regulatory listing must be usable with.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [RegulatoryListing]{@link enfonica.numbering.v1beta1.RegulatoryListing} on 'data' event.
 */
  searchRegulatoryListingsStream(
      request?: protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.searchRegulatoryListings.createStream(
      this.innerApiCalls.searchRegulatoryListings as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link searchRegulatoryListings}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The project under which to list regulatory listing, in the form `projects/*`.
 * @param {number} request.pageSize
 *   The maximum number of regulatory listing to return in the response.
 *   Default value of 10 and maximum value of 100.
 * @param {string} request.pageToken
 *   A pagination token returned from a previous call to `ListRegulatoryListings`
 *   that indicates where this listing should continue from.
 * @param {string} request.regionCode
 *   The region code of the number that the regulatory listing must be usable
 *   with.
 * @param {enfonica.numbering.v1beta1.PhoneNumber.PhoneNumberType} request.numberType
 *   The type of number that the regulatory listing must be usable with.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  searchRegulatoryListingsAsync(
      request?: protos.enfonica.numbering.v1beta1.ISearchRegulatoryListingsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.enfonica.numbering.v1beta1.IRegulatoryListing>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.searchRegulatoryListings.asyncIterate(
      this.innerApiCalls['searchRegulatoryListings'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.enfonica.numbering.v1beta1.IRegulatoryListing>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified phoneNumber resource name string.
   *
   * @param {string} phone_number
   * @returns {string} Resource name string.
   */
  phoneNumberPath(phoneNumber:string) {
    return this.pathTemplates.phoneNumberPathTemplate.render({
      phone_number: phoneNumber,
    });
  }

  /**
   * Parse the phone_number from PhoneNumber resource.
   *
   * @param {string} phoneNumberName
   *   A fully-qualified path representing PhoneNumber resource.
   * @returns {string} A string representing the phone_number.
   */
  matchPhoneNumberFromPhoneNumberName(phoneNumberName: string) {
    return this.pathTemplates.phoneNumberPathTemplate.match(phoneNumberName).phone_number;
  }

  /**
   * Return a fully-qualified phoneNumberInstance resource name string.
   *
   * @param {string} project
   * @param {string} phone_number_instance
   * @returns {string} Resource name string.
   */
  phoneNumberInstancePath(project:string,phoneNumberInstance:string) {
    return this.pathTemplates.phoneNumberInstancePathTemplate.render({
      project: project,
      phone_number_instance: phoneNumberInstance,
    });
  }

  /**
   * Parse the project from PhoneNumberInstance resource.
   *
   * @param {string} phoneNumberInstanceName
   *   A fully-qualified path representing PhoneNumberInstance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPhoneNumberInstanceName(phoneNumberInstanceName: string) {
    return this.pathTemplates.phoneNumberInstancePathTemplate.match(phoneNumberInstanceName).project;
  }

  /**
   * Parse the phone_number_instance from PhoneNumberInstance resource.
   *
   * @param {string} phoneNumberInstanceName
   *   A fully-qualified path representing PhoneNumberInstance resource.
   * @returns {string} A string representing the phone_number_instance.
   */
  matchPhoneNumberInstanceFromPhoneNumberInstanceName(phoneNumberInstanceName: string) {
    return this.pathTemplates.phoneNumberInstancePathTemplate.match(phoneNumberInstanceName).phone_number_instance;
  }

  /**
   * Return a fully-qualified regulatoryListing resource name string.
   *
   * @param {string} project
   * @param {string} regulatory_listing
   * @returns {string} Resource name string.
   */
  regulatoryListingPath(project:string,regulatoryListing:string) {
    return this.pathTemplates.regulatoryListingPathTemplate.render({
      project: project,
      regulatory_listing: regulatoryListing,
    });
  }

  /**
   * Parse the project from RegulatoryListing resource.
   *
   * @param {string} regulatoryListingName
   *   A fully-qualified path representing RegulatoryListing resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRegulatoryListingName(regulatoryListingName: string) {
    return this.pathTemplates.regulatoryListingPathTemplate.match(regulatoryListingName).project;
  }

  /**
   * Parse the regulatory_listing from RegulatoryListing resource.
   *
   * @param {string} regulatoryListingName
   *   A fully-qualified path representing RegulatoryListing resource.
   * @returns {string} A string representing the regulatory_listing.
   */
  matchRegulatoryListingFromRegulatoryListingName(regulatoryListingName: string) {
    return this.pathTemplates.regulatoryListingPathTemplate.match(regulatoryListingName).regulatory_listing;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.regulatoryListingsStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
