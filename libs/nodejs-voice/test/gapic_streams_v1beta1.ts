// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as streamsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubBidiStreamingCall<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  return sinon.stub().returns(mockStream);
}

describe('v1beta1.StreamsClient', () => {
  it('has servicePath', () => {
    const servicePath = streamsModule.v1beta1.StreamsClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint = streamsModule.v1beta1.StreamsClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = streamsModule.v1beta1.StreamsClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new streamsModule.v1beta1.StreamsClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new streamsModule.v1beta1.StreamsClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new streamsModule.v1beta1.StreamsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.streamsStub, undefined);
    await client.initialize();
    assert(client.streamsStub);
  });

  it('has close method', () => {
    const client = new streamsModule.v1beta1.StreamsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new streamsModule.v1beta1.StreamsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new streamsModule.v1beta1.StreamsClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('streamCall', () => {
    it('invokes streamCall without error', async () => {
      const client = new streamsModule.v1beta1.StreamsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.enfonica.voice.v1beta1.StreamCallRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.enfonica.voice.v1beta1.StreamCallResponse()
      );
      client.innerApiCalls.streamCall = stubBidiStreamingCall(expectedResponse);
      const stream = client.streamCall();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.enfonica.voice.v1beta1.StreamCallResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.streamCall as SinonStub)
          .getCall(0)
          .calledWithExactly(undefined)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });

    it('invokes streamCall with error', async () => {
      const client = new streamsModule.v1beta1.StreamsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.enfonica.voice.v1beta1.StreamCallRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.streamCall = stubBidiStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.streamCall();
      const promise = new Promise((resolve, reject) => {
        stream.on(
          'data',
          (response: protos.enfonica.voice.v1beta1.StreamCallResponse) => {
            resolve(response);
          }
        );
        stream.on('error', (err: Error) => {
          reject(err);
        });
        stream.write(request);
        stream.end();
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.innerApiCalls.streamCall as SinonStub)
          .getCall(0)
          .calledWithExactly(undefined)
      );
      assert.deepStrictEqual(
        ((stream as unknown as PassThrough)._transform as SinonStub).getCall(0)
          .args[0],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('call', () => {
      const fakePath = '/rendered/path/call';
      const expectedParameters = {
        project: 'projectValue',
        call: 'callValue',
      };
      const client = new streamsModule.v1beta1.StreamsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.callPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.callPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('callPath', () => {
        const result = client.callPath('projectValue', 'callValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.callPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCallName', () => {
        const result = client.matchProjectFromCallName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.callPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCallFromCallName', () => {
        const result = client.matchCallFromCallName(fakePath);
        assert.strictEqual(result, 'callValue');
        assert(
          (client.pathTemplates.callPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('recording', () => {
      const fakePath = '/rendered/path/recording';
      const expectedParameters = {
        project: 'projectValue',
        call: 'callValue',
        recording: 'recordingValue',
      };
      const client = new streamsModule.v1beta1.StreamsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.recordingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.recordingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('recordingPath', () => {
        const result = client.recordingPath(
          'projectValue',
          'callValue',
          'recordingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.recordingPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRecordingName', () => {
        const result = client.matchProjectFromRecordingName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.recordingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCallFromRecordingName', () => {
        const result = client.matchCallFromRecordingName(fakePath);
        assert.strictEqual(result, 'callValue');
        assert(
          (client.pathTemplates.recordingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRecordingFromRecordingName', () => {
        const result = client.matchRecordingFromRecordingName(fakePath);
        assert.strictEqual(result, 'recordingValue');
        assert(
          (client.pathTemplates.recordingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('stream', () => {
      const fakePath = '/rendered/path/stream';
      const expectedParameters = {
        project: 'projectValue',
        streams: 'streamsValue',
      };
      const client = new streamsModule.v1beta1.StreamsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.streamPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.streamPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('streamPath', () => {
        const result = client.streamPath('projectValue', 'streamsValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.streamPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromStreamName', () => {
        const result = client.matchProjectFromStreamName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.streamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchStreamsFromStreamName', () => {
        const result = client.matchStreamsFromStreamName(fakePath);
        assert.strictEqual(result, 'streamsValue');
        assert(
          (client.pathTemplates.streamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('transcription', () => {
      const fakePath = '/rendered/path/transcription';
      const expectedParameters = {
        project: 'projectValue',
        call: 'callValue',
        transcription: 'transcriptionValue',
      };
      const client = new streamsModule.v1beta1.StreamsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.transcriptionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.transcriptionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('transcriptionPath', () => {
        const result = client.transcriptionPath(
          'projectValue',
          'callValue',
          'transcriptionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.transcriptionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTranscriptionName', () => {
        const result = client.matchProjectFromTranscriptionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.transcriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCallFromTranscriptionName', () => {
        const result = client.matchCallFromTranscriptionName(fakePath);
        assert.strictEqual(result, 'callValue');
        assert(
          (client.pathTemplates.transcriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTranscriptionFromTranscriptionName', () => {
        const result = client.matchTranscriptionFromTranscriptionName(fakePath);
        assert.strictEqual(result, 'transcriptionValue');
        assert(
          (client.pathTemplates.transcriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
