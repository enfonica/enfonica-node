// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._enfonica_voice_protos || ($protobuf.roots._enfonica_voice_protos = {});
    
    $root.enfonica = (function() {
    
        /**
         * Namespace enfonica.
         * @exports enfonica
         * @namespace
         */
        var enfonica = {};
    
        enfonica.voice = (function() {
    
            /**
             * Namespace voice.
             * @memberof enfonica
             * @namespace
             */
            var voice = {};
    
            voice.v1beta1 = (function() {
    
                /**
                 * Namespace v1beta1.
                 * @memberof enfonica.voice
                 * @namespace
                 */
                var v1beta1 = {};
    
                v1beta1.Aliases = (function() {
    
                    /**
                     * Constructs a new Aliases service.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an Aliases
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Aliases(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Aliases.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Aliases;
    
                    /**
                     * Creates new Aliases service using the specified rpc implementation.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Aliases} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Aliases.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Aliases|createAlias}.
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @typedef CreateAliasCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Alias} [response] Alias
                     */
    
                    /**
                     * Calls CreateAlias.
                     * @function createAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.ICreateAliasRequest} request CreateAliasRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Aliases.CreateAliasCallback} callback Node-style callback called with the error, if any, and Alias
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Aliases.prototype.createAlias = function createAlias(request, callback) {
                        return this.rpcCall(createAlias, $root.enfonica.voice.v1beta1.CreateAliasRequest, $root.enfonica.voice.v1beta1.Alias, request, callback);
                    }, "name", { value: "CreateAlias" });
    
                    /**
                     * Calls CreateAlias.
                     * @function createAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.ICreateAliasRequest} request CreateAliasRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Alias>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Aliases|getAlias}.
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @typedef GetAliasCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Alias} [response] Alias
                     */
    
                    /**
                     * Calls GetAlias.
                     * @function getAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetAliasRequest} request GetAliasRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Aliases.GetAliasCallback} callback Node-style callback called with the error, if any, and Alias
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Aliases.prototype.getAlias = function getAlias(request, callback) {
                        return this.rpcCall(getAlias, $root.enfonica.voice.v1beta1.GetAliasRequest, $root.enfonica.voice.v1beta1.Alias, request, callback);
                    }, "name", { value: "GetAlias" });
    
                    /**
                     * Calls GetAlias.
                     * @function getAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetAliasRequest} request GetAliasRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Alias>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Aliases|listAliases}.
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @typedef ListAliasesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.ListAliasesResponse} [response] ListAliasesResponse
                     */
    
                    /**
                     * Calls ListAliases.
                     * @function listAliases
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListAliasesRequest} request ListAliasesRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Aliases.ListAliasesCallback} callback Node-style callback called with the error, if any, and ListAliasesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Aliases.prototype.listAliases = function listAliases(request, callback) {
                        return this.rpcCall(listAliases, $root.enfonica.voice.v1beta1.ListAliasesRequest, $root.enfonica.voice.v1beta1.ListAliasesResponse, request, callback);
                    }, "name", { value: "ListAliases" });
    
                    /**
                     * Calls ListAliases.
                     * @function listAliases
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListAliasesRequest} request ListAliasesRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.ListAliasesResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Aliases|updateAlias}.
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @typedef UpdateAliasCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Alias} [response] Alias
                     */
    
                    /**
                     * Calls UpdateAlias.
                     * @function updateAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IUpdateAliasRequest} request UpdateAliasRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Aliases.UpdateAliasCallback} callback Node-style callback called with the error, if any, and Alias
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Aliases.prototype.updateAlias = function updateAlias(request, callback) {
                        return this.rpcCall(updateAlias, $root.enfonica.voice.v1beta1.UpdateAliasRequest, $root.enfonica.voice.v1beta1.Alias, request, callback);
                    }, "name", { value: "UpdateAlias" });
    
                    /**
                     * Calls UpdateAlias.
                     * @function updateAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IUpdateAliasRequest} request UpdateAliasRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Alias>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Aliases|deleteAlias}.
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @typedef DeleteAliasCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteAlias.
                     * @function deleteAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteAliasRequest} request DeleteAliasRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Aliases.DeleteAliasCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Aliases.prototype.deleteAlias = function deleteAlias(request, callback) {
                        return this.rpcCall(deleteAlias, $root.enfonica.voice.v1beta1.DeleteAliasRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteAlias" });
    
                    /**
                     * Calls DeleteAlias.
                     * @function deleteAlias
                     * @memberof enfonica.voice.v1beta1.Aliases
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteAliasRequest} request DeleteAliasRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    return Aliases;
                })();
    
                v1beta1.Alias = (function() {
    
                    /**
                     * Properties of an Alias.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IAlias
                     * @property {string|null} [name] Alias name
                     * @property {string|null} [aliasId] Alias aliasId
                     * @property {string|null} [displayName] Alias displayName
                     * @property {enfonica.voice.v1beta1.ILoadBalancerConfig|null} [loadBalancerConfig] Alias loadBalancerConfig
                     * @property {google.protobuf.ITimestamp|null} [createTime] Alias createTime
                     */
    
                    /**
                     * Constructs a new Alias.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an Alias.
                     * @implements IAlias
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IAlias=} [properties] Properties to set
                     */
                    function Alias(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Alias name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @instance
                     */
                    Alias.prototype.name = "";
    
                    /**
                     * Alias aliasId.
                     * @member {string} aliasId
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @instance
                     */
                    Alias.prototype.aliasId = "";
    
                    /**
                     * Alias displayName.
                     * @member {string} displayName
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @instance
                     */
                    Alias.prototype.displayName = "";
    
                    /**
                     * Alias loadBalancerConfig.
                     * @member {enfonica.voice.v1beta1.ILoadBalancerConfig|null|undefined} loadBalancerConfig
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @instance
                     */
                    Alias.prototype.loadBalancerConfig = null;
    
                    /**
                     * Alias createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @instance
                     */
                    Alias.prototype.createTime = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Alias config.
                     * @member {"loadBalancerConfig"|undefined} config
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @instance
                     */
                    Object.defineProperty(Alias.prototype, "config", {
                        get: $util.oneOfGetter($oneOfFields = ["loadBalancerConfig"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Alias instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {enfonica.voice.v1beta1.IAlias=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.Alias} Alias instance
                     */
                    Alias.create = function create(properties) {
                        return new Alias(properties);
                    };
    
                    /**
                     * Encodes the specified Alias message. Does not implicitly {@link enfonica.voice.v1beta1.Alias.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {enfonica.voice.v1beta1.IAlias} message Alias message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Alias.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.aliasId != null && Object.hasOwnProperty.call(message, "aliasId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.aliasId);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.displayName);
                        if (message.loadBalancerConfig != null && Object.hasOwnProperty.call(message, "loadBalancerConfig"))
                            $root.enfonica.voice.v1beta1.LoadBalancerConfig.encode(message.loadBalancerConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Alias message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.Alias.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {enfonica.voice.v1beta1.IAlias} message Alias message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Alias.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Alias message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.Alias} Alias
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Alias.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.Alias();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.aliasId = reader.string();
                                break;
                            case 3:
                                message.displayName = reader.string();
                                break;
                            case 4:
                                message.loadBalancerConfig = $root.enfonica.voice.v1beta1.LoadBalancerConfig.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Alias message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.Alias} Alias
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Alias.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Alias message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Alias.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.aliasId != null && message.hasOwnProperty("aliasId"))
                            if (!$util.isString(message.aliasId))
                                return "aliasId: string expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.loadBalancerConfig != null && message.hasOwnProperty("loadBalancerConfig")) {
                            properties.config = 1;
                            {
                                var error = $root.enfonica.voice.v1beta1.LoadBalancerConfig.verify(message.loadBalancerConfig);
                                if (error)
                                    return "loadBalancerConfig." + error;
                            }
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Alias message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.Alias} Alias
                     */
                    Alias.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.Alias)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.Alias();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.aliasId != null)
                            message.aliasId = String(object.aliasId);
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.loadBalancerConfig != null) {
                            if (typeof object.loadBalancerConfig !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Alias.loadBalancerConfig: object expected");
                            message.loadBalancerConfig = $root.enfonica.voice.v1beta1.LoadBalancerConfig.fromObject(object.loadBalancerConfig);
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Alias.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Alias message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @static
                     * @param {enfonica.voice.v1beta1.Alias} message Alias
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Alias.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.aliasId = "";
                            object.displayName = "";
                            object.createTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.aliasId != null && message.hasOwnProperty("aliasId"))
                            object.aliasId = message.aliasId;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.loadBalancerConfig != null && message.hasOwnProperty("loadBalancerConfig")) {
                            object.loadBalancerConfig = $root.enfonica.voice.v1beta1.LoadBalancerConfig.toObject(message.loadBalancerConfig, options);
                            if (options.oneofs)
                                object.config = "loadBalancerConfig";
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this Alias to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.Alias
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Alias.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Alias;
                })();
    
                v1beta1.LoadBalancerConfig = (function() {
    
                    /**
                     * Properties of a LoadBalancerConfig.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ILoadBalancerConfig
                     * @property {Array.<enfonica.voice.v1beta1.ILoadBalancerEndpoint>|null} [endpoints] LoadBalancerConfig endpoints
                     * @property {Array.<string>|null} [failoverCallHandlerUris] LoadBalancerConfig failoverCallHandlerUris
                     */
    
                    /**
                     * Constructs a new LoadBalancerConfig.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a LoadBalancerConfig.
                     * @implements ILoadBalancerConfig
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ILoadBalancerConfig=} [properties] Properties to set
                     */
                    function LoadBalancerConfig(properties) {
                        this.endpoints = [];
                        this.failoverCallHandlerUris = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LoadBalancerConfig endpoints.
                     * @member {Array.<enfonica.voice.v1beta1.ILoadBalancerEndpoint>} endpoints
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @instance
                     */
                    LoadBalancerConfig.prototype.endpoints = $util.emptyArray;
    
                    /**
                     * LoadBalancerConfig failoverCallHandlerUris.
                     * @member {Array.<string>} failoverCallHandlerUris
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @instance
                     */
                    LoadBalancerConfig.prototype.failoverCallHandlerUris = $util.emptyArray;
    
                    /**
                     * Creates a new LoadBalancerConfig instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.ILoadBalancerConfig=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.LoadBalancerConfig} LoadBalancerConfig instance
                     */
                    LoadBalancerConfig.create = function create(properties) {
                        return new LoadBalancerConfig(properties);
                    };
    
                    /**
                     * Encodes the specified LoadBalancerConfig message. Does not implicitly {@link enfonica.voice.v1beta1.LoadBalancerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.ILoadBalancerConfig} message LoadBalancerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoadBalancerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.endpoints != null && message.endpoints.length)
                            for (var i = 0; i < message.endpoints.length; ++i)
                                $root.enfonica.voice.v1beta1.LoadBalancerEndpoint.encode(message.endpoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.failoverCallHandlerUris != null && message.failoverCallHandlerUris.length)
                            for (var i = 0; i < message.failoverCallHandlerUris.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.failoverCallHandlerUris[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LoadBalancerConfig message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.LoadBalancerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.ILoadBalancerConfig} message LoadBalancerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoadBalancerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LoadBalancerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.LoadBalancerConfig} LoadBalancerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoadBalancerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.LoadBalancerConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.endpoints && message.endpoints.length))
                                    message.endpoints = [];
                                message.endpoints.push($root.enfonica.voice.v1beta1.LoadBalancerEndpoint.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.failoverCallHandlerUris && message.failoverCallHandlerUris.length))
                                    message.failoverCallHandlerUris = [];
                                message.failoverCallHandlerUris.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LoadBalancerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.LoadBalancerConfig} LoadBalancerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoadBalancerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LoadBalancerConfig message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LoadBalancerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.endpoints != null && message.hasOwnProperty("endpoints")) {
                            if (!Array.isArray(message.endpoints))
                                return "endpoints: array expected";
                            for (var i = 0; i < message.endpoints.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.LoadBalancerEndpoint.verify(message.endpoints[i]);
                                if (error)
                                    return "endpoints." + error;
                            }
                        }
                        if (message.failoverCallHandlerUris != null && message.hasOwnProperty("failoverCallHandlerUris")) {
                            if (!Array.isArray(message.failoverCallHandlerUris))
                                return "failoverCallHandlerUris: array expected";
                            for (var i = 0; i < message.failoverCallHandlerUris.length; ++i)
                                if (!$util.isString(message.failoverCallHandlerUris[i]))
                                    return "failoverCallHandlerUris: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LoadBalancerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.LoadBalancerConfig} LoadBalancerConfig
                     */
                    LoadBalancerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.LoadBalancerConfig)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.LoadBalancerConfig();
                        if (object.endpoints) {
                            if (!Array.isArray(object.endpoints))
                                throw TypeError(".enfonica.voice.v1beta1.LoadBalancerConfig.endpoints: array expected");
                            message.endpoints = [];
                            for (var i = 0; i < object.endpoints.length; ++i) {
                                if (typeof object.endpoints[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.LoadBalancerConfig.endpoints: object expected");
                                message.endpoints[i] = $root.enfonica.voice.v1beta1.LoadBalancerEndpoint.fromObject(object.endpoints[i]);
                            }
                        }
                        if (object.failoverCallHandlerUris) {
                            if (!Array.isArray(object.failoverCallHandlerUris))
                                throw TypeError(".enfonica.voice.v1beta1.LoadBalancerConfig.failoverCallHandlerUris: array expected");
                            message.failoverCallHandlerUris = [];
                            for (var i = 0; i < object.failoverCallHandlerUris.length; ++i)
                                message.failoverCallHandlerUris[i] = String(object.failoverCallHandlerUris[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LoadBalancerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.LoadBalancerConfig} message LoadBalancerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LoadBalancerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.endpoints = [];
                            object.failoverCallHandlerUris = [];
                        }
                        if (message.endpoints && message.endpoints.length) {
                            object.endpoints = [];
                            for (var j = 0; j < message.endpoints.length; ++j)
                                object.endpoints[j] = $root.enfonica.voice.v1beta1.LoadBalancerEndpoint.toObject(message.endpoints[j], options);
                        }
                        if (message.failoverCallHandlerUris && message.failoverCallHandlerUris.length) {
                            object.failoverCallHandlerUris = [];
                            for (var j = 0; j < message.failoverCallHandlerUris.length; ++j)
                                object.failoverCallHandlerUris[j] = message.failoverCallHandlerUris[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this LoadBalancerConfig to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.LoadBalancerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LoadBalancerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return LoadBalancerConfig;
                })();
    
                v1beta1.LoadBalancerEndpoint = (function() {
    
                    /**
                     * Properties of a LoadBalancerEndpoint.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ILoadBalancerEndpoint
                     * @property {string|null} [uri] LoadBalancerEndpoint uri
                     * @property {number|null} [priority] LoadBalancerEndpoint priority
                     * @property {number|null} [weight] LoadBalancerEndpoint weight
                     * @property {boolean|null} [enabled] LoadBalancerEndpoint enabled
                     */
    
                    /**
                     * Constructs a new LoadBalancerEndpoint.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a LoadBalancerEndpoint.
                     * @implements ILoadBalancerEndpoint
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ILoadBalancerEndpoint=} [properties] Properties to set
                     */
                    function LoadBalancerEndpoint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LoadBalancerEndpoint uri.
                     * @member {string} uri
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @instance
                     */
                    LoadBalancerEndpoint.prototype.uri = "";
    
                    /**
                     * LoadBalancerEndpoint priority.
                     * @member {number} priority
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @instance
                     */
                    LoadBalancerEndpoint.prototype.priority = 0;
    
                    /**
                     * LoadBalancerEndpoint weight.
                     * @member {number} weight
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @instance
                     */
                    LoadBalancerEndpoint.prototype.weight = 0;
    
                    /**
                     * LoadBalancerEndpoint enabled.
                     * @member {boolean} enabled
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @instance
                     */
                    LoadBalancerEndpoint.prototype.enabled = false;
    
                    /**
                     * Creates a new LoadBalancerEndpoint instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {enfonica.voice.v1beta1.ILoadBalancerEndpoint=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.LoadBalancerEndpoint} LoadBalancerEndpoint instance
                     */
                    LoadBalancerEndpoint.create = function create(properties) {
                        return new LoadBalancerEndpoint(properties);
                    };
    
                    /**
                     * Encodes the specified LoadBalancerEndpoint message. Does not implicitly {@link enfonica.voice.v1beta1.LoadBalancerEndpoint.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {enfonica.voice.v1beta1.ILoadBalancerEndpoint} message LoadBalancerEndpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoadBalancerEndpoint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);
                        if (message.priority != null && Object.hasOwnProperty.call(message, "priority"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.priority);
                        if (message.weight != null && Object.hasOwnProperty.call(message, "weight"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.weight);
                        if (message.enabled != null && Object.hasOwnProperty.call(message, "enabled"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.enabled);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LoadBalancerEndpoint message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.LoadBalancerEndpoint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {enfonica.voice.v1beta1.ILoadBalancerEndpoint} message LoadBalancerEndpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoadBalancerEndpoint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LoadBalancerEndpoint message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.LoadBalancerEndpoint} LoadBalancerEndpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoadBalancerEndpoint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.LoadBalancerEndpoint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.uri = reader.string();
                                break;
                            case 2:
                                message.priority = reader.int32();
                                break;
                            case 3:
                                message.weight = reader.int32();
                                break;
                            case 4:
                                message.enabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LoadBalancerEndpoint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.LoadBalancerEndpoint} LoadBalancerEndpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoadBalancerEndpoint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LoadBalancerEndpoint message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LoadBalancerEndpoint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            if (!$util.isString(message.uri))
                                return "uri: string expected";
                        if (message.priority != null && message.hasOwnProperty("priority"))
                            if (!$util.isInteger(message.priority))
                                return "priority: integer expected";
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            if (!$util.isInteger(message.weight))
                                return "weight: integer expected";
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            if (typeof message.enabled !== "boolean")
                                return "enabled: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a LoadBalancerEndpoint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.LoadBalancerEndpoint} LoadBalancerEndpoint
                     */
                    LoadBalancerEndpoint.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.LoadBalancerEndpoint)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.LoadBalancerEndpoint();
                        if (object.uri != null)
                            message.uri = String(object.uri);
                        if (object.priority != null)
                            message.priority = object.priority | 0;
                        if (object.weight != null)
                            message.weight = object.weight | 0;
                        if (object.enabled != null)
                            message.enabled = Boolean(object.enabled);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LoadBalancerEndpoint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @static
                     * @param {enfonica.voice.v1beta1.LoadBalancerEndpoint} message LoadBalancerEndpoint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LoadBalancerEndpoint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.uri = "";
                            object.priority = 0;
                            object.weight = 0;
                            object.enabled = false;
                        }
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            object.uri = message.uri;
                        if (message.priority != null && message.hasOwnProperty("priority"))
                            object.priority = message.priority;
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            object.weight = message.weight;
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            object.enabled = message.enabled;
                        return object;
                    };
    
                    /**
                     * Converts this LoadBalancerEndpoint to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.LoadBalancerEndpoint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LoadBalancerEndpoint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return LoadBalancerEndpoint;
                })();
    
                v1beta1.CreateAliasRequest = (function() {
    
                    /**
                     * Properties of a CreateAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICreateAliasRequest
                     * @property {string|null} [parent] CreateAliasRequest parent
                     * @property {enfonica.voice.v1beta1.IAlias|null} [alias] CreateAliasRequest alias
                     * @property {string|null} [aliasId] CreateAliasRequest aliasId
                     */
    
                    /**
                     * Constructs a new CreateAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a CreateAliasRequest.
                     * @implements ICreateAliasRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICreateAliasRequest=} [properties] Properties to set
                     */
                    function CreateAliasRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateAliasRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @instance
                     */
                    CreateAliasRequest.prototype.parent = "";
    
                    /**
                     * CreateAliasRequest alias.
                     * @member {enfonica.voice.v1beta1.IAlias|null|undefined} alias
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @instance
                     */
                    CreateAliasRequest.prototype.alias = null;
    
                    /**
                     * CreateAliasRequest aliasId.
                     * @member {string} aliasId
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @instance
                     */
                    CreateAliasRequest.prototype.aliasId = "";
    
                    /**
                     * Creates a new CreateAliasRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateAliasRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.CreateAliasRequest} CreateAliasRequest instance
                     */
                    CreateAliasRequest.create = function create(properties) {
                        return new CreateAliasRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateAliasRequest message. Does not implicitly {@link enfonica.voice.v1beta1.CreateAliasRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateAliasRequest} message CreateAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateAliasRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.alias != null && Object.hasOwnProperty.call(message, "alias"))
                            $root.enfonica.voice.v1beta1.Alias.encode(message.alias, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.aliasId != null && Object.hasOwnProperty.call(message, "aliasId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.aliasId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateAliasRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.CreateAliasRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateAliasRequest} message CreateAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateAliasRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateAliasRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.CreateAliasRequest} CreateAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateAliasRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.CreateAliasRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.alias = $root.enfonica.voice.v1beta1.Alias.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.aliasId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateAliasRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.CreateAliasRequest} CreateAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateAliasRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateAliasRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateAliasRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.alias != null && message.hasOwnProperty("alias")) {
                            var error = $root.enfonica.voice.v1beta1.Alias.verify(message.alias);
                            if (error)
                                return "alias." + error;
                        }
                        if (message.aliasId != null && message.hasOwnProperty("aliasId"))
                            if (!$util.isString(message.aliasId))
                                return "aliasId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CreateAliasRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.CreateAliasRequest} CreateAliasRequest
                     */
                    CreateAliasRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.CreateAliasRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.CreateAliasRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.alias != null) {
                            if (typeof object.alias !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.CreateAliasRequest.alias: object expected");
                            message.alias = $root.enfonica.voice.v1beta1.Alias.fromObject(object.alias);
                        }
                        if (object.aliasId != null)
                            message.aliasId = String(object.aliasId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateAliasRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.CreateAliasRequest} message CreateAliasRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateAliasRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.alias = null;
                            object.aliasId = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.alias != null && message.hasOwnProperty("alias"))
                            object.alias = $root.enfonica.voice.v1beta1.Alias.toObject(message.alias, options);
                        if (message.aliasId != null && message.hasOwnProperty("aliasId"))
                            object.aliasId = message.aliasId;
                        return object;
                    };
    
                    /**
                     * Converts this CreateAliasRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.CreateAliasRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateAliasRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateAliasRequest;
                })();
    
                v1beta1.GetAliasRequest = (function() {
    
                    /**
                     * Properties of a GetAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IGetAliasRequest
                     * @property {string|null} [name] GetAliasRequest name
                     */
    
                    /**
                     * Constructs a new GetAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a GetAliasRequest.
                     * @implements IGetAliasRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IGetAliasRequest=} [properties] Properties to set
                     */
                    function GetAliasRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetAliasRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @instance
                     */
                    GetAliasRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetAliasRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetAliasRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.GetAliasRequest} GetAliasRequest instance
                     */
                    GetAliasRequest.create = function create(properties) {
                        return new GetAliasRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetAliasRequest message. Does not implicitly {@link enfonica.voice.v1beta1.GetAliasRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetAliasRequest} message GetAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetAliasRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetAliasRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.GetAliasRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetAliasRequest} message GetAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetAliasRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetAliasRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.GetAliasRequest} GetAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetAliasRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.GetAliasRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetAliasRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.GetAliasRequest} GetAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetAliasRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetAliasRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetAliasRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetAliasRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.GetAliasRequest} GetAliasRequest
                     */
                    GetAliasRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.GetAliasRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.GetAliasRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetAliasRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.GetAliasRequest} message GetAliasRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetAliasRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetAliasRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.GetAliasRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetAliasRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetAliasRequest;
                })();
    
                v1beta1.ListAliasesRequest = (function() {
    
                    /**
                     * Properties of a ListAliasesRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListAliasesRequest
                     * @property {string|null} [parent] ListAliasesRequest parent
                     * @property {number|null} [pageSize] ListAliasesRequest pageSize
                     * @property {string|null} [pageToken] ListAliasesRequest pageToken
                     */
    
                    /**
                     * Constructs a new ListAliasesRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListAliasesRequest.
                     * @implements IListAliasesRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListAliasesRequest=} [properties] Properties to set
                     */
                    function ListAliasesRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListAliasesRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @instance
                     */
                    ListAliasesRequest.prototype.parent = "";
    
                    /**
                     * ListAliasesRequest pageSize.
                     * @member {number} pageSize
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @instance
                     */
                    ListAliasesRequest.prototype.pageSize = 0;
    
                    /**
                     * ListAliasesRequest pageToken.
                     * @member {string} pageToken
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @instance
                     */
                    ListAliasesRequest.prototype.pageToken = "";
    
                    /**
                     * Creates a new ListAliasesRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListAliasesRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListAliasesRequest} ListAliasesRequest instance
                     */
                    ListAliasesRequest.create = function create(properties) {
                        return new ListAliasesRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListAliasesRequest message. Does not implicitly {@link enfonica.voice.v1beta1.ListAliasesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListAliasesRequest} message ListAliasesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListAliasesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListAliasesRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListAliasesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListAliasesRequest} message ListAliasesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListAliasesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListAliasesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListAliasesRequest} ListAliasesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListAliasesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListAliasesRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListAliasesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListAliasesRequest} ListAliasesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListAliasesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListAliasesRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListAliasesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListAliasesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListAliasesRequest} ListAliasesRequest
                     */
                    ListAliasesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListAliasesRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListAliasesRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListAliasesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ListAliasesRequest} message ListAliasesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListAliasesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListAliasesRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListAliasesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListAliasesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListAliasesRequest;
                })();
    
                v1beta1.ListAliasesResponse = (function() {
    
                    /**
                     * Properties of a ListAliasesResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListAliasesResponse
                     * @property {Array.<enfonica.voice.v1beta1.IAlias>|null} [aliases] ListAliasesResponse aliases
                     * @property {string|null} [nextPageToken] ListAliasesResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListAliasesResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListAliasesResponse.
                     * @implements IListAliasesResponse
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListAliasesResponse=} [properties] Properties to set
                     */
                    function ListAliasesResponse(properties) {
                        this.aliases = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListAliasesResponse aliases.
                     * @member {Array.<enfonica.voice.v1beta1.IAlias>} aliases
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @instance
                     */
                    ListAliasesResponse.prototype.aliases = $util.emptyArray;
    
                    /**
                     * ListAliasesResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @instance
                     */
                    ListAliasesResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListAliasesResponse instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListAliasesResponse=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListAliasesResponse} ListAliasesResponse instance
                     */
                    ListAliasesResponse.create = function create(properties) {
                        return new ListAliasesResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListAliasesResponse message. Does not implicitly {@link enfonica.voice.v1beta1.ListAliasesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListAliasesResponse} message ListAliasesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListAliasesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.aliases != null && message.aliases.length)
                            for (var i = 0; i < message.aliases.length; ++i)
                                $root.enfonica.voice.v1beta1.Alias.encode(message.aliases[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListAliasesResponse message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListAliasesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListAliasesResponse} message ListAliasesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListAliasesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListAliasesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListAliasesResponse} ListAliasesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListAliasesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListAliasesResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.aliases && message.aliases.length))
                                    message.aliases = [];
                                message.aliases.push($root.enfonica.voice.v1beta1.Alias.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListAliasesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListAliasesResponse} ListAliasesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListAliasesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListAliasesResponse message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListAliasesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.aliases != null && message.hasOwnProperty("aliases")) {
                            if (!Array.isArray(message.aliases))
                                return "aliases: array expected";
                            for (var i = 0; i < message.aliases.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.Alias.verify(message.aliases[i]);
                                if (error)
                                    return "aliases." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListAliasesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListAliasesResponse} ListAliasesResponse
                     */
                    ListAliasesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListAliasesResponse)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListAliasesResponse();
                        if (object.aliases) {
                            if (!Array.isArray(object.aliases))
                                throw TypeError(".enfonica.voice.v1beta1.ListAliasesResponse.aliases: array expected");
                            message.aliases = [];
                            for (var i = 0; i < object.aliases.length; ++i) {
                                if (typeof object.aliases[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.ListAliasesResponse.aliases: object expected");
                                message.aliases[i] = $root.enfonica.voice.v1beta1.Alias.fromObject(object.aliases[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListAliasesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.ListAliasesResponse} message ListAliasesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListAliasesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.aliases = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.aliases && message.aliases.length) {
                            object.aliases = [];
                            for (var j = 0; j < message.aliases.length; ++j)
                                object.aliases[j] = $root.enfonica.voice.v1beta1.Alias.toObject(message.aliases[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListAliasesResponse to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListAliasesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListAliasesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListAliasesResponse;
                })();
    
                v1beta1.UpdateAliasRequest = (function() {
    
                    /**
                     * Properties of an UpdateAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IUpdateAliasRequest
                     * @property {enfonica.voice.v1beta1.IAlias|null} [alias] UpdateAliasRequest alias
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateAliasRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an UpdateAliasRequest.
                     * @implements IUpdateAliasRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IUpdateAliasRequest=} [properties] Properties to set
                     */
                    function UpdateAliasRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateAliasRequest alias.
                     * @member {enfonica.voice.v1beta1.IAlias|null|undefined} alias
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @instance
                     */
                    UpdateAliasRequest.prototype.alias = null;
    
                    /**
                     * UpdateAliasRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @instance
                     */
                    UpdateAliasRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateAliasRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateAliasRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.UpdateAliasRequest} UpdateAliasRequest instance
                     */
                    UpdateAliasRequest.create = function create(properties) {
                        return new UpdateAliasRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateAliasRequest message. Does not implicitly {@link enfonica.voice.v1beta1.UpdateAliasRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateAliasRequest} message UpdateAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateAliasRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.alias != null && Object.hasOwnProperty.call(message, "alias"))
                            $root.enfonica.voice.v1beta1.Alias.encode(message.alias, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateAliasRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.UpdateAliasRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateAliasRequest} message UpdateAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateAliasRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateAliasRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.UpdateAliasRequest} UpdateAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateAliasRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.UpdateAliasRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.alias = $root.enfonica.voice.v1beta1.Alias.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateAliasRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.UpdateAliasRequest} UpdateAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateAliasRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateAliasRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateAliasRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.alias != null && message.hasOwnProperty("alias")) {
                            var error = $root.enfonica.voice.v1beta1.Alias.verify(message.alias);
                            if (error)
                                return "alias." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateAliasRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.UpdateAliasRequest} UpdateAliasRequest
                     */
                    UpdateAliasRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.UpdateAliasRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.UpdateAliasRequest();
                        if (object.alias != null) {
                            if (typeof object.alias !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.UpdateAliasRequest.alias: object expected");
                            message.alias = $root.enfonica.voice.v1beta1.Alias.fromObject(object.alias);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.UpdateAliasRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateAliasRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.UpdateAliasRequest} message UpdateAliasRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateAliasRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.alias = null;
                            object.updateMask = null;
                        }
                        if (message.alias != null && message.hasOwnProperty("alias"))
                            object.alias = $root.enfonica.voice.v1beta1.Alias.toObject(message.alias, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateAliasRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.UpdateAliasRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateAliasRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateAliasRequest;
                })();
    
                v1beta1.DeleteAliasRequest = (function() {
    
                    /**
                     * Properties of a DeleteAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IDeleteAliasRequest
                     * @property {string|null} [name] DeleteAliasRequest name
                     */
    
                    /**
                     * Constructs a new DeleteAliasRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a DeleteAliasRequest.
                     * @implements IDeleteAliasRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IDeleteAliasRequest=} [properties] Properties to set
                     */
                    function DeleteAliasRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteAliasRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @instance
                     */
                    DeleteAliasRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteAliasRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteAliasRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.DeleteAliasRequest} DeleteAliasRequest instance
                     */
                    DeleteAliasRequest.create = function create(properties) {
                        return new DeleteAliasRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteAliasRequest message. Does not implicitly {@link enfonica.voice.v1beta1.DeleteAliasRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteAliasRequest} message DeleteAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteAliasRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteAliasRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.DeleteAliasRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteAliasRequest} message DeleteAliasRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteAliasRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteAliasRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.DeleteAliasRequest} DeleteAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteAliasRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.DeleteAliasRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteAliasRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.DeleteAliasRequest} DeleteAliasRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteAliasRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteAliasRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteAliasRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteAliasRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.DeleteAliasRequest} DeleteAliasRequest
                     */
                    DeleteAliasRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.DeleteAliasRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.DeleteAliasRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteAliasRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.DeleteAliasRequest} message DeleteAliasRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteAliasRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteAliasRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.DeleteAliasRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteAliasRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteAliasRequest;
                })();
    
                v1beta1.CallRecordingConfig = (function() {
    
                    /**
                     * Properties of a CallRecordingConfig.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICallRecordingConfig
                     * @property {enfonica.voice.v1beta1.CallRecordingConfig.CallRecordingTrigger|null} [trigger] CallRecordingConfig trigger
                     * @property {Array.<enfonica.voice.v1beta1.PostProcessing>|null} [postProcessing] CallRecordingConfig postProcessing
                     * @property {string|null} [recordingReadyUri] CallRecordingConfig recordingReadyUri
                     * @property {enfonica.voice.v1beta1.TranscribeOption|null} [transcribe] CallRecordingConfig transcribe
                     * @property {string|null} [transcriptionReadyUri] CallRecordingConfig transcriptionReadyUri
                     */
    
                    /**
                     * Constructs a new CallRecordingConfig.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a CallRecordingConfig.
                     * @implements ICallRecordingConfig
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICallRecordingConfig=} [properties] Properties to set
                     */
                    function CallRecordingConfig(properties) {
                        this.postProcessing = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CallRecordingConfig trigger.
                     * @member {enfonica.voice.v1beta1.CallRecordingConfig.CallRecordingTrigger} trigger
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @instance
                     */
                    CallRecordingConfig.prototype.trigger = 0;
    
                    /**
                     * CallRecordingConfig postProcessing.
                     * @member {Array.<enfonica.voice.v1beta1.PostProcessing>} postProcessing
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @instance
                     */
                    CallRecordingConfig.prototype.postProcessing = $util.emptyArray;
    
                    /**
                     * CallRecordingConfig recordingReadyUri.
                     * @member {string} recordingReadyUri
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @instance
                     */
                    CallRecordingConfig.prototype.recordingReadyUri = "";
    
                    /**
                     * CallRecordingConfig transcribe.
                     * @member {enfonica.voice.v1beta1.TranscribeOption} transcribe
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @instance
                     */
                    CallRecordingConfig.prototype.transcribe = 0;
    
                    /**
                     * CallRecordingConfig transcriptionReadyUri.
                     * @member {string} transcriptionReadyUri
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @instance
                     */
                    CallRecordingConfig.prototype.transcriptionReadyUri = "";
    
                    /**
                     * Creates a new CallRecordingConfig instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallRecordingConfig=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.CallRecordingConfig} CallRecordingConfig instance
                     */
                    CallRecordingConfig.create = function create(properties) {
                        return new CallRecordingConfig(properties);
                    };
    
                    /**
                     * Encodes the specified CallRecordingConfig message. Does not implicitly {@link enfonica.voice.v1beta1.CallRecordingConfig.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallRecordingConfig} message CallRecordingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CallRecordingConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.trigger != null && Object.hasOwnProperty.call(message, "trigger"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.trigger);
                        if (message.postProcessing != null && message.postProcessing.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.postProcessing.length; ++i)
                                writer.int32(message.postProcessing[i]);
                            writer.ldelim();
                        }
                        if (message.recordingReadyUri != null && Object.hasOwnProperty.call(message, "recordingReadyUri"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.recordingReadyUri);
                        if (message.transcribe != null && Object.hasOwnProperty.call(message, "transcribe"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.transcribe);
                        if (message.transcriptionReadyUri != null && Object.hasOwnProperty.call(message, "transcriptionReadyUri"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.transcriptionReadyUri);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CallRecordingConfig message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.CallRecordingConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallRecordingConfig} message CallRecordingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CallRecordingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CallRecordingConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.CallRecordingConfig} CallRecordingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CallRecordingConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.CallRecordingConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.trigger = reader.int32();
                                break;
                            case 2:
                                if (!(message.postProcessing && message.postProcessing.length))
                                    message.postProcessing = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.postProcessing.push(reader.int32());
                                } else
                                    message.postProcessing.push(reader.int32());
                                break;
                            case 3:
                                message.recordingReadyUri = reader.string();
                                break;
                            case 4:
                                message.transcribe = reader.int32();
                                break;
                            case 5:
                                message.transcriptionReadyUri = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CallRecordingConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.CallRecordingConfig} CallRecordingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CallRecordingConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CallRecordingConfig message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CallRecordingConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.trigger != null && message.hasOwnProperty("trigger"))
                            switch (message.trigger) {
                            default:
                                return "trigger: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.postProcessing != null && message.hasOwnProperty("postProcessing")) {
                            if (!Array.isArray(message.postProcessing))
                                return "postProcessing: array expected";
                            for (var i = 0; i < message.postProcessing.length; ++i)
                                switch (message.postProcessing[i]) {
                                default:
                                    return "postProcessing: enum value[] expected";
                                case 0:
                                case 1:
                                    break;
                                }
                        }
                        if (message.recordingReadyUri != null && message.hasOwnProperty("recordingReadyUri"))
                            if (!$util.isString(message.recordingReadyUri))
                                return "recordingReadyUri: string expected";
                        if (message.transcribe != null && message.hasOwnProperty("transcribe"))
                            switch (message.transcribe) {
                            default:
                                return "transcribe: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.transcriptionReadyUri != null && message.hasOwnProperty("transcriptionReadyUri"))
                            if (!$util.isString(message.transcriptionReadyUri))
                                return "transcriptionReadyUri: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CallRecordingConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.CallRecordingConfig} CallRecordingConfig
                     */
                    CallRecordingConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.CallRecordingConfig)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.CallRecordingConfig();
                        switch (object.trigger) {
                        case "CALL_RECORDING_TRIGGER_UNSPECIFIED":
                        case 0:
                            message.trigger = 0;
                            break;
                        case "DISABLED":
                        case 1:
                            message.trigger = 1;
                            break;
                        case "ANSWER":
                        case 2:
                            message.trigger = 2;
                            break;
                        case "BRIDGE":
                        case 3:
                            message.trigger = 3;
                            break;
                        }
                        if (object.postProcessing) {
                            if (!Array.isArray(object.postProcessing))
                                throw TypeError(".enfonica.voice.v1beta1.CallRecordingConfig.postProcessing: array expected");
                            message.postProcessing = [];
                            for (var i = 0; i < object.postProcessing.length; ++i)
                                switch (object.postProcessing[i]) {
                                default:
                                case "POST_PROCESSING_UNSPECIFIED":
                                case 0:
                                    message.postProcessing[i] = 0;
                                    break;
                                case "TRIM_SILENCE":
                                case 1:
                                    message.postProcessing[i] = 1;
                                    break;
                                }
                        }
                        if (object.recordingReadyUri != null)
                            message.recordingReadyUri = String(object.recordingReadyUri);
                        switch (object.transcribe) {
                        case "TRANSCRIBE_OPTION_UNSPECIFIED":
                        case 0:
                            message.transcribe = 0;
                            break;
                        case "DISABLED":
                        case 1:
                            message.transcribe = 1;
                            break;
                        case "DEFAULT":
                        case 2:
                            message.transcribe = 2;
                            break;
                        }
                        if (object.transcriptionReadyUri != null)
                            message.transcriptionReadyUri = String(object.transcriptionReadyUri);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CallRecordingConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.CallRecordingConfig} message CallRecordingConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CallRecordingConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.postProcessing = [];
                        if (options.defaults) {
                            object.trigger = options.enums === String ? "CALL_RECORDING_TRIGGER_UNSPECIFIED" : 0;
                            object.recordingReadyUri = "";
                            object.transcribe = options.enums === String ? "TRANSCRIBE_OPTION_UNSPECIFIED" : 0;
                            object.transcriptionReadyUri = "";
                        }
                        if (message.trigger != null && message.hasOwnProperty("trigger"))
                            object.trigger = options.enums === String ? $root.enfonica.voice.v1beta1.CallRecordingConfig.CallRecordingTrigger[message.trigger] : message.trigger;
                        if (message.postProcessing && message.postProcessing.length) {
                            object.postProcessing = [];
                            for (var j = 0; j < message.postProcessing.length; ++j)
                                object.postProcessing[j] = options.enums === String ? $root.enfonica.voice.v1beta1.PostProcessing[message.postProcessing[j]] : message.postProcessing[j];
                        }
                        if (message.recordingReadyUri != null && message.hasOwnProperty("recordingReadyUri"))
                            object.recordingReadyUri = message.recordingReadyUri;
                        if (message.transcribe != null && message.hasOwnProperty("transcribe"))
                            object.transcribe = options.enums === String ? $root.enfonica.voice.v1beta1.TranscribeOption[message.transcribe] : message.transcribe;
                        if (message.transcriptionReadyUri != null && message.hasOwnProperty("transcriptionReadyUri"))
                            object.transcriptionReadyUri = message.transcriptionReadyUri;
                        return object;
                    };
    
                    /**
                     * Converts this CallRecordingConfig to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.CallRecordingConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CallRecordingConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * CallRecordingTrigger enum.
                     * @name enfonica.voice.v1beta1.CallRecordingConfig.CallRecordingTrigger
                     * @enum {number}
                     * @property {number} CALL_RECORDING_TRIGGER_UNSPECIFIED=0 CALL_RECORDING_TRIGGER_UNSPECIFIED value
                     * @property {number} DISABLED=1 DISABLED value
                     * @property {number} ANSWER=2 ANSWER value
                     * @property {number} BRIDGE=3 BRIDGE value
                     */
                    CallRecordingConfig.CallRecordingTrigger = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CALL_RECORDING_TRIGGER_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "DISABLED"] = 1;
                        values[valuesById[2] = "ANSWER"] = 2;
                        values[valuesById[3] = "BRIDGE"] = 3;
                        return values;
                    })();
    
                    return CallRecordingConfig;
                })();
    
                /**
                 * PostProcessing enum.
                 * @name enfonica.voice.v1beta1.PostProcessing
                 * @enum {number}
                 * @property {number} POST_PROCESSING_UNSPECIFIED=0 POST_PROCESSING_UNSPECIFIED value
                 * @property {number} TRIM_SILENCE=1 TRIM_SILENCE value
                 */
                v1beta1.PostProcessing = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "POST_PROCESSING_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "TRIM_SILENCE"] = 1;
                    return values;
                })();
    
                /**
                 * TranscribeOption enum.
                 * @name enfonica.voice.v1beta1.TranscribeOption
                 * @enum {number}
                 * @property {number} TRANSCRIBE_OPTION_UNSPECIFIED=0 TRANSCRIBE_OPTION_UNSPECIFIED value
                 * @property {number} DISABLED=1 DISABLED value
                 * @property {number} DEFAULT=2 DEFAULT value
                 */
                v1beta1.TranscribeOption = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TRANSCRIBE_OPTION_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DISABLED"] = 1;
                    values[valuesById[2] = "DEFAULT"] = 2;
                    return values;
                })();
    
                v1beta1.CallRequest = (function() {
    
                    /**
                     * Properties of a CallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICallRequest
                     * @property {enfonica.voice.v1beta1.ICall|null} [call] CallRequest call
                     * @property {Object.<string,string>|null} [parameters] CallRequest parameters
                     */
    
                    /**
                     * Constructs a new CallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a CallRequest.
                     * @implements ICallRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICallRequest=} [properties] Properties to set
                     */
                    function CallRequest(properties) {
                        this.parameters = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CallRequest call.
                     * @member {enfonica.voice.v1beta1.ICall|null|undefined} call
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @instance
                     */
                    CallRequest.prototype.call = null;
    
                    /**
                     * CallRequest parameters.
                     * @member {Object.<string,string>} parameters
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @instance
                     */
                    CallRequest.prototype.parameters = $util.emptyObject;
    
                    /**
                     * Creates a new CallRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.CallRequest} CallRequest instance
                     */
                    CallRequest.create = function create(properties) {
                        return new CallRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CallRequest message. Does not implicitly {@link enfonica.voice.v1beta1.CallRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallRequest} message CallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CallRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.call != null && Object.hasOwnProperty.call(message, "call"))
                            $root.enfonica.voice.v1beta1.Call.encode(message.call, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.parameters != null && Object.hasOwnProperty.call(message, "parameters"))
                            for (var keys = Object.keys(message.parameters), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.parameters[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CallRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.CallRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallRequest} message CallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CallRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CallRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.CallRequest} CallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CallRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.CallRequest(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.call = $root.enfonica.voice.v1beta1.Call.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (message.parameters === $util.emptyObject)
                                    message.parameters = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.parameters[key] = value;
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CallRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.CallRequest} CallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CallRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CallRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CallRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.call != null && message.hasOwnProperty("call")) {
                            var error = $root.enfonica.voice.v1beta1.Call.verify(message.call);
                            if (error)
                                return "call." + error;
                        }
                        if (message.parameters != null && message.hasOwnProperty("parameters")) {
                            if (!$util.isObject(message.parameters))
                                return "parameters: object expected";
                            var key = Object.keys(message.parameters);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.parameters[key[i]]))
                                    return "parameters: string{k:string} expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CallRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.CallRequest} CallRequest
                     */
                    CallRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.CallRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.CallRequest();
                        if (object.call != null) {
                            if (typeof object.call !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.CallRequest.call: object expected");
                            message.call = $root.enfonica.voice.v1beta1.Call.fromObject(object.call);
                        }
                        if (object.parameters) {
                            if (typeof object.parameters !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.CallRequest.parameters: object expected");
                            message.parameters = {};
                            for (var keys = Object.keys(object.parameters), i = 0; i < keys.length; ++i)
                                message.parameters[keys[i]] = String(object.parameters[keys[i]]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CallRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.CallRequest} message CallRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CallRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.parameters = {};
                        if (options.defaults)
                            object.call = null;
                        if (message.call != null && message.hasOwnProperty("call"))
                            object.call = $root.enfonica.voice.v1beta1.Call.toObject(message.call, options);
                        var keys2;
                        if (message.parameters && (keys2 = Object.keys(message.parameters)).length) {
                            object.parameters = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.parameters[keys2[j]] = message.parameters[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this CallRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.CallRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CallRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CallRequest;
                })();
    
                v1beta1.Calls = (function() {
    
                    /**
                     * Constructs a new Calls service.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a Calls
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Calls(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Calls.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Calls;
    
                    /**
                     * Creates new Calls service using the specified rpc implementation.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Calls} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Calls.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Calls|createCall}.
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @typedef CreateCallCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Call} [response] Call
                     */
    
                    /**
                     * Calls CreateCall.
                     * @function createCall
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @instance
                     * @param {enfonica.voice.v1beta1.ICreateCallRequest} request CreateCallRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Calls.CreateCallCallback} callback Node-style callback called with the error, if any, and Call
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Calls.prototype.createCall = function createCall(request, callback) {
                        return this.rpcCall(createCall, $root.enfonica.voice.v1beta1.CreateCallRequest, $root.enfonica.voice.v1beta1.Call, request, callback);
                    }, "name", { value: "CreateCall" });
    
                    /**
                     * Calls CreateCall.
                     * @function createCall
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @instance
                     * @param {enfonica.voice.v1beta1.ICreateCallRequest} request CreateCallRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Call>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Calls|getCall}.
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @typedef GetCallCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Call} [response] Call
                     */
    
                    /**
                     * Calls GetCall.
                     * @function getCall
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetCallRequest} request GetCallRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Calls.GetCallCallback} callback Node-style callback called with the error, if any, and Call
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Calls.prototype.getCall = function getCall(request, callback) {
                        return this.rpcCall(getCall, $root.enfonica.voice.v1beta1.GetCallRequest, $root.enfonica.voice.v1beta1.Call, request, callback);
                    }, "name", { value: "GetCall" });
    
                    /**
                     * Calls GetCall.
                     * @function getCall
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetCallRequest} request GetCallRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Call>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Calls|listCalls}.
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @typedef ListCallsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.ListCallsResponse} [response] ListCallsResponse
                     */
    
                    /**
                     * Calls ListCalls.
                     * @function listCalls
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListCallsRequest} request ListCallsRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Calls.ListCallsCallback} callback Node-style callback called with the error, if any, and ListCallsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Calls.prototype.listCalls = function listCalls(request, callback) {
                        return this.rpcCall(listCalls, $root.enfonica.voice.v1beta1.ListCallsRequest, $root.enfonica.voice.v1beta1.ListCallsResponse, request, callback);
                    }, "name", { value: "ListCalls" });
    
                    /**
                     * Calls ListCalls.
                     * @function listCalls
                     * @memberof enfonica.voice.v1beta1.Calls
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListCallsRequest} request ListCallsRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.ListCallsResponse>} Promise
                     * @variation 2
                     */
    
                    return Calls;
                })();
    
                v1beta1.Call = (function() {
    
                    /**
                     * Properties of a Call.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICall
                     * @property {string|null} [name] Call name
                     * @property {string|null} [to] Call to
                     * @property {string|null} [from] Call from
                     * @property {enfonica.voice.v1beta1.INumberLocation|null} [fromLocation] Call fromLocation
                     * @property {string|null} [fromZone] Call fromZone
                     * @property {boolean|null} [isPrivate] Call isPrivate
                     * @property {Object.<string,string>|null} [labels] Call labels
                     * @property {enfonica.voice.v1beta1.Call.Transport|null} [transport] Call transport
                     * @property {enfonica.voice.v1beta1.Call.Direction|null} [direction] Call direction
                     * @property {string|null} [errorCode] Call errorCode
                     * @property {string|null} [errorMessage] Call errorMessage
                     * @property {google.type.IMoney|null} [price] Call price
                     * @property {enfonica.voice.v1beta1.Call.State|null} [state] Call state
                     * @property {google.protobuf.ITimestamp|null} [createTime] Call createTime
                     * @property {google.protobuf.ITimestamp|null} [startTime] Call startTime
                     * @property {google.protobuf.ITimestamp|null} [ringTime] Call ringTime
                     * @property {google.protobuf.ITimestamp|null} [answerTime] Call answerTime
                     * @property {google.protobuf.ITimestamp|null} [endTime] Call endTime
                     * @property {boolean|null} [bridged] Call bridged
                     * @property {string|null} [originatingCall] Call originatingCall
                     * @property {enfonica.voice.v1beta1.Call.CreateMethod|null} [createMethod] Call createMethod
                     * @property {enfonica.voice.v1beta1.Call.IApiCallOptions|null} [options] Call options
                     * @property {string|null} [sipCallId] Call sipCallId
                     * @property {google.protobuf.IDuration|null} [answerDuration] Call answerDuration
                     */
    
                    /**
                     * Constructs a new Call.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a Call.
                     * @implements ICall
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICall=} [properties] Properties to set
                     */
                    function Call(properties) {
                        this.labels = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Call name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.name = "";
    
                    /**
                     * Call to.
                     * @member {string} to
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.to = "";
    
                    /**
                     * Call from.
                     * @member {string} from
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.from = "";
    
                    /**
                     * Call fromLocation.
                     * @member {enfonica.voice.v1beta1.INumberLocation|null|undefined} fromLocation
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.fromLocation = null;
    
                    /**
                     * Call fromZone.
                     * @member {string} fromZone
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.fromZone = "";
    
                    /**
                     * Call isPrivate.
                     * @member {boolean} isPrivate
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.isPrivate = false;
    
                    /**
                     * Call labels.
                     * @member {Object.<string,string>} labels
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.labels = $util.emptyObject;
    
                    /**
                     * Call transport.
                     * @member {enfonica.voice.v1beta1.Call.Transport} transport
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.transport = 0;
    
                    /**
                     * Call direction.
                     * @member {enfonica.voice.v1beta1.Call.Direction} direction
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.direction = 0;
    
                    /**
                     * Call errorCode.
                     * @member {string} errorCode
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.errorCode = "";
    
                    /**
                     * Call errorMessage.
                     * @member {string} errorMessage
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.errorMessage = "";
    
                    /**
                     * Call price.
                     * @member {google.type.IMoney|null|undefined} price
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.price = null;
    
                    /**
                     * Call state.
                     * @member {enfonica.voice.v1beta1.Call.State} state
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.state = 0;
    
                    /**
                     * Call createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.createTime = null;
    
                    /**
                     * Call startTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} startTime
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.startTime = null;
    
                    /**
                     * Call ringTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} ringTime
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.ringTime = null;
    
                    /**
                     * Call answerTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} answerTime
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.answerTime = null;
    
                    /**
                     * Call endTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} endTime
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.endTime = null;
    
                    /**
                     * Call bridged.
                     * @member {boolean} bridged
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.bridged = false;
    
                    /**
                     * Call originatingCall.
                     * @member {string} originatingCall
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.originatingCall = "";
    
                    /**
                     * Call createMethod.
                     * @member {enfonica.voice.v1beta1.Call.CreateMethod} createMethod
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.createMethod = 0;
    
                    /**
                     * Call options.
                     * @member {enfonica.voice.v1beta1.Call.IApiCallOptions|null|undefined} options
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.options = null;
    
                    /**
                     * Call sipCallId.
                     * @member {string} sipCallId
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.sipCallId = "";
    
                    /**
                     * Call answerDuration.
                     * @member {google.protobuf.IDuration|null|undefined} answerDuration
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     */
                    Call.prototype.answerDuration = null;
    
                    /**
                     * Creates a new Call instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {enfonica.voice.v1beta1.ICall=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.Call} Call instance
                     */
                    Call.create = function create(properties) {
                        return new Call(properties);
                    };
    
                    /**
                     * Encodes the specified Call message. Does not implicitly {@link enfonica.voice.v1beta1.Call.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {enfonica.voice.v1beta1.ICall} message Call message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Call.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.to);
                        if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.from);
                        if (message.isPrivate != null && Object.hasOwnProperty.call(message, "isPrivate"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isPrivate);
                        if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                            for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                        if (message.transport != null && Object.hasOwnProperty.call(message, "transport"))
                            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.transport);
                        if (message.direction != null && Object.hasOwnProperty.call(message, "direction"))
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.direction);
                        if (message.errorCode != null && Object.hasOwnProperty.call(message, "errorCode"))
                            writer.uint32(/* id 11, wireType 2 =*/90).string(message.errorCode);
                        if (message.errorMessage != null && Object.hasOwnProperty.call(message, "errorMessage"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.errorMessage);
                        if (message.price != null && Object.hasOwnProperty.call(message, "price"))
                            $root.google.type.Money.encode(message.price, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.state);
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                        if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        if (message.ringTime != null && Object.hasOwnProperty.call(message, "ringTime"))
                            $root.google.protobuf.Timestamp.encode(message.ringTime, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                        if (message.answerTime != null && Object.hasOwnProperty.call(message, "answerTime"))
                            $root.google.protobuf.Timestamp.encode(message.answerTime, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                        if (message.bridged != null && Object.hasOwnProperty.call(message, "bridged"))
                            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.bridged);
                        if (message.originatingCall != null && Object.hasOwnProperty.call(message, "originatingCall"))
                            writer.uint32(/* id 22, wireType 2 =*/178).string(message.originatingCall);
                        if (message.createMethod != null && Object.hasOwnProperty.call(message, "createMethod"))
                            writer.uint32(/* id 23, wireType 0 =*/184).int32(message.createMethod);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.enfonica.voice.v1beta1.Call.ApiCallOptions.encode(message.options, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                        if (message.fromLocation != null && Object.hasOwnProperty.call(message, "fromLocation"))
                            $root.enfonica.voice.v1beta1.NumberLocation.encode(message.fromLocation, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                        if (message.fromZone != null && Object.hasOwnProperty.call(message, "fromZone"))
                            writer.uint32(/* id 26, wireType 2 =*/210).string(message.fromZone);
                        if (message.sipCallId != null && Object.hasOwnProperty.call(message, "sipCallId"))
                            writer.uint32(/* id 27, wireType 2 =*/218).string(message.sipCallId);
                        if (message.answerDuration != null && Object.hasOwnProperty.call(message, "answerDuration"))
                            $root.google.protobuf.Duration.encode(message.answerDuration, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Call message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.Call.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {enfonica.voice.v1beta1.ICall} message Call message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Call.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Call message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.Call} Call
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Call.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.Call(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.to = reader.string();
                                break;
                            case 3:
                                message.from = reader.string();
                                break;
                            case 25:
                                message.fromLocation = $root.enfonica.voice.v1beta1.NumberLocation.decode(reader, reader.uint32());
                                break;
                            case 26:
                                message.fromZone = reader.string();
                                break;
                            case 4:
                                message.isPrivate = reader.bool();
                                break;
                            case 8:
                                if (message.labels === $util.emptyObject)
                                    message.labels = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.labels[key] = value;
                                break;
                            case 9:
                                message.transport = reader.int32();
                                break;
                            case 10:
                                message.direction = reader.int32();
                                break;
                            case 11:
                                message.errorCode = reader.string();
                                break;
                            case 12:
                                message.errorMessage = reader.string();
                                break;
                            case 13:
                                message.price = $root.google.type.Money.decode(reader, reader.uint32());
                                break;
                            case 14:
                                message.state = reader.int32();
                                break;
                            case 16:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 17:
                                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 18:
                                message.ringTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 19:
                                message.answerTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 20:
                                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 21:
                                message.bridged = reader.bool();
                                break;
                            case 22:
                                message.originatingCall = reader.string();
                                break;
                            case 23:
                                message.createMethod = reader.int32();
                                break;
                            case 24:
                                message.options = $root.enfonica.voice.v1beta1.Call.ApiCallOptions.decode(reader, reader.uint32());
                                break;
                            case 27:
                                message.sipCallId = reader.string();
                                break;
                            case 28:
                                message.answerDuration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Call message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.Call} Call
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Call.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Call message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Call.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.to != null && message.hasOwnProperty("to"))
                            if (!$util.isString(message.to))
                                return "to: string expected";
                        if (message.from != null && message.hasOwnProperty("from"))
                            if (!$util.isString(message.from))
                                return "from: string expected";
                        if (message.fromLocation != null && message.hasOwnProperty("fromLocation")) {
                            var error = $root.enfonica.voice.v1beta1.NumberLocation.verify(message.fromLocation);
                            if (error)
                                return "fromLocation." + error;
                        }
                        if (message.fromZone != null && message.hasOwnProperty("fromZone"))
                            if (!$util.isString(message.fromZone))
                                return "fromZone: string expected";
                        if (message.isPrivate != null && message.hasOwnProperty("isPrivate"))
                            if (typeof message.isPrivate !== "boolean")
                                return "isPrivate: boolean expected";
                        if (message.labels != null && message.hasOwnProperty("labels")) {
                            if (!$util.isObject(message.labels))
                                return "labels: object expected";
                            var key = Object.keys(message.labels);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.labels[key[i]]))
                                    return "labels: string{k:string} expected";
                        }
                        if (message.transport != null && message.hasOwnProperty("transport"))
                            switch (message.transport) {
                            default:
                                return "transport: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.direction != null && message.hasOwnProperty("direction"))
                            switch (message.direction) {
                            default:
                                return "direction: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                            if (!$util.isString(message.errorCode))
                                return "errorCode: string expected";
                        if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                            if (!$util.isString(message.errorMessage))
                                return "errorMessage: string expected";
                        if (message.price != null && message.hasOwnProperty("price")) {
                            var error = $root.google.type.Money.verify(message.price);
                            if (error)
                                return "price." + error;
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.startTime != null && message.hasOwnProperty("startTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                            if (error)
                                return "startTime." + error;
                        }
                        if (message.ringTime != null && message.hasOwnProperty("ringTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.ringTime);
                            if (error)
                                return "ringTime." + error;
                        }
                        if (message.answerTime != null && message.hasOwnProperty("answerTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.answerTime);
                            if (error)
                                return "answerTime." + error;
                        }
                        if (message.endTime != null && message.hasOwnProperty("endTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                            if (error)
                                return "endTime." + error;
                        }
                        if (message.bridged != null && message.hasOwnProperty("bridged"))
                            if (typeof message.bridged !== "boolean")
                                return "bridged: boolean expected";
                        if (message.originatingCall != null && message.hasOwnProperty("originatingCall"))
                            if (!$util.isString(message.originatingCall))
                                return "originatingCall: string expected";
                        if (message.createMethod != null && message.hasOwnProperty("createMethod"))
                            switch (message.createMethod) {
                            default:
                                return "createMethod: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.enfonica.voice.v1beta1.Call.ApiCallOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        if (message.sipCallId != null && message.hasOwnProperty("sipCallId"))
                            if (!$util.isString(message.sipCallId))
                                return "sipCallId: string expected";
                        if (message.answerDuration != null && message.hasOwnProperty("answerDuration")) {
                            var error = $root.google.protobuf.Duration.verify(message.answerDuration);
                            if (error)
                                return "answerDuration." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Call message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.Call} Call
                     */
                    Call.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.Call)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.Call();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.to != null)
                            message.to = String(object.to);
                        if (object.from != null)
                            message.from = String(object.from);
                        if (object.fromLocation != null) {
                            if (typeof object.fromLocation !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.fromLocation: object expected");
                            message.fromLocation = $root.enfonica.voice.v1beta1.NumberLocation.fromObject(object.fromLocation);
                        }
                        if (object.fromZone != null)
                            message.fromZone = String(object.fromZone);
                        if (object.isPrivate != null)
                            message.isPrivate = Boolean(object.isPrivate);
                        if (object.labels) {
                            if (typeof object.labels !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.labels: object expected");
                            message.labels = {};
                            for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                message.labels[keys[i]] = String(object.labels[keys[i]]);
                        }
                        switch (object.transport) {
                        case "TRANSPORT_UNSPECIFIED":
                        case 0:
                            message.transport = 0;
                            break;
                        case "PSTN":
                        case 1:
                            message.transport = 1;
                            break;
                        case "CLIENT":
                        case 2:
                            message.transport = 2;
                            break;
                        case "SIP":
                        case 3:
                            message.transport = 3;
                            break;
                        }
                        switch (object.direction) {
                        case "DIRECTION_UNSPECIFIED":
                        case 0:
                            message.direction = 0;
                            break;
                        case "OUTGOING":
                        case 1:
                            message.direction = 1;
                            break;
                        case "INCOMING":
                        case 2:
                            message.direction = 2;
                            break;
                        }
                        if (object.errorCode != null)
                            message.errorCode = String(object.errorCode);
                        if (object.errorMessage != null)
                            message.errorMessage = String(object.errorMessage);
                        if (object.price != null) {
                            if (typeof object.price !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.price: object expected");
                            message.price = $root.google.type.Money.fromObject(object.price);
                        }
                        switch (object.state) {
                        case "STATE_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "QUEUED":
                        case 1:
                            message.state = 1;
                            break;
                        case "STARTING":
                        case 2:
                            message.state = 2;
                            break;
                        case "RINGING":
                        case 3:
                            message.state = 3;
                            break;
                        case "IN_PROGRESS":
                        case 4:
                            message.state = 4;
                            break;
                        case "COMPLETED":
                        case 5:
                            message.state = 5;
                            break;
                        case "FAILED":
                        case 6:
                            message.state = 6;
                            break;
                        case "NOT_ANSWERED":
                        case 7:
                            message.state = 7;
                            break;
                        case "BUSY":
                        case 8:
                            message.state = 8;
                            break;
                        case "REJECTED":
                        case 9:
                            message.state = 9;
                            break;
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.startTime != null) {
                            if (typeof object.startTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.startTime: object expected");
                            message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                        }
                        if (object.ringTime != null) {
                            if (typeof object.ringTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.ringTime: object expected");
                            message.ringTime = $root.google.protobuf.Timestamp.fromObject(object.ringTime);
                        }
                        if (object.answerTime != null) {
                            if (typeof object.answerTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.answerTime: object expected");
                            message.answerTime = $root.google.protobuf.Timestamp.fromObject(object.answerTime);
                        }
                        if (object.endTime != null) {
                            if (typeof object.endTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.endTime: object expected");
                            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                        }
                        if (object.bridged != null)
                            message.bridged = Boolean(object.bridged);
                        if (object.originatingCall != null)
                            message.originatingCall = String(object.originatingCall);
                        switch (object.createMethod) {
                        case "CREATE_METHOD_UNSPECIFIED":
                        case 0:
                            message.createMethod = 0;
                            break;
                        case "INCOMING_CALL":
                        case 1:
                            message.createMethod = 1;
                            break;
                        case "PARENT_CALL":
                        case 2:
                            message.createMethod = 2;
                            break;
                        case "API":
                        case 3:
                            message.createMethod = 3;
                            break;
                        }
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.options: object expected");
                            message.options = $root.enfonica.voice.v1beta1.Call.ApiCallOptions.fromObject(object.options);
                        }
                        if (object.sipCallId != null)
                            message.sipCallId = String(object.sipCallId);
                        if (object.answerDuration != null) {
                            if (typeof object.answerDuration !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Call.answerDuration: object expected");
                            message.answerDuration = $root.google.protobuf.Duration.fromObject(object.answerDuration);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Call message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.Call
                     * @static
                     * @param {enfonica.voice.v1beta1.Call} message Call
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Call.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.labels = {};
                        if (options.defaults) {
                            object.name = "";
                            object.to = "";
                            object.from = "";
                            object.isPrivate = false;
                            object.transport = options.enums === String ? "TRANSPORT_UNSPECIFIED" : 0;
                            object.direction = options.enums === String ? "DIRECTION_UNSPECIFIED" : 0;
                            object.errorCode = "";
                            object.errorMessage = "";
                            object.price = null;
                            object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            object.createTime = null;
                            object.startTime = null;
                            object.ringTime = null;
                            object.answerTime = null;
                            object.endTime = null;
                            object.bridged = false;
                            object.originatingCall = "";
                            object.createMethod = options.enums === String ? "CREATE_METHOD_UNSPECIFIED" : 0;
                            object.options = null;
                            object.fromLocation = null;
                            object.fromZone = "";
                            object.sipCallId = "";
                            object.answerDuration = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.to != null && message.hasOwnProperty("to"))
                            object.to = message.to;
                        if (message.from != null && message.hasOwnProperty("from"))
                            object.from = message.from;
                        if (message.isPrivate != null && message.hasOwnProperty("isPrivate"))
                            object.isPrivate = message.isPrivate;
                        var keys2;
                        if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                            object.labels = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.labels[keys2[j]] = message.labels[keys2[j]];
                        }
                        if (message.transport != null && message.hasOwnProperty("transport"))
                            object.transport = options.enums === String ? $root.enfonica.voice.v1beta1.Call.Transport[message.transport] : message.transport;
                        if (message.direction != null && message.hasOwnProperty("direction"))
                            object.direction = options.enums === String ? $root.enfonica.voice.v1beta1.Call.Direction[message.direction] : message.direction;
                        if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                            object.errorCode = message.errorCode;
                        if (message.errorMessage != null && message.hasOwnProperty("errorMessage"))
                            object.errorMessage = message.errorMessage;
                        if (message.price != null && message.hasOwnProperty("price"))
                            object.price = $root.google.type.Money.toObject(message.price, options);
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.enfonica.voice.v1beta1.Call.State[message.state] : message.state;
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.startTime != null && message.hasOwnProperty("startTime"))
                            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                        if (message.ringTime != null && message.hasOwnProperty("ringTime"))
                            object.ringTime = $root.google.protobuf.Timestamp.toObject(message.ringTime, options);
                        if (message.answerTime != null && message.hasOwnProperty("answerTime"))
                            object.answerTime = $root.google.protobuf.Timestamp.toObject(message.answerTime, options);
                        if (message.endTime != null && message.hasOwnProperty("endTime"))
                            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                        if (message.bridged != null && message.hasOwnProperty("bridged"))
                            object.bridged = message.bridged;
                        if (message.originatingCall != null && message.hasOwnProperty("originatingCall"))
                            object.originatingCall = message.originatingCall;
                        if (message.createMethod != null && message.hasOwnProperty("createMethod"))
                            object.createMethod = options.enums === String ? $root.enfonica.voice.v1beta1.Call.CreateMethod[message.createMethod] : message.createMethod;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.enfonica.voice.v1beta1.Call.ApiCallOptions.toObject(message.options, options);
                        if (message.fromLocation != null && message.hasOwnProperty("fromLocation"))
                            object.fromLocation = $root.enfonica.voice.v1beta1.NumberLocation.toObject(message.fromLocation, options);
                        if (message.fromZone != null && message.hasOwnProperty("fromZone"))
                            object.fromZone = message.fromZone;
                        if (message.sipCallId != null && message.hasOwnProperty("sipCallId"))
                            object.sipCallId = message.sipCallId;
                        if (message.answerDuration != null && message.hasOwnProperty("answerDuration"))
                            object.answerDuration = $root.google.protobuf.Duration.toObject(message.answerDuration, options);
                        return object;
                    };
    
                    /**
                     * Converts this Call to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.Call
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Call.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    Call.ApiCallOptions = (function() {
    
                        /**
                         * Properties of an ApiCallOptions.
                         * @memberof enfonica.voice.v1beta1.Call
                         * @interface IApiCallOptions
                         * @property {Array.<string>|null} [handlerUris] ApiCallOptions handlerUris
                         * @property {string|null} [stateUpdateUri] ApiCallOptions stateUpdateUri
                         * @property {number|null} [timeoutSeconds] ApiCallOptions timeoutSeconds
                         * @property {enfonica.voice.v1beta1.ICallRecordingConfig|null} [recording] ApiCallOptions recording
                         */
    
                        /**
                         * Constructs a new ApiCallOptions.
                         * @memberof enfonica.voice.v1beta1.Call
                         * @classdesc Represents an ApiCallOptions.
                         * @implements IApiCallOptions
                         * @constructor
                         * @param {enfonica.voice.v1beta1.Call.IApiCallOptions=} [properties] Properties to set
                         */
                        function ApiCallOptions(properties) {
                            this.handlerUris = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ApiCallOptions handlerUris.
                         * @member {Array.<string>} handlerUris
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @instance
                         */
                        ApiCallOptions.prototype.handlerUris = $util.emptyArray;
    
                        /**
                         * ApiCallOptions stateUpdateUri.
                         * @member {string} stateUpdateUri
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @instance
                         */
                        ApiCallOptions.prototype.stateUpdateUri = "";
    
                        /**
                         * ApiCallOptions timeoutSeconds.
                         * @member {number} timeoutSeconds
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @instance
                         */
                        ApiCallOptions.prototype.timeoutSeconds = 0;
    
                        /**
                         * ApiCallOptions recording.
                         * @member {enfonica.voice.v1beta1.ICallRecordingConfig|null|undefined} recording
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @instance
                         */
                        ApiCallOptions.prototype.recording = null;
    
                        /**
                         * Creates a new ApiCallOptions instance using the specified properties.
                         * @function create
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {enfonica.voice.v1beta1.Call.IApiCallOptions=} [properties] Properties to set
                         * @returns {enfonica.voice.v1beta1.Call.ApiCallOptions} ApiCallOptions instance
                         */
                        ApiCallOptions.create = function create(properties) {
                            return new ApiCallOptions(properties);
                        };
    
                        /**
                         * Encodes the specified ApiCallOptions message. Does not implicitly {@link enfonica.voice.v1beta1.Call.ApiCallOptions.verify|verify} messages.
                         * @function encode
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {enfonica.voice.v1beta1.Call.IApiCallOptions} message ApiCallOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ApiCallOptions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.handlerUris != null && message.handlerUris.length)
                                for (var i = 0; i < message.handlerUris.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.handlerUris[i]);
                            if (message.stateUpdateUri != null && Object.hasOwnProperty.call(message, "stateUpdateUri"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.stateUpdateUri);
                            if (message.timeoutSeconds != null && Object.hasOwnProperty.call(message, "timeoutSeconds"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.timeoutSeconds);
                            if (message.recording != null && Object.hasOwnProperty.call(message, "recording"))
                                $root.enfonica.voice.v1beta1.CallRecordingConfig.encode(message.recording, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ApiCallOptions message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.Call.ApiCallOptions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {enfonica.voice.v1beta1.Call.IApiCallOptions} message ApiCallOptions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ApiCallOptions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ApiCallOptions message from the specified reader or buffer.
                         * @function decode
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {enfonica.voice.v1beta1.Call.ApiCallOptions} ApiCallOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ApiCallOptions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.Call.ApiCallOptions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.handlerUris && message.handlerUris.length))
                                        message.handlerUris = [];
                                    message.handlerUris.push(reader.string());
                                    break;
                                case 2:
                                    message.stateUpdateUri = reader.string();
                                    break;
                                case 3:
                                    message.timeoutSeconds = reader.int32();
                                    break;
                                case 4:
                                    message.recording = $root.enfonica.voice.v1beta1.CallRecordingConfig.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ApiCallOptions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {enfonica.voice.v1beta1.Call.ApiCallOptions} ApiCallOptions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ApiCallOptions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ApiCallOptions message.
                         * @function verify
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ApiCallOptions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.handlerUris != null && message.hasOwnProperty("handlerUris")) {
                                if (!Array.isArray(message.handlerUris))
                                    return "handlerUris: array expected";
                                for (var i = 0; i < message.handlerUris.length; ++i)
                                    if (!$util.isString(message.handlerUris[i]))
                                        return "handlerUris: string[] expected";
                            }
                            if (message.stateUpdateUri != null && message.hasOwnProperty("stateUpdateUri"))
                                if (!$util.isString(message.stateUpdateUri))
                                    return "stateUpdateUri: string expected";
                            if (message.timeoutSeconds != null && message.hasOwnProperty("timeoutSeconds"))
                                if (!$util.isInteger(message.timeoutSeconds))
                                    return "timeoutSeconds: integer expected";
                            if (message.recording != null && message.hasOwnProperty("recording")) {
                                var error = $root.enfonica.voice.v1beta1.CallRecordingConfig.verify(message.recording);
                                if (error)
                                    return "recording." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ApiCallOptions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {enfonica.voice.v1beta1.Call.ApiCallOptions} ApiCallOptions
                         */
                        ApiCallOptions.fromObject = function fromObject(object) {
                            if (object instanceof $root.enfonica.voice.v1beta1.Call.ApiCallOptions)
                                return object;
                            var message = new $root.enfonica.voice.v1beta1.Call.ApiCallOptions();
                            if (object.handlerUris) {
                                if (!Array.isArray(object.handlerUris))
                                    throw TypeError(".enfonica.voice.v1beta1.Call.ApiCallOptions.handlerUris: array expected");
                                message.handlerUris = [];
                                for (var i = 0; i < object.handlerUris.length; ++i)
                                    message.handlerUris[i] = String(object.handlerUris[i]);
                            }
                            if (object.stateUpdateUri != null)
                                message.stateUpdateUri = String(object.stateUpdateUri);
                            if (object.timeoutSeconds != null)
                                message.timeoutSeconds = object.timeoutSeconds | 0;
                            if (object.recording != null) {
                                if (typeof object.recording !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.Call.ApiCallOptions.recording: object expected");
                                message.recording = $root.enfonica.voice.v1beta1.CallRecordingConfig.fromObject(object.recording);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ApiCallOptions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @static
                         * @param {enfonica.voice.v1beta1.Call.ApiCallOptions} message ApiCallOptions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ApiCallOptions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.handlerUris = [];
                            if (options.defaults) {
                                object.stateUpdateUri = "";
                                object.timeoutSeconds = 0;
                                object.recording = null;
                            }
                            if (message.handlerUris && message.handlerUris.length) {
                                object.handlerUris = [];
                                for (var j = 0; j < message.handlerUris.length; ++j)
                                    object.handlerUris[j] = message.handlerUris[j];
                            }
                            if (message.stateUpdateUri != null && message.hasOwnProperty("stateUpdateUri"))
                                object.stateUpdateUri = message.stateUpdateUri;
                            if (message.timeoutSeconds != null && message.hasOwnProperty("timeoutSeconds"))
                                object.timeoutSeconds = message.timeoutSeconds;
                            if (message.recording != null && message.hasOwnProperty("recording"))
                                object.recording = $root.enfonica.voice.v1beta1.CallRecordingConfig.toObject(message.recording, options);
                            return object;
                        };
    
                        /**
                         * Converts this ApiCallOptions to JSON.
                         * @function toJSON
                         * @memberof enfonica.voice.v1beta1.Call.ApiCallOptions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ApiCallOptions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ApiCallOptions;
                    })();
    
                    /**
                     * State enum.
                     * @name enfonica.voice.v1beta1.Call.State
                     * @enum {number}
                     * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                     * @property {number} QUEUED=1 QUEUED value
                     * @property {number} STARTING=2 STARTING value
                     * @property {number} RINGING=3 RINGING value
                     * @property {number} IN_PROGRESS=4 IN_PROGRESS value
                     * @property {number} COMPLETED=5 COMPLETED value
                     * @property {number} FAILED=6 FAILED value
                     * @property {number} NOT_ANSWERED=7 NOT_ANSWERED value
                     * @property {number} BUSY=8 BUSY value
                     * @property {number} REJECTED=9 REJECTED value
                     */
                    Call.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "QUEUED"] = 1;
                        values[valuesById[2] = "STARTING"] = 2;
                        values[valuesById[3] = "RINGING"] = 3;
                        values[valuesById[4] = "IN_PROGRESS"] = 4;
                        values[valuesById[5] = "COMPLETED"] = 5;
                        values[valuesById[6] = "FAILED"] = 6;
                        values[valuesById[7] = "NOT_ANSWERED"] = 7;
                        values[valuesById[8] = "BUSY"] = 8;
                        values[valuesById[9] = "REJECTED"] = 9;
                        return values;
                    })();
    
                    /**
                     * Direction enum.
                     * @name enfonica.voice.v1beta1.Call.Direction
                     * @enum {number}
                     * @property {number} DIRECTION_UNSPECIFIED=0 DIRECTION_UNSPECIFIED value
                     * @property {number} OUTGOING=1 OUTGOING value
                     * @property {number} INCOMING=2 INCOMING value
                     */
                    Call.Direction = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DIRECTION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "OUTGOING"] = 1;
                        values[valuesById[2] = "INCOMING"] = 2;
                        return values;
                    })();
    
                    /**
                     * Transport enum.
                     * @name enfonica.voice.v1beta1.Call.Transport
                     * @enum {number}
                     * @property {number} TRANSPORT_UNSPECIFIED=0 TRANSPORT_UNSPECIFIED value
                     * @property {number} PSTN=1 PSTN value
                     * @property {number} CLIENT=2 CLIENT value
                     * @property {number} SIP=3 SIP value
                     */
                    Call.Transport = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TRANSPORT_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PSTN"] = 1;
                        values[valuesById[2] = "CLIENT"] = 2;
                        values[valuesById[3] = "SIP"] = 3;
                        return values;
                    })();
    
                    /**
                     * CreateMethod enum.
                     * @name enfonica.voice.v1beta1.Call.CreateMethod
                     * @enum {number}
                     * @property {number} CREATE_METHOD_UNSPECIFIED=0 CREATE_METHOD_UNSPECIFIED value
                     * @property {number} INCOMING_CALL=1 INCOMING_CALL value
                     * @property {number} PARENT_CALL=2 PARENT_CALL value
                     * @property {number} API=3 API value
                     */
                    Call.CreateMethod = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CREATE_METHOD_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "INCOMING_CALL"] = 1;
                        values[valuesById[2] = "PARENT_CALL"] = 2;
                        values[valuesById[3] = "API"] = 3;
                        return values;
                    })();
    
                    return Call;
                })();
    
                v1beta1.NumberLocation = (function() {
    
                    /**
                     * Properties of a NumberLocation.
                     * @memberof enfonica.voice.v1beta1
                     * @interface INumberLocation
                     * @property {string|null} [regionCode] NumberLocation regionCode
                     * @property {string|null} [administrativeArea] NumberLocation administrativeArea
                     * @property {string|null} [locality] NumberLocation locality
                     * @property {google.type.ILatLng|null} [coordinates] NumberLocation coordinates
                     */
    
                    /**
                     * Constructs a new NumberLocation.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a NumberLocation.
                     * @implements INumberLocation
                     * @constructor
                     * @param {enfonica.voice.v1beta1.INumberLocation=} [properties] Properties to set
                     */
                    function NumberLocation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NumberLocation regionCode.
                     * @member {string} regionCode
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @instance
                     */
                    NumberLocation.prototype.regionCode = "";
    
                    /**
                     * NumberLocation administrativeArea.
                     * @member {string} administrativeArea
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @instance
                     */
                    NumberLocation.prototype.administrativeArea = "";
    
                    /**
                     * NumberLocation locality.
                     * @member {string} locality
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @instance
                     */
                    NumberLocation.prototype.locality = "";
    
                    /**
                     * NumberLocation coordinates.
                     * @member {google.type.ILatLng|null|undefined} coordinates
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @instance
                     */
                    NumberLocation.prototype.coordinates = null;
    
                    /**
                     * Creates a new NumberLocation instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {enfonica.voice.v1beta1.INumberLocation=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.NumberLocation} NumberLocation instance
                     */
                    NumberLocation.create = function create(properties) {
                        return new NumberLocation(properties);
                    };
    
                    /**
                     * Encodes the specified NumberLocation message. Does not implicitly {@link enfonica.voice.v1beta1.NumberLocation.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {enfonica.voice.v1beta1.INumberLocation} message NumberLocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NumberLocation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.regionCode != null && Object.hasOwnProperty.call(message, "regionCode"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.regionCode);
                        if (message.administrativeArea != null && Object.hasOwnProperty.call(message, "administrativeArea"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.administrativeArea);
                        if (message.locality != null && Object.hasOwnProperty.call(message, "locality"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.locality);
                        if (message.coordinates != null && Object.hasOwnProperty.call(message, "coordinates"))
                            $root.google.type.LatLng.encode(message.coordinates, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NumberLocation message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.NumberLocation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {enfonica.voice.v1beta1.INumberLocation} message NumberLocation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NumberLocation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NumberLocation message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.NumberLocation} NumberLocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NumberLocation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.NumberLocation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.regionCode = reader.string();
                                break;
                            case 2:
                                message.administrativeArea = reader.string();
                                break;
                            case 3:
                                message.locality = reader.string();
                                break;
                            case 4:
                                message.coordinates = $root.google.type.LatLng.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NumberLocation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.NumberLocation} NumberLocation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NumberLocation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NumberLocation message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NumberLocation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                            if (!$util.isString(message.regionCode))
                                return "regionCode: string expected";
                        if (message.administrativeArea != null && message.hasOwnProperty("administrativeArea"))
                            if (!$util.isString(message.administrativeArea))
                                return "administrativeArea: string expected";
                        if (message.locality != null && message.hasOwnProperty("locality"))
                            if (!$util.isString(message.locality))
                                return "locality: string expected";
                        if (message.coordinates != null && message.hasOwnProperty("coordinates")) {
                            var error = $root.google.type.LatLng.verify(message.coordinates);
                            if (error)
                                return "coordinates." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NumberLocation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.NumberLocation} NumberLocation
                     */
                    NumberLocation.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.NumberLocation)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.NumberLocation();
                        if (object.regionCode != null)
                            message.regionCode = String(object.regionCode);
                        if (object.administrativeArea != null)
                            message.administrativeArea = String(object.administrativeArea);
                        if (object.locality != null)
                            message.locality = String(object.locality);
                        if (object.coordinates != null) {
                            if (typeof object.coordinates !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.NumberLocation.coordinates: object expected");
                            message.coordinates = $root.google.type.LatLng.fromObject(object.coordinates);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NumberLocation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @static
                     * @param {enfonica.voice.v1beta1.NumberLocation} message NumberLocation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NumberLocation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.regionCode = "";
                            object.administrativeArea = "";
                            object.locality = "";
                            object.coordinates = null;
                        }
                        if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                            object.regionCode = message.regionCode;
                        if (message.administrativeArea != null && message.hasOwnProperty("administrativeArea"))
                            object.administrativeArea = message.administrativeArea;
                        if (message.locality != null && message.hasOwnProperty("locality"))
                            object.locality = message.locality;
                        if (message.coordinates != null && message.hasOwnProperty("coordinates"))
                            object.coordinates = $root.google.type.LatLng.toObject(message.coordinates, options);
                        return object;
                    };
    
                    /**
                     * Converts this NumberLocation to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.NumberLocation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NumberLocation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NumberLocation;
                })();
    
                v1beta1.CreateCallRequest = (function() {
    
                    /**
                     * Properties of a CreateCallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICreateCallRequest
                     * @property {string|null} [parent] CreateCallRequest parent
                     * @property {enfonica.voice.v1beta1.ICall|null} [call] CreateCallRequest call
                     */
    
                    /**
                     * Constructs a new CreateCallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a CreateCallRequest.
                     * @implements ICreateCallRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICreateCallRequest=} [properties] Properties to set
                     */
                    function CreateCallRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateCallRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @instance
                     */
                    CreateCallRequest.prototype.parent = "";
    
                    /**
                     * CreateCallRequest call.
                     * @member {enfonica.voice.v1beta1.ICall|null|undefined} call
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @instance
                     */
                    CreateCallRequest.prototype.call = null;
    
                    /**
                     * Creates a new CreateCallRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateCallRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.CreateCallRequest} CreateCallRequest instance
                     */
                    CreateCallRequest.create = function create(properties) {
                        return new CreateCallRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateCallRequest message. Does not implicitly {@link enfonica.voice.v1beta1.CreateCallRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateCallRequest} message CreateCallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateCallRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.call != null && Object.hasOwnProperty.call(message, "call"))
                            $root.enfonica.voice.v1beta1.Call.encode(message.call, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateCallRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.CreateCallRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateCallRequest} message CreateCallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateCallRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateCallRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.CreateCallRequest} CreateCallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateCallRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.CreateCallRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.call = $root.enfonica.voice.v1beta1.Call.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateCallRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.CreateCallRequest} CreateCallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateCallRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateCallRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateCallRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.call != null && message.hasOwnProperty("call")) {
                            var error = $root.enfonica.voice.v1beta1.Call.verify(message.call);
                            if (error)
                                return "call." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CreateCallRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.CreateCallRequest} CreateCallRequest
                     */
                    CreateCallRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.CreateCallRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.CreateCallRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.call != null) {
                            if (typeof object.call !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.CreateCallRequest.call: object expected");
                            message.call = $root.enfonica.voice.v1beta1.Call.fromObject(object.call);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateCallRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.CreateCallRequest} message CreateCallRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateCallRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.call = null;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.call != null && message.hasOwnProperty("call"))
                            object.call = $root.enfonica.voice.v1beta1.Call.toObject(message.call, options);
                        return object;
                    };
    
                    /**
                     * Converts this CreateCallRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.CreateCallRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateCallRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateCallRequest;
                })();
    
                v1beta1.GetCallRequest = (function() {
    
                    /**
                     * Properties of a GetCallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IGetCallRequest
                     * @property {string|null} [name] GetCallRequest name
                     */
    
                    /**
                     * Constructs a new GetCallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a GetCallRequest.
                     * @implements IGetCallRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IGetCallRequest=} [properties] Properties to set
                     */
                    function GetCallRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetCallRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @instance
                     */
                    GetCallRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetCallRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetCallRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.GetCallRequest} GetCallRequest instance
                     */
                    GetCallRequest.create = function create(properties) {
                        return new GetCallRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetCallRequest message. Does not implicitly {@link enfonica.voice.v1beta1.GetCallRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetCallRequest} message GetCallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetCallRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetCallRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.GetCallRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetCallRequest} message GetCallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetCallRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetCallRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.GetCallRequest} GetCallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetCallRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.GetCallRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetCallRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.GetCallRequest} GetCallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetCallRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetCallRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetCallRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetCallRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.GetCallRequest} GetCallRequest
                     */
                    GetCallRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.GetCallRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.GetCallRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetCallRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.GetCallRequest} message GetCallRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetCallRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetCallRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.GetCallRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetCallRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetCallRequest;
                })();
    
                v1beta1.ListCallsRequest = (function() {
    
                    /**
                     * Properties of a ListCallsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListCallsRequest
                     * @property {string|null} [parent] ListCallsRequest parent
                     * @property {number|null} [pageSize] ListCallsRequest pageSize
                     * @property {string|null} [pageToken] ListCallsRequest pageToken
                     * @property {string|null} [filter] ListCallsRequest filter
                     */
    
                    /**
                     * Constructs a new ListCallsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListCallsRequest.
                     * @implements IListCallsRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListCallsRequest=} [properties] Properties to set
                     */
                    function ListCallsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListCallsRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @instance
                     */
                    ListCallsRequest.prototype.parent = "";
    
                    /**
                     * ListCallsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @instance
                     */
                    ListCallsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListCallsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @instance
                     */
                    ListCallsRequest.prototype.pageToken = "";
    
                    /**
                     * ListCallsRequest filter.
                     * @member {string} filter
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @instance
                     */
                    ListCallsRequest.prototype.filter = "";
    
                    /**
                     * Creates a new ListCallsRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListCallsRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListCallsRequest} ListCallsRequest instance
                     */
                    ListCallsRequest.create = function create(properties) {
                        return new ListCallsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListCallsRequest message. Does not implicitly {@link enfonica.voice.v1beta1.ListCallsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListCallsRequest} message ListCallsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListCallsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.filter);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListCallsRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListCallsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListCallsRequest} message ListCallsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListCallsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListCallsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListCallsRequest} ListCallsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListCallsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListCallsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            case 4:
                                message.filter = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListCallsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListCallsRequest} ListCallsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListCallsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListCallsRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListCallsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            if (!$util.isString(message.filter))
                                return "filter: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListCallsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListCallsRequest} ListCallsRequest
                     */
                    ListCallsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListCallsRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListCallsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        if (object.filter != null)
                            message.filter = String(object.filter);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListCallsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ListCallsRequest} message ListCallsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListCallsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.filter = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = message.filter;
                        return object;
                    };
    
                    /**
                     * Converts this ListCallsRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListCallsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListCallsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListCallsRequest;
                })();
    
                v1beta1.ListCallsResponse = (function() {
    
                    /**
                     * Properties of a ListCallsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListCallsResponse
                     * @property {Array.<enfonica.voice.v1beta1.ICall>|null} [calls] ListCallsResponse calls
                     * @property {string|null} [nextPageToken] ListCallsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListCallsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListCallsResponse.
                     * @implements IListCallsResponse
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListCallsResponse=} [properties] Properties to set
                     */
                    function ListCallsResponse(properties) {
                        this.calls = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListCallsResponse calls.
                     * @member {Array.<enfonica.voice.v1beta1.ICall>} calls
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @instance
                     */
                    ListCallsResponse.prototype.calls = $util.emptyArray;
    
                    /**
                     * ListCallsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @instance
                     */
                    ListCallsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListCallsResponse instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListCallsResponse=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListCallsResponse} ListCallsResponse instance
                     */
                    ListCallsResponse.create = function create(properties) {
                        return new ListCallsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListCallsResponse message. Does not implicitly {@link enfonica.voice.v1beta1.ListCallsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListCallsResponse} message ListCallsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListCallsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.calls != null && message.calls.length)
                            for (var i = 0; i < message.calls.length; ++i)
                                $root.enfonica.voice.v1beta1.Call.encode(message.calls[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListCallsResponse message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListCallsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListCallsResponse} message ListCallsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListCallsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListCallsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListCallsResponse} ListCallsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListCallsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListCallsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.calls && message.calls.length))
                                    message.calls = [];
                                message.calls.push($root.enfonica.voice.v1beta1.Call.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListCallsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListCallsResponse} ListCallsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListCallsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListCallsResponse message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListCallsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.calls != null && message.hasOwnProperty("calls")) {
                            if (!Array.isArray(message.calls))
                                return "calls: array expected";
                            for (var i = 0; i < message.calls.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.Call.verify(message.calls[i]);
                                if (error)
                                    return "calls." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListCallsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListCallsResponse} ListCallsResponse
                     */
                    ListCallsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListCallsResponse)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListCallsResponse();
                        if (object.calls) {
                            if (!Array.isArray(object.calls))
                                throw TypeError(".enfonica.voice.v1beta1.ListCallsResponse.calls: array expected");
                            message.calls = [];
                            for (var i = 0; i < object.calls.length; ++i) {
                                if (typeof object.calls[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.ListCallsResponse.calls: object expected");
                                message.calls[i] = $root.enfonica.voice.v1beta1.Call.fromObject(object.calls[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListCallsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.ListCallsResponse} message ListCallsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListCallsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.calls = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.calls && message.calls.length) {
                            object.calls = [];
                            for (var j = 0; j < message.calls.length; ++j)
                                object.calls[j] = $root.enfonica.voice.v1beta1.Call.toObject(message.calls[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListCallsResponse to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListCallsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListCallsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListCallsResponse;
                })();
    
                v1beta1.Recordings = (function() {
    
                    /**
                     * Constructs a new Recordings service.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a Recordings
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Recordings(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Recordings.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Recordings;
    
                    /**
                     * Creates new Recordings service using the specified rpc implementation.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Recordings} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Recordings.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Recordings|getRecording}.
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @typedef GetRecordingCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Recording} [response] Recording
                     */
    
                    /**
                     * Calls GetRecording.
                     * @function getRecording
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetRecordingRequest} request GetRecordingRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Recordings.GetRecordingCallback} callback Node-style callback called with the error, if any, and Recording
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Recordings.prototype.getRecording = function getRecording(request, callback) {
                        return this.rpcCall(getRecording, $root.enfonica.voice.v1beta1.GetRecordingRequest, $root.enfonica.voice.v1beta1.Recording, request, callback);
                    }, "name", { value: "GetRecording" });
    
                    /**
                     * Calls GetRecording.
                     * @function getRecording
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetRecordingRequest} request GetRecordingRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Recording>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Recordings|listRecordings}.
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @typedef ListRecordingsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.ListRecordingsResponse} [response] ListRecordingsResponse
                     */
    
                    /**
                     * Calls ListRecordings.
                     * @function listRecordings
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListRecordingsRequest} request ListRecordingsRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Recordings.ListRecordingsCallback} callback Node-style callback called with the error, if any, and ListRecordingsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Recordings.prototype.listRecordings = function listRecordings(request, callback) {
                        return this.rpcCall(listRecordings, $root.enfonica.voice.v1beta1.ListRecordingsRequest, $root.enfonica.voice.v1beta1.ListRecordingsResponse, request, callback);
                    }, "name", { value: "ListRecordings" });
    
                    /**
                     * Calls ListRecordings.
                     * @function listRecordings
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListRecordingsRequest} request ListRecordingsRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.ListRecordingsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Recordings|deleteRecording}.
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @typedef DeleteRecordingCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Recording} [response] Recording
                     */
    
                    /**
                     * Calls DeleteRecording.
                     * @function deleteRecording
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteRecordingRequest} request DeleteRecordingRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Recordings.DeleteRecordingCallback} callback Node-style callback called with the error, if any, and Recording
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Recordings.prototype.deleteRecording = function deleteRecording(request, callback) {
                        return this.rpcCall(deleteRecording, $root.enfonica.voice.v1beta1.DeleteRecordingRequest, $root.enfonica.voice.v1beta1.Recording, request, callback);
                    }, "name", { value: "DeleteRecording" });
    
                    /**
                     * Calls DeleteRecording.
                     * @function deleteRecording
                     * @memberof enfonica.voice.v1beta1.Recordings
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteRecordingRequest} request DeleteRecordingRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Recording>} Promise
                     * @variation 2
                     */
    
                    return Recordings;
                })();
    
                v1beta1.Recording = (function() {
    
                    /**
                     * Properties of a Recording.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IRecording
                     * @property {string|null} [name] Recording name
                     * @property {enfonica.voice.v1beta1.Recording.State|null} [state] Recording state
                     * @property {enfonica.voice.v1beta1.Recording.Source|null} [source] Recording source
                     * @property {google.protobuf.IDuration|null} [duration] Recording duration
                     * @property {number|null} [channelCount] Recording channelCount
                     * @property {Array.<enfonica.voice.v1beta1.PostProcessing>|null} [postProcessing] Recording postProcessing
                     * @property {enfonica.voice.v1beta1.Recording.ErrorCode|null} [errorCode] Recording errorCode
                     * @property {Array.<enfonica.voice.v1beta1.IRecordingAudio>|null} [audio] Recording audio
                     * @property {google.protobuf.ITimestamp|null} [startTime] Recording startTime
                     * @property {google.protobuf.ITimestamp|null} [createTime] Recording createTime
                     * @property {string|null} [readyUri] Recording readyUri
                     */
    
                    /**
                     * Constructs a new Recording.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a Recording.
                     * @implements IRecording
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IRecording=} [properties] Properties to set
                     */
                    function Recording(properties) {
                        this.postProcessing = [];
                        this.audio = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Recording name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.name = "";
    
                    /**
                     * Recording state.
                     * @member {enfonica.voice.v1beta1.Recording.State} state
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.state = 0;
    
                    /**
                     * Recording source.
                     * @member {enfonica.voice.v1beta1.Recording.Source} source
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.source = 0;
    
                    /**
                     * Recording duration.
                     * @member {google.protobuf.IDuration|null|undefined} duration
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.duration = null;
    
                    /**
                     * Recording channelCount.
                     * @member {number} channelCount
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.channelCount = 0;
    
                    /**
                     * Recording postProcessing.
                     * @member {Array.<enfonica.voice.v1beta1.PostProcessing>} postProcessing
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.postProcessing = $util.emptyArray;
    
                    /**
                     * Recording errorCode.
                     * @member {enfonica.voice.v1beta1.Recording.ErrorCode} errorCode
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.errorCode = 0;
    
                    /**
                     * Recording audio.
                     * @member {Array.<enfonica.voice.v1beta1.IRecordingAudio>} audio
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.audio = $util.emptyArray;
    
                    /**
                     * Recording startTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} startTime
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.startTime = null;
    
                    /**
                     * Recording createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.createTime = null;
    
                    /**
                     * Recording readyUri.
                     * @member {string} readyUri
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     */
                    Recording.prototype.readyUri = "";
    
                    /**
                     * Creates a new Recording instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {enfonica.voice.v1beta1.IRecording=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.Recording} Recording instance
                     */
                    Recording.create = function create(properties) {
                        return new Recording(properties);
                    };
    
                    /**
                     * Encodes the specified Recording message. Does not implicitly {@link enfonica.voice.v1beta1.Recording.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {enfonica.voice.v1beta1.IRecording} message Recording message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Recording.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                        if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.source);
                        if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                            $root.google.protobuf.Duration.encode(message.duration, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.channelCount != null && Object.hasOwnProperty.call(message, "channelCount"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.channelCount);
                        if (message.postProcessing != null && message.postProcessing.length) {
                            writer.uint32(/* id 7, wireType 2 =*/58).fork();
                            for (var i = 0; i < message.postProcessing.length; ++i)
                                writer.int32(message.postProcessing[i]);
                            writer.ldelim();
                        }
                        if (message.errorCode != null && Object.hasOwnProperty.call(message, "errorCode"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.errorCode);
                        if (message.audio != null && message.audio.length)
                            for (var i = 0; i < message.audio.length; ++i)
                                $root.enfonica.voice.v1beta1.RecordingAudio.encode(message.audio[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.readyUri != null && Object.hasOwnProperty.call(message, "readyUri"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.readyUri);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Recording message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.Recording.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {enfonica.voice.v1beta1.IRecording} message Recording message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Recording.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Recording message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.Recording} Recording
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Recording.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.Recording();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 3:
                                message.state = reader.int32();
                                break;
                            case 4:
                                message.source = reader.int32();
                                break;
                            case 5:
                                message.duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.channelCount = reader.int32();
                                break;
                            case 7:
                                if (!(message.postProcessing && message.postProcessing.length))
                                    message.postProcessing = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.postProcessing.push(reader.int32());
                                } else
                                    message.postProcessing.push(reader.int32());
                                break;
                            case 8:
                                message.errorCode = reader.int32();
                                break;
                            case 9:
                                if (!(message.audio && message.audio.length))
                                    message.audio = [];
                                message.audio.push($root.enfonica.voice.v1beta1.RecordingAudio.decode(reader, reader.uint32()));
                                break;
                            case 10:
                                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.readyUri = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Recording message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.Recording} Recording
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Recording.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Recording message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Recording.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.source != null && message.hasOwnProperty("source"))
                            switch (message.source) {
                            default:
                                return "source: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.duration != null && message.hasOwnProperty("duration")) {
                            var error = $root.google.protobuf.Duration.verify(message.duration);
                            if (error)
                                return "duration." + error;
                        }
                        if (message.channelCount != null && message.hasOwnProperty("channelCount"))
                            if (!$util.isInteger(message.channelCount))
                                return "channelCount: integer expected";
                        if (message.postProcessing != null && message.hasOwnProperty("postProcessing")) {
                            if (!Array.isArray(message.postProcessing))
                                return "postProcessing: array expected";
                            for (var i = 0; i < message.postProcessing.length; ++i)
                                switch (message.postProcessing[i]) {
                                default:
                                    return "postProcessing: enum value[] expected";
                                case 0:
                                case 1:
                                    break;
                                }
                        }
                        if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                            switch (message.errorCode) {
                            default:
                                return "errorCode: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.audio != null && message.hasOwnProperty("audio")) {
                            if (!Array.isArray(message.audio))
                                return "audio: array expected";
                            for (var i = 0; i < message.audio.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.RecordingAudio.verify(message.audio[i]);
                                if (error)
                                    return "audio." + error;
                            }
                        }
                        if (message.startTime != null && message.hasOwnProperty("startTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                            if (error)
                                return "startTime." + error;
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.readyUri != null && message.hasOwnProperty("readyUri"))
                            if (!$util.isString(message.readyUri))
                                return "readyUri: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Recording message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.Recording} Recording
                     */
                    Recording.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.Recording)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.Recording();
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.state) {
                        case "STATE_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "PENDING":
                        case 1:
                            message.state = 1;
                            break;
                        case "SUCCEEDED":
                        case 2:
                            message.state = 2;
                            break;
                        case "EMPTY":
                        case 3:
                            message.state = 3;
                            break;
                        case "FAILED":
                        case 4:
                            message.state = 4;
                            break;
                        }
                        switch (object.source) {
                        case "SOURCE_UNSPECIFIED":
                        case 0:
                            message.source = 0;
                            break;
                        case "RECORD_ACTION":
                        case 1:
                            message.source = 1;
                            break;
                        case "CALL_RECORDING":
                        case 2:
                            message.source = 2;
                            break;
                        }
                        if (object.duration != null) {
                            if (typeof object.duration !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Recording.duration: object expected");
                            message.duration = $root.google.protobuf.Duration.fromObject(object.duration);
                        }
                        if (object.channelCount != null)
                            message.channelCount = object.channelCount | 0;
                        if (object.postProcessing) {
                            if (!Array.isArray(object.postProcessing))
                                throw TypeError(".enfonica.voice.v1beta1.Recording.postProcessing: array expected");
                            message.postProcessing = [];
                            for (var i = 0; i < object.postProcessing.length; ++i)
                                switch (object.postProcessing[i]) {
                                default:
                                case "POST_PROCESSING_UNSPECIFIED":
                                case 0:
                                    message.postProcessing[i] = 0;
                                    break;
                                case "TRIM_SILENCE":
                                case 1:
                                    message.postProcessing[i] = 1;
                                    break;
                                }
                        }
                        switch (object.errorCode) {
                        case "ERROR_CODE_UNSPECIFIED":
                        case 0:
                            message.errorCode = 0;
                            break;
                        case "TIMEOUT":
                        case 1:
                            message.errorCode = 1;
                            break;
                        case "INTERNAL_ERROR":
                        case 2:
                            message.errorCode = 2;
                            break;
                        }
                        if (object.audio) {
                            if (!Array.isArray(object.audio))
                                throw TypeError(".enfonica.voice.v1beta1.Recording.audio: array expected");
                            message.audio = [];
                            for (var i = 0; i < object.audio.length; ++i) {
                                if (typeof object.audio[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.Recording.audio: object expected");
                                message.audio[i] = $root.enfonica.voice.v1beta1.RecordingAudio.fromObject(object.audio[i]);
                            }
                        }
                        if (object.startTime != null) {
                            if (typeof object.startTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Recording.startTime: object expected");
                            message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Recording.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.readyUri != null)
                            message.readyUri = String(object.readyUri);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Recording message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @static
                     * @param {enfonica.voice.v1beta1.Recording} message Recording
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Recording.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.postProcessing = [];
                            object.audio = [];
                        }
                        if (options.defaults) {
                            object.name = "";
                            object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            object.source = options.enums === String ? "SOURCE_UNSPECIFIED" : 0;
                            object.duration = null;
                            object.channelCount = 0;
                            object.errorCode = options.enums === String ? "ERROR_CODE_UNSPECIFIED" : 0;
                            object.startTime = null;
                            object.createTime = null;
                            object.readyUri = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.enfonica.voice.v1beta1.Recording.State[message.state] : message.state;
                        if (message.source != null && message.hasOwnProperty("source"))
                            object.source = options.enums === String ? $root.enfonica.voice.v1beta1.Recording.Source[message.source] : message.source;
                        if (message.duration != null && message.hasOwnProperty("duration"))
                            object.duration = $root.google.protobuf.Duration.toObject(message.duration, options);
                        if (message.channelCount != null && message.hasOwnProperty("channelCount"))
                            object.channelCount = message.channelCount;
                        if (message.postProcessing && message.postProcessing.length) {
                            object.postProcessing = [];
                            for (var j = 0; j < message.postProcessing.length; ++j)
                                object.postProcessing[j] = options.enums === String ? $root.enfonica.voice.v1beta1.PostProcessing[message.postProcessing[j]] : message.postProcessing[j];
                        }
                        if (message.errorCode != null && message.hasOwnProperty("errorCode"))
                            object.errorCode = options.enums === String ? $root.enfonica.voice.v1beta1.Recording.ErrorCode[message.errorCode] : message.errorCode;
                        if (message.audio && message.audio.length) {
                            object.audio = [];
                            for (var j = 0; j < message.audio.length; ++j)
                                object.audio[j] = $root.enfonica.voice.v1beta1.RecordingAudio.toObject(message.audio[j], options);
                        }
                        if (message.startTime != null && message.hasOwnProperty("startTime"))
                            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.readyUri != null && message.hasOwnProperty("readyUri"))
                            object.readyUri = message.readyUri;
                        return object;
                    };
    
                    /**
                     * Converts this Recording to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.Recording
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Recording.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Source enum.
                     * @name enfonica.voice.v1beta1.Recording.Source
                     * @enum {number}
                     * @property {number} SOURCE_UNSPECIFIED=0 SOURCE_UNSPECIFIED value
                     * @property {number} RECORD_ACTION=1 RECORD_ACTION value
                     * @property {number} CALL_RECORDING=2 CALL_RECORDING value
                     */
                    Recording.Source = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "SOURCE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "RECORD_ACTION"] = 1;
                        values[valuesById[2] = "CALL_RECORDING"] = 2;
                        return values;
                    })();
    
                    /**
                     * State enum.
                     * @name enfonica.voice.v1beta1.Recording.State
                     * @enum {number}
                     * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                     * @property {number} PENDING=1 PENDING value
                     * @property {number} SUCCEEDED=2 SUCCEEDED value
                     * @property {number} EMPTY=3 EMPTY value
                     * @property {number} FAILED=4 FAILED value
                     */
                    Recording.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PENDING"] = 1;
                        values[valuesById[2] = "SUCCEEDED"] = 2;
                        values[valuesById[3] = "EMPTY"] = 3;
                        values[valuesById[4] = "FAILED"] = 4;
                        return values;
                    })();
    
                    /**
                     * ErrorCode enum.
                     * @name enfonica.voice.v1beta1.Recording.ErrorCode
                     * @enum {number}
                     * @property {number} ERROR_CODE_UNSPECIFIED=0 ERROR_CODE_UNSPECIFIED value
                     * @property {number} TIMEOUT=1 TIMEOUT value
                     * @property {number} INTERNAL_ERROR=2 INTERNAL_ERROR value
                     */
                    Recording.ErrorCode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ERROR_CODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "TIMEOUT"] = 1;
                        values[valuesById[2] = "INTERNAL_ERROR"] = 2;
                        return values;
                    })();
    
                    return Recording;
                })();
    
                v1beta1.RecordingAudio = (function() {
    
                    /**
                     * Properties of a RecordingAudio.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IRecordingAudio
                     * @property {string|null} [mimeType] RecordingAudio mimeType
                     * @property {enfonica.voice.v1beta1.RecordingAudio.AudioEncoding|null} [encoding] RecordingAudio encoding
                     * @property {number|null} [sampleRate] RecordingAudio sampleRate
                     * @property {number|null} [sizeBytes] RecordingAudio sizeBytes
                     * @property {string|null} [uri] RecordingAudio uri
                     */
    
                    /**
                     * Constructs a new RecordingAudio.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a RecordingAudio.
                     * @implements IRecordingAudio
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IRecordingAudio=} [properties] Properties to set
                     */
                    function RecordingAudio(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RecordingAudio mimeType.
                     * @member {string} mimeType
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @instance
                     */
                    RecordingAudio.prototype.mimeType = "";
    
                    /**
                     * RecordingAudio encoding.
                     * @member {enfonica.voice.v1beta1.RecordingAudio.AudioEncoding} encoding
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @instance
                     */
                    RecordingAudio.prototype.encoding = 0;
    
                    /**
                     * RecordingAudio sampleRate.
                     * @member {number} sampleRate
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @instance
                     */
                    RecordingAudio.prototype.sampleRate = 0;
    
                    /**
                     * RecordingAudio sizeBytes.
                     * @member {number} sizeBytes
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @instance
                     */
                    RecordingAudio.prototype.sizeBytes = 0;
    
                    /**
                     * RecordingAudio uri.
                     * @member {string} uri
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @instance
                     */
                    RecordingAudio.prototype.uri = "";
    
                    /**
                     * Creates a new RecordingAudio instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.IRecordingAudio=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.RecordingAudio} RecordingAudio instance
                     */
                    RecordingAudio.create = function create(properties) {
                        return new RecordingAudio(properties);
                    };
    
                    /**
                     * Encodes the specified RecordingAudio message. Does not implicitly {@link enfonica.voice.v1beta1.RecordingAudio.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.IRecordingAudio} message RecordingAudio message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RecordingAudio.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.mimeType);
                        if (message.encoding != null && Object.hasOwnProperty.call(message, "encoding"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encoding);
                        if (message.sampleRate != null && Object.hasOwnProperty.call(message, "sampleRate"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sampleRate);
                        if (message.sizeBytes != null && Object.hasOwnProperty.call(message, "sizeBytes"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sizeBytes);
                        if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.uri);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RecordingAudio message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.RecordingAudio.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.IRecordingAudio} message RecordingAudio message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RecordingAudio.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RecordingAudio message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.RecordingAudio} RecordingAudio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RecordingAudio.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.RecordingAudio();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.mimeType = reader.string();
                                break;
                            case 2:
                                message.encoding = reader.int32();
                                break;
                            case 3:
                                message.sampleRate = reader.int32();
                                break;
                            case 4:
                                message.sizeBytes = reader.int32();
                                break;
                            case 5:
                                message.uri = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RecordingAudio message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.RecordingAudio} RecordingAudio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RecordingAudio.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RecordingAudio message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RecordingAudio.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                            if (!$util.isString(message.mimeType))
                                return "mimeType: string expected";
                        if (message.encoding != null && message.hasOwnProperty("encoding"))
                            switch (message.encoding) {
                            default:
                                return "encoding: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.sampleRate != null && message.hasOwnProperty("sampleRate"))
                            if (!$util.isInteger(message.sampleRate))
                                return "sampleRate: integer expected";
                        if (message.sizeBytes != null && message.hasOwnProperty("sizeBytes"))
                            if (!$util.isInteger(message.sizeBytes))
                                return "sizeBytes: integer expected";
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            if (!$util.isString(message.uri))
                                return "uri: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a RecordingAudio message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.RecordingAudio} RecordingAudio
                     */
                    RecordingAudio.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.RecordingAudio)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.RecordingAudio();
                        if (object.mimeType != null)
                            message.mimeType = String(object.mimeType);
                        switch (object.encoding) {
                        case "AUDIO_ENCODING_UNSPECIFIED":
                        case 0:
                            message.encoding = 0;
                            break;
                        case "AUDIO_ENCODING_PCM_16BIT":
                        case 1:
                            message.encoding = 1;
                            break;
                        case "AUDIO_ENCODING_MP3":
                        case 2:
                            message.encoding = 2;
                            break;
                        }
                        if (object.sampleRate != null)
                            message.sampleRate = object.sampleRate | 0;
                        if (object.sizeBytes != null)
                            message.sizeBytes = object.sizeBytes | 0;
                        if (object.uri != null)
                            message.uri = String(object.uri);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RecordingAudio message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.RecordingAudio} message RecordingAudio
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RecordingAudio.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.mimeType = "";
                            object.encoding = options.enums === String ? "AUDIO_ENCODING_UNSPECIFIED" : 0;
                            object.sampleRate = 0;
                            object.sizeBytes = 0;
                            object.uri = "";
                        }
                        if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                            object.mimeType = message.mimeType;
                        if (message.encoding != null && message.hasOwnProperty("encoding"))
                            object.encoding = options.enums === String ? $root.enfonica.voice.v1beta1.RecordingAudio.AudioEncoding[message.encoding] : message.encoding;
                        if (message.sampleRate != null && message.hasOwnProperty("sampleRate"))
                            object.sampleRate = message.sampleRate;
                        if (message.sizeBytes != null && message.hasOwnProperty("sizeBytes"))
                            object.sizeBytes = message.sizeBytes;
                        if (message.uri != null && message.hasOwnProperty("uri"))
                            object.uri = message.uri;
                        return object;
                    };
    
                    /**
                     * Converts this RecordingAudio to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.RecordingAudio
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RecordingAudio.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * AudioEncoding enum.
                     * @name enfonica.voice.v1beta1.RecordingAudio.AudioEncoding
                     * @enum {number}
                     * @property {number} AUDIO_ENCODING_UNSPECIFIED=0 AUDIO_ENCODING_UNSPECIFIED value
                     * @property {number} AUDIO_ENCODING_PCM_16BIT=1 AUDIO_ENCODING_PCM_16BIT value
                     * @property {number} AUDIO_ENCODING_MP3=2 AUDIO_ENCODING_MP3 value
                     */
                    RecordingAudio.AudioEncoding = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "AUDIO_ENCODING_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "AUDIO_ENCODING_PCM_16BIT"] = 1;
                        values[valuesById[2] = "AUDIO_ENCODING_MP3"] = 2;
                        return values;
                    })();
    
                    return RecordingAudio;
                })();
    
                v1beta1.GetRecordingRequest = (function() {
    
                    /**
                     * Properties of a GetRecordingRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IGetRecordingRequest
                     * @property {string|null} [name] GetRecordingRequest name
                     * @property {enfonica.voice.v1beta1.RecordingView|null} [view] GetRecordingRequest view
                     */
    
                    /**
                     * Constructs a new GetRecordingRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a GetRecordingRequest.
                     * @implements IGetRecordingRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IGetRecordingRequest=} [properties] Properties to set
                     */
                    function GetRecordingRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetRecordingRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @instance
                     */
                    GetRecordingRequest.prototype.name = "";
    
                    /**
                     * GetRecordingRequest view.
                     * @member {enfonica.voice.v1beta1.RecordingView} view
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @instance
                     */
                    GetRecordingRequest.prototype.view = 0;
    
                    /**
                     * Creates a new GetRecordingRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetRecordingRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.GetRecordingRequest} GetRecordingRequest instance
                     */
                    GetRecordingRequest.create = function create(properties) {
                        return new GetRecordingRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetRecordingRequest message. Does not implicitly {@link enfonica.voice.v1beta1.GetRecordingRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetRecordingRequest} message GetRecordingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetRecordingRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.view != null && Object.hasOwnProperty.call(message, "view"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.view);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetRecordingRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.GetRecordingRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetRecordingRequest} message GetRecordingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetRecordingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetRecordingRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.GetRecordingRequest} GetRecordingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetRecordingRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.GetRecordingRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.view = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetRecordingRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.GetRecordingRequest} GetRecordingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetRecordingRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetRecordingRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetRecordingRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.view != null && message.hasOwnProperty("view"))
                            switch (message.view) {
                            default:
                                return "view: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a GetRecordingRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.GetRecordingRequest} GetRecordingRequest
                     */
                    GetRecordingRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.GetRecordingRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.GetRecordingRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.view) {
                        case "RECORDING_VIEW_UNSPECIFIED":
                        case 0:
                            message.view = 0;
                            break;
                        case "BASIC":
                        case 1:
                            message.view = 1;
                            break;
                        case "FULL":
                        case 2:
                            message.view = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetRecordingRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.GetRecordingRequest} message GetRecordingRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetRecordingRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.view = options.enums === String ? "RECORDING_VIEW_UNSPECIFIED" : 0;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.view != null && message.hasOwnProperty("view"))
                            object.view = options.enums === String ? $root.enfonica.voice.v1beta1.RecordingView[message.view] : message.view;
                        return object;
                    };
    
                    /**
                     * Converts this GetRecordingRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.GetRecordingRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetRecordingRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetRecordingRequest;
                })();
    
                v1beta1.ListRecordingsRequest = (function() {
    
                    /**
                     * Properties of a ListRecordingsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListRecordingsRequest
                     * @property {string|null} [parent] ListRecordingsRequest parent
                     * @property {number|null} [pageSize] ListRecordingsRequest pageSize
                     * @property {string|null} [pageToken] ListRecordingsRequest pageToken
                     * @property {enfonica.voice.v1beta1.RecordingView|null} [view] ListRecordingsRequest view
                     */
    
                    /**
                     * Constructs a new ListRecordingsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListRecordingsRequest.
                     * @implements IListRecordingsRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListRecordingsRequest=} [properties] Properties to set
                     */
                    function ListRecordingsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListRecordingsRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @instance
                     */
                    ListRecordingsRequest.prototype.parent = "";
    
                    /**
                     * ListRecordingsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @instance
                     */
                    ListRecordingsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListRecordingsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @instance
                     */
                    ListRecordingsRequest.prototype.pageToken = "";
    
                    /**
                     * ListRecordingsRequest view.
                     * @member {enfonica.voice.v1beta1.RecordingView} view
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @instance
                     */
                    ListRecordingsRequest.prototype.view = 0;
    
                    /**
                     * Creates a new ListRecordingsRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListRecordingsRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListRecordingsRequest} ListRecordingsRequest instance
                     */
                    ListRecordingsRequest.create = function create(properties) {
                        return new ListRecordingsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListRecordingsRequest message. Does not implicitly {@link enfonica.voice.v1beta1.ListRecordingsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListRecordingsRequest} message ListRecordingsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRecordingsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.view != null && Object.hasOwnProperty.call(message, "view"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.view);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListRecordingsRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListRecordingsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListRecordingsRequest} message ListRecordingsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRecordingsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListRecordingsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListRecordingsRequest} ListRecordingsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRecordingsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListRecordingsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            case 4:
                                message.view = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListRecordingsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListRecordingsRequest} ListRecordingsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRecordingsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListRecordingsRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListRecordingsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.view != null && message.hasOwnProperty("view"))
                            switch (message.view) {
                            default:
                                return "view: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a ListRecordingsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListRecordingsRequest} ListRecordingsRequest
                     */
                    ListRecordingsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListRecordingsRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListRecordingsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        switch (object.view) {
                        case "RECORDING_VIEW_UNSPECIFIED":
                        case 0:
                            message.view = 0;
                            break;
                        case "BASIC":
                        case 1:
                            message.view = 1;
                            break;
                        case "FULL":
                        case 2:
                            message.view = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListRecordingsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ListRecordingsRequest} message ListRecordingsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListRecordingsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.view = options.enums === String ? "RECORDING_VIEW_UNSPECIFIED" : 0;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.view != null && message.hasOwnProperty("view"))
                            object.view = options.enums === String ? $root.enfonica.voice.v1beta1.RecordingView[message.view] : message.view;
                        return object;
                    };
    
                    /**
                     * Converts this ListRecordingsRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListRecordingsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListRecordingsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListRecordingsRequest;
                })();
    
                v1beta1.ListRecordingsResponse = (function() {
    
                    /**
                     * Properties of a ListRecordingsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListRecordingsResponse
                     * @property {Array.<enfonica.voice.v1beta1.IRecording>|null} [recordings] ListRecordingsResponse recordings
                     * @property {string|null} [nextPageToken] ListRecordingsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListRecordingsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListRecordingsResponse.
                     * @implements IListRecordingsResponse
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListRecordingsResponse=} [properties] Properties to set
                     */
                    function ListRecordingsResponse(properties) {
                        this.recordings = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListRecordingsResponse recordings.
                     * @member {Array.<enfonica.voice.v1beta1.IRecording>} recordings
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @instance
                     */
                    ListRecordingsResponse.prototype.recordings = $util.emptyArray;
    
                    /**
                     * ListRecordingsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @instance
                     */
                    ListRecordingsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListRecordingsResponse instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListRecordingsResponse=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListRecordingsResponse} ListRecordingsResponse instance
                     */
                    ListRecordingsResponse.create = function create(properties) {
                        return new ListRecordingsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListRecordingsResponse message. Does not implicitly {@link enfonica.voice.v1beta1.ListRecordingsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListRecordingsResponse} message ListRecordingsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRecordingsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.recordings != null && message.recordings.length)
                            for (var i = 0; i < message.recordings.length; ++i)
                                $root.enfonica.voice.v1beta1.Recording.encode(message.recordings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListRecordingsResponse message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListRecordingsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListRecordingsResponse} message ListRecordingsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListRecordingsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListRecordingsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListRecordingsResponse} ListRecordingsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRecordingsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListRecordingsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.recordings && message.recordings.length))
                                    message.recordings = [];
                                message.recordings.push($root.enfonica.voice.v1beta1.Recording.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListRecordingsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListRecordingsResponse} ListRecordingsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListRecordingsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListRecordingsResponse message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListRecordingsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.recordings != null && message.hasOwnProperty("recordings")) {
                            if (!Array.isArray(message.recordings))
                                return "recordings: array expected";
                            for (var i = 0; i < message.recordings.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.Recording.verify(message.recordings[i]);
                                if (error)
                                    return "recordings." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListRecordingsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListRecordingsResponse} ListRecordingsResponse
                     */
                    ListRecordingsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListRecordingsResponse)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListRecordingsResponse();
                        if (object.recordings) {
                            if (!Array.isArray(object.recordings))
                                throw TypeError(".enfonica.voice.v1beta1.ListRecordingsResponse.recordings: array expected");
                            message.recordings = [];
                            for (var i = 0; i < object.recordings.length; ++i) {
                                if (typeof object.recordings[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.ListRecordingsResponse.recordings: object expected");
                                message.recordings[i] = $root.enfonica.voice.v1beta1.Recording.fromObject(object.recordings[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListRecordingsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.ListRecordingsResponse} message ListRecordingsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListRecordingsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.recordings = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.recordings && message.recordings.length) {
                            object.recordings = [];
                            for (var j = 0; j < message.recordings.length; ++j)
                                object.recordings[j] = $root.enfonica.voice.v1beta1.Recording.toObject(message.recordings[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListRecordingsResponse to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListRecordingsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListRecordingsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListRecordingsResponse;
                })();
    
                v1beta1.DeleteRecordingRequest = (function() {
    
                    /**
                     * Properties of a DeleteRecordingRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IDeleteRecordingRequest
                     * @property {string|null} [name] DeleteRecordingRequest name
                     */
    
                    /**
                     * Constructs a new DeleteRecordingRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a DeleteRecordingRequest.
                     * @implements IDeleteRecordingRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IDeleteRecordingRequest=} [properties] Properties to set
                     */
                    function DeleteRecordingRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteRecordingRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @instance
                     */
                    DeleteRecordingRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteRecordingRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteRecordingRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.DeleteRecordingRequest} DeleteRecordingRequest instance
                     */
                    DeleteRecordingRequest.create = function create(properties) {
                        return new DeleteRecordingRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteRecordingRequest message. Does not implicitly {@link enfonica.voice.v1beta1.DeleteRecordingRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteRecordingRequest} message DeleteRecordingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteRecordingRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteRecordingRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.DeleteRecordingRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteRecordingRequest} message DeleteRecordingRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteRecordingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteRecordingRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.DeleteRecordingRequest} DeleteRecordingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteRecordingRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.DeleteRecordingRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteRecordingRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.DeleteRecordingRequest} DeleteRecordingRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteRecordingRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteRecordingRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteRecordingRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteRecordingRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.DeleteRecordingRequest} DeleteRecordingRequest
                     */
                    DeleteRecordingRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.DeleteRecordingRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.DeleteRecordingRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteRecordingRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.DeleteRecordingRequest} message DeleteRecordingRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteRecordingRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteRecordingRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.DeleteRecordingRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteRecordingRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteRecordingRequest;
                })();
    
                /**
                 * RecordingView enum.
                 * @name enfonica.voice.v1beta1.RecordingView
                 * @enum {number}
                 * @property {number} RECORDING_VIEW_UNSPECIFIED=0 RECORDING_VIEW_UNSPECIFIED value
                 * @property {number} BASIC=1 BASIC value
                 * @property {number} FULL=2 FULL value
                 */
                v1beta1.RecordingView = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RECORDING_VIEW_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "BASIC"] = 1;
                    values[valuesById[2] = "FULL"] = 2;
                    return values;
                })();
    
                v1beta1.SipDomains = (function() {
    
                    /**
                     * Constructs a new SipDomains service.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a SipDomains
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function SipDomains(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (SipDomains.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = SipDomains;
    
                    /**
                     * Creates new SipDomains service using the specified rpc implementation.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {SipDomains} RPC service. Useful where requests and/or responses are streamed.
                     */
                    SipDomains.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.SipDomains|createSipDomain}.
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @typedef CreateSipDomainCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.SipDomain} [response] SipDomain
                     */
    
                    /**
                     * Calls CreateSipDomain.
                     * @function createSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.ICreateSipDomainRequest} request CreateSipDomainRequest message or plain object
                     * @param {enfonica.voice.v1beta1.SipDomains.CreateSipDomainCallback} callback Node-style callback called with the error, if any, and SipDomain
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(SipDomains.prototype.createSipDomain = function createSipDomain(request, callback) {
                        return this.rpcCall(createSipDomain, $root.enfonica.voice.v1beta1.CreateSipDomainRequest, $root.enfonica.voice.v1beta1.SipDomain, request, callback);
                    }, "name", { value: "CreateSipDomain" });
    
                    /**
                     * Calls CreateSipDomain.
                     * @function createSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.ICreateSipDomainRequest} request CreateSipDomainRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.SipDomain>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.SipDomains|getSipDomain}.
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @typedef GetSipDomainCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.SipDomain} [response] SipDomain
                     */
    
                    /**
                     * Calls GetSipDomain.
                     * @function getSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetSipDomainRequest} request GetSipDomainRequest message or plain object
                     * @param {enfonica.voice.v1beta1.SipDomains.GetSipDomainCallback} callback Node-style callback called with the error, if any, and SipDomain
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(SipDomains.prototype.getSipDomain = function getSipDomain(request, callback) {
                        return this.rpcCall(getSipDomain, $root.enfonica.voice.v1beta1.GetSipDomainRequest, $root.enfonica.voice.v1beta1.SipDomain, request, callback);
                    }, "name", { value: "GetSipDomain" });
    
                    /**
                     * Calls GetSipDomain.
                     * @function getSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetSipDomainRequest} request GetSipDomainRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.SipDomain>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.SipDomains|listSipDomains}.
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @typedef ListSipDomainsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.ListSipDomainsResponse} [response] ListSipDomainsResponse
                     */
    
                    /**
                     * Calls ListSipDomains.
                     * @function listSipDomains
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListSipDomainsRequest} request ListSipDomainsRequest message or plain object
                     * @param {enfonica.voice.v1beta1.SipDomains.ListSipDomainsCallback} callback Node-style callback called with the error, if any, and ListSipDomainsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(SipDomains.prototype.listSipDomains = function listSipDomains(request, callback) {
                        return this.rpcCall(listSipDomains, $root.enfonica.voice.v1beta1.ListSipDomainsRequest, $root.enfonica.voice.v1beta1.ListSipDomainsResponse, request, callback);
                    }, "name", { value: "ListSipDomains" });
    
                    /**
                     * Calls ListSipDomains.
                     * @function listSipDomains
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListSipDomainsRequest} request ListSipDomainsRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.ListSipDomainsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.SipDomains|updateSipDomain}.
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @typedef UpdateSipDomainCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.SipDomain} [response] SipDomain
                     */
    
                    /**
                     * Calls UpdateSipDomain.
                     * @function updateSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IUpdateSipDomainRequest} request UpdateSipDomainRequest message or plain object
                     * @param {enfonica.voice.v1beta1.SipDomains.UpdateSipDomainCallback} callback Node-style callback called with the error, if any, and SipDomain
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(SipDomains.prototype.updateSipDomain = function updateSipDomain(request, callback) {
                        return this.rpcCall(updateSipDomain, $root.enfonica.voice.v1beta1.UpdateSipDomainRequest, $root.enfonica.voice.v1beta1.SipDomain, request, callback);
                    }, "name", { value: "UpdateSipDomain" });
    
                    /**
                     * Calls UpdateSipDomain.
                     * @function updateSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IUpdateSipDomainRequest} request UpdateSipDomainRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.SipDomain>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.SipDomains|deleteSipDomain}.
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @typedef DeleteSipDomainCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.SipDomain} [response] SipDomain
                     */
    
                    /**
                     * Calls DeleteSipDomain.
                     * @function deleteSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteSipDomainRequest} request DeleteSipDomainRequest message or plain object
                     * @param {enfonica.voice.v1beta1.SipDomains.DeleteSipDomainCallback} callback Node-style callback called with the error, if any, and SipDomain
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(SipDomains.prototype.deleteSipDomain = function deleteSipDomain(request, callback) {
                        return this.rpcCall(deleteSipDomain, $root.enfonica.voice.v1beta1.DeleteSipDomainRequest, $root.enfonica.voice.v1beta1.SipDomain, request, callback);
                    }, "name", { value: "DeleteSipDomain" });
    
                    /**
                     * Calls DeleteSipDomain.
                     * @function deleteSipDomain
                     * @memberof enfonica.voice.v1beta1.SipDomains
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteSipDomainRequest} request DeleteSipDomainRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.SipDomain>} Promise
                     * @variation 2
                     */
    
                    return SipDomains;
                })();
    
                v1beta1.SipDomain = (function() {
    
                    /**
                     * Properties of a SipDomain.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ISipDomain
                     * @property {string|null} [name] SipDomain name
                     * @property {string|null} [sipDomainId] SipDomain sipDomainId
                     * @property {string|null} [displayName] SipDomain displayName
                     * @property {boolean|null} [allowRegister] SipDomain allowRegister
                     * @property {enfonica.voice.v1beta1.SipDomain.TerminationMode|null} [callTerminationMode] SipDomain callTerminationMode
                     * @property {Array.<string>|null} [callTerminationHandlerUris] SipDomain callTerminationHandlerUris
                     * @property {Array.<enfonica.voice.v1beta1.ICidrBlock>|null} [cidrBlocks] SipDomain cidrBlocks
                     * @property {enfonica.voice.v1beta1.ICallRecordingConfig|null} [callRecording] SipDomain callRecording
                     * @property {google.protobuf.ITimestamp|null} [createTime] SipDomain createTime
                     * @property {google.protobuf.ITimestamp|null} [deleteTime] SipDomain deleteTime
                     */
    
                    /**
                     * Constructs a new SipDomain.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a SipDomain.
                     * @implements ISipDomain
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ISipDomain=} [properties] Properties to set
                     */
                    function SipDomain(properties) {
                        this.callTerminationHandlerUris = [];
                        this.cidrBlocks = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SipDomain name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.name = "";
    
                    /**
                     * SipDomain sipDomainId.
                     * @member {string} sipDomainId
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.sipDomainId = "";
    
                    /**
                     * SipDomain displayName.
                     * @member {string} displayName
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.displayName = "";
    
                    /**
                     * SipDomain allowRegister.
                     * @member {boolean} allowRegister
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.allowRegister = false;
    
                    /**
                     * SipDomain callTerminationMode.
                     * @member {enfonica.voice.v1beta1.SipDomain.TerminationMode} callTerminationMode
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.callTerminationMode = 0;
    
                    /**
                     * SipDomain callTerminationHandlerUris.
                     * @member {Array.<string>} callTerminationHandlerUris
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.callTerminationHandlerUris = $util.emptyArray;
    
                    /**
                     * SipDomain cidrBlocks.
                     * @member {Array.<enfonica.voice.v1beta1.ICidrBlock>} cidrBlocks
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.cidrBlocks = $util.emptyArray;
    
                    /**
                     * SipDomain callRecording.
                     * @member {enfonica.voice.v1beta1.ICallRecordingConfig|null|undefined} callRecording
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.callRecording = null;
    
                    /**
                     * SipDomain createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.createTime = null;
    
                    /**
                     * SipDomain deleteTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} deleteTime
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     */
                    SipDomain.prototype.deleteTime = null;
    
                    /**
                     * Creates a new SipDomain instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipDomain=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.SipDomain} SipDomain instance
                     */
                    SipDomain.create = function create(properties) {
                        return new SipDomain(properties);
                    };
    
                    /**
                     * Encodes the specified SipDomain message. Does not implicitly {@link enfonica.voice.v1beta1.SipDomain.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipDomain} message SipDomain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SipDomain.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.sipDomainId != null && Object.hasOwnProperty.call(message, "sipDomainId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sipDomainId);
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.displayName);
                        if (message.allowRegister != null && Object.hasOwnProperty.call(message, "allowRegister"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.allowRegister);
                        if (message.callTerminationMode != null && Object.hasOwnProperty.call(message, "callTerminationMode"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.callTerminationMode);
                        if (message.callTerminationHandlerUris != null && message.callTerminationHandlerUris.length)
                            for (var i = 0; i < message.callTerminationHandlerUris.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.callTerminationHandlerUris[i]);
                        if (message.cidrBlocks != null && message.cidrBlocks.length)
                            for (var i = 0; i < message.cidrBlocks.length; ++i)
                                $root.enfonica.voice.v1beta1.CidrBlock.encode(message.cidrBlocks[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.callRecording != null && Object.hasOwnProperty.call(message, "callRecording"))
                            $root.enfonica.voice.v1beta1.CallRecordingConfig.encode(message.callRecording, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.deleteTime != null && Object.hasOwnProperty.call(message, "deleteTime"))
                            $root.google.protobuf.Timestamp.encode(message.deleteTime, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SipDomain message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.SipDomain.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipDomain} message SipDomain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SipDomain.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SipDomain message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.SipDomain} SipDomain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SipDomain.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.SipDomain();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.sipDomainId = reader.string();
                                break;
                            case 3:
                                message.displayName = reader.string();
                                break;
                            case 4:
                                message.allowRegister = reader.bool();
                                break;
                            case 5:
                                message.callTerminationMode = reader.int32();
                                break;
                            case 6:
                                if (!(message.callTerminationHandlerUris && message.callTerminationHandlerUris.length))
                                    message.callTerminationHandlerUris = [];
                                message.callTerminationHandlerUris.push(reader.string());
                                break;
                            case 8:
                                if (!(message.cidrBlocks && message.cidrBlocks.length))
                                    message.cidrBlocks = [];
                                message.cidrBlocks.push($root.enfonica.voice.v1beta1.CidrBlock.decode(reader, reader.uint32()));
                                break;
                            case 9:
                                message.callRecording = $root.enfonica.voice.v1beta1.CallRecordingConfig.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.deleteTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SipDomain message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.SipDomain} SipDomain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SipDomain.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SipDomain message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SipDomain.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.sipDomainId != null && message.hasOwnProperty("sipDomainId"))
                            if (!$util.isString(message.sipDomainId))
                                return "sipDomainId: string expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.allowRegister != null && message.hasOwnProperty("allowRegister"))
                            if (typeof message.allowRegister !== "boolean")
                                return "allowRegister: boolean expected";
                        if (message.callTerminationMode != null && message.hasOwnProperty("callTerminationMode"))
                            switch (message.callTerminationMode) {
                            default:
                                return "callTerminationMode: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.callTerminationHandlerUris != null && message.hasOwnProperty("callTerminationHandlerUris")) {
                            if (!Array.isArray(message.callTerminationHandlerUris))
                                return "callTerminationHandlerUris: array expected";
                            for (var i = 0; i < message.callTerminationHandlerUris.length; ++i)
                                if (!$util.isString(message.callTerminationHandlerUris[i]))
                                    return "callTerminationHandlerUris: string[] expected";
                        }
                        if (message.cidrBlocks != null && message.hasOwnProperty("cidrBlocks")) {
                            if (!Array.isArray(message.cidrBlocks))
                                return "cidrBlocks: array expected";
                            for (var i = 0; i < message.cidrBlocks.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.CidrBlock.verify(message.cidrBlocks[i]);
                                if (error)
                                    return "cidrBlocks." + error;
                            }
                        }
                        if (message.callRecording != null && message.hasOwnProperty("callRecording")) {
                            var error = $root.enfonica.voice.v1beta1.CallRecordingConfig.verify(message.callRecording);
                            if (error)
                                return "callRecording." + error;
                        }
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.deleteTime);
                            if (error)
                                return "deleteTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SipDomain message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.SipDomain} SipDomain
                     */
                    SipDomain.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.SipDomain)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.SipDomain();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.sipDomainId != null)
                            message.sipDomainId = String(object.sipDomainId);
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.allowRegister != null)
                            message.allowRegister = Boolean(object.allowRegister);
                        switch (object.callTerminationMode) {
                        case "TERMINATION_MODE_UNSPECIFIED":
                        case 0:
                            message.callTerminationMode = 0;
                            break;
                        case "TERMINATION_MODE_DISABLED":
                        case 1:
                            message.callTerminationMode = 1;
                            break;
                        case "PSTN_TRUNK":
                        case 2:
                            message.callTerminationMode = 2;
                            break;
                        case "PROGRAMMABLE":
                        case 3:
                            message.callTerminationMode = 3;
                            break;
                        }
                        if (object.callTerminationHandlerUris) {
                            if (!Array.isArray(object.callTerminationHandlerUris))
                                throw TypeError(".enfonica.voice.v1beta1.SipDomain.callTerminationHandlerUris: array expected");
                            message.callTerminationHandlerUris = [];
                            for (var i = 0; i < object.callTerminationHandlerUris.length; ++i)
                                message.callTerminationHandlerUris[i] = String(object.callTerminationHandlerUris[i]);
                        }
                        if (object.cidrBlocks) {
                            if (!Array.isArray(object.cidrBlocks))
                                throw TypeError(".enfonica.voice.v1beta1.SipDomain.cidrBlocks: array expected");
                            message.cidrBlocks = [];
                            for (var i = 0; i < object.cidrBlocks.length; ++i) {
                                if (typeof object.cidrBlocks[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.SipDomain.cidrBlocks: object expected");
                                message.cidrBlocks[i] = $root.enfonica.voice.v1beta1.CidrBlock.fromObject(object.cidrBlocks[i]);
                            }
                        }
                        if (object.callRecording != null) {
                            if (typeof object.callRecording !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.SipDomain.callRecording: object expected");
                            message.callRecording = $root.enfonica.voice.v1beta1.CallRecordingConfig.fromObject(object.callRecording);
                        }
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.SipDomain.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.deleteTime != null) {
                            if (typeof object.deleteTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.SipDomain.deleteTime: object expected");
                            message.deleteTime = $root.google.protobuf.Timestamp.fromObject(object.deleteTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SipDomain message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @static
                     * @param {enfonica.voice.v1beta1.SipDomain} message SipDomain
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SipDomain.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.callTerminationHandlerUris = [];
                            object.cidrBlocks = [];
                        }
                        if (options.defaults) {
                            object.name = "";
                            object.sipDomainId = "";
                            object.displayName = "";
                            object.allowRegister = false;
                            object.callTerminationMode = options.enums === String ? "TERMINATION_MODE_UNSPECIFIED" : 0;
                            object.callRecording = null;
                            object.createTime = null;
                            object.deleteTime = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.sipDomainId != null && message.hasOwnProperty("sipDomainId"))
                            object.sipDomainId = message.sipDomainId;
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.allowRegister != null && message.hasOwnProperty("allowRegister"))
                            object.allowRegister = message.allowRegister;
                        if (message.callTerminationMode != null && message.hasOwnProperty("callTerminationMode"))
                            object.callTerminationMode = options.enums === String ? $root.enfonica.voice.v1beta1.SipDomain.TerminationMode[message.callTerminationMode] : message.callTerminationMode;
                        if (message.callTerminationHandlerUris && message.callTerminationHandlerUris.length) {
                            object.callTerminationHandlerUris = [];
                            for (var j = 0; j < message.callTerminationHandlerUris.length; ++j)
                                object.callTerminationHandlerUris[j] = message.callTerminationHandlerUris[j];
                        }
                        if (message.cidrBlocks && message.cidrBlocks.length) {
                            object.cidrBlocks = [];
                            for (var j = 0; j < message.cidrBlocks.length; ++j)
                                object.cidrBlocks[j] = $root.enfonica.voice.v1beta1.CidrBlock.toObject(message.cidrBlocks[j], options);
                        }
                        if (message.callRecording != null && message.hasOwnProperty("callRecording"))
                            object.callRecording = $root.enfonica.voice.v1beta1.CallRecordingConfig.toObject(message.callRecording, options);
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.deleteTime != null && message.hasOwnProperty("deleteTime"))
                            object.deleteTime = $root.google.protobuf.Timestamp.toObject(message.deleteTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this SipDomain to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.SipDomain
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SipDomain.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * TerminationMode enum.
                     * @name enfonica.voice.v1beta1.SipDomain.TerminationMode
                     * @enum {number}
                     * @property {number} TERMINATION_MODE_UNSPECIFIED=0 TERMINATION_MODE_UNSPECIFIED value
                     * @property {number} TERMINATION_MODE_DISABLED=1 TERMINATION_MODE_DISABLED value
                     * @property {number} PSTN_TRUNK=2 PSTN_TRUNK value
                     * @property {number} PROGRAMMABLE=3 PROGRAMMABLE value
                     */
                    SipDomain.TerminationMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "TERMINATION_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "TERMINATION_MODE_DISABLED"] = 1;
                        values[valuesById[2] = "PSTN_TRUNK"] = 2;
                        values[valuesById[3] = "PROGRAMMABLE"] = 3;
                        return values;
                    })();
    
                    return SipDomain;
                })();
    
                v1beta1.CidrBlock = (function() {
    
                    /**
                     * Properties of a CidrBlock.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICidrBlock
                     * @property {string|null} [displayName] CidrBlock displayName
                     * @property {string|null} [cidrBlock] CidrBlock cidrBlock
                     */
    
                    /**
                     * Constructs a new CidrBlock.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a CidrBlock.
                     * @implements ICidrBlock
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICidrBlock=} [properties] Properties to set
                     */
                    function CidrBlock(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CidrBlock displayName.
                     * @member {string} displayName
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @instance
                     */
                    CidrBlock.prototype.displayName = "";
    
                    /**
                     * CidrBlock cidrBlock.
                     * @member {string} cidrBlock
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @instance
                     */
                    CidrBlock.prototype.cidrBlock = "";
    
                    /**
                     * Creates a new CidrBlock instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {enfonica.voice.v1beta1.ICidrBlock=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.CidrBlock} CidrBlock instance
                     */
                    CidrBlock.create = function create(properties) {
                        return new CidrBlock(properties);
                    };
    
                    /**
                     * Encodes the specified CidrBlock message. Does not implicitly {@link enfonica.voice.v1beta1.CidrBlock.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {enfonica.voice.v1beta1.ICidrBlock} message CidrBlock message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CidrBlock.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.displayName);
                        if (message.cidrBlock != null && Object.hasOwnProperty.call(message, "cidrBlock"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.cidrBlock);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CidrBlock message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.CidrBlock.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {enfonica.voice.v1beta1.ICidrBlock} message CidrBlock message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CidrBlock.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CidrBlock message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.CidrBlock} CidrBlock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CidrBlock.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.CidrBlock();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.displayName = reader.string();
                                break;
                            case 2:
                                message.cidrBlock = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CidrBlock message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.CidrBlock} CidrBlock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CidrBlock.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CidrBlock message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CidrBlock.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            if (!$util.isString(message.displayName))
                                return "displayName: string expected";
                        if (message.cidrBlock != null && message.hasOwnProperty("cidrBlock"))
                            if (!$util.isString(message.cidrBlock))
                                return "cidrBlock: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CidrBlock message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.CidrBlock} CidrBlock
                     */
                    CidrBlock.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.CidrBlock)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.CidrBlock();
                        if (object.displayName != null)
                            message.displayName = String(object.displayName);
                        if (object.cidrBlock != null)
                            message.cidrBlock = String(object.cidrBlock);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CidrBlock message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @static
                     * @param {enfonica.voice.v1beta1.CidrBlock} message CidrBlock
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CidrBlock.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.displayName = "";
                            object.cidrBlock = "";
                        }
                        if (message.displayName != null && message.hasOwnProperty("displayName"))
                            object.displayName = message.displayName;
                        if (message.cidrBlock != null && message.hasOwnProperty("cidrBlock"))
                            object.cidrBlock = message.cidrBlock;
                        return object;
                    };
    
                    /**
                     * Converts this CidrBlock to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.CidrBlock
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CidrBlock.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CidrBlock;
                })();
    
                v1beta1.CreateSipDomainRequest = (function() {
    
                    /**
                     * Properties of a CreateSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICreateSipDomainRequest
                     * @property {string|null} [parent] CreateSipDomainRequest parent
                     * @property {enfonica.voice.v1beta1.ISipDomain|null} [sipDomain] CreateSipDomainRequest sipDomain
                     * @property {string|null} [sipDomainId] CreateSipDomainRequest sipDomainId
                     */
    
                    /**
                     * Constructs a new CreateSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a CreateSipDomainRequest.
                     * @implements ICreateSipDomainRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICreateSipDomainRequest=} [properties] Properties to set
                     */
                    function CreateSipDomainRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CreateSipDomainRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @instance
                     */
                    CreateSipDomainRequest.prototype.parent = "";
    
                    /**
                     * CreateSipDomainRequest sipDomain.
                     * @member {enfonica.voice.v1beta1.ISipDomain|null|undefined} sipDomain
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @instance
                     */
                    CreateSipDomainRequest.prototype.sipDomain = null;
    
                    /**
                     * CreateSipDomainRequest sipDomainId.
                     * @member {string} sipDomainId
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @instance
                     */
                    CreateSipDomainRequest.prototype.sipDomainId = "";
    
                    /**
                     * Creates a new CreateSipDomainRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateSipDomainRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.CreateSipDomainRequest} CreateSipDomainRequest instance
                     */
                    CreateSipDomainRequest.create = function create(properties) {
                        return new CreateSipDomainRequest(properties);
                    };
    
                    /**
                     * Encodes the specified CreateSipDomainRequest message. Does not implicitly {@link enfonica.voice.v1beta1.CreateSipDomainRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateSipDomainRequest} message CreateSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSipDomainRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.sipDomain != null && Object.hasOwnProperty.call(message, "sipDomain"))
                            $root.enfonica.voice.v1beta1.SipDomain.encode(message.sipDomain, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.sipDomainId != null && Object.hasOwnProperty.call(message, "sipDomainId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sipDomainId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CreateSipDomainRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.CreateSipDomainRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ICreateSipDomainRequest} message CreateSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateSipDomainRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CreateSipDomainRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.CreateSipDomainRequest} CreateSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSipDomainRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.CreateSipDomainRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.sipDomain = $root.enfonica.voice.v1beta1.SipDomain.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.sipDomainId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CreateSipDomainRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.CreateSipDomainRequest} CreateSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateSipDomainRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CreateSipDomainRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateSipDomainRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.sipDomain != null && message.hasOwnProperty("sipDomain")) {
                            var error = $root.enfonica.voice.v1beta1.SipDomain.verify(message.sipDomain);
                            if (error)
                                return "sipDomain." + error;
                        }
                        if (message.sipDomainId != null && message.hasOwnProperty("sipDomainId"))
                            if (!$util.isString(message.sipDomainId))
                                return "sipDomainId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CreateSipDomainRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.CreateSipDomainRequest} CreateSipDomainRequest
                     */
                    CreateSipDomainRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.CreateSipDomainRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.CreateSipDomainRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.sipDomain != null) {
                            if (typeof object.sipDomain !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.CreateSipDomainRequest.sipDomain: object expected");
                            message.sipDomain = $root.enfonica.voice.v1beta1.SipDomain.fromObject(object.sipDomain);
                        }
                        if (object.sipDomainId != null)
                            message.sipDomainId = String(object.sipDomainId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CreateSipDomainRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.CreateSipDomainRequest} message CreateSipDomainRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateSipDomainRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.sipDomain = null;
                            object.sipDomainId = "";
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.sipDomain != null && message.hasOwnProperty("sipDomain"))
                            object.sipDomain = $root.enfonica.voice.v1beta1.SipDomain.toObject(message.sipDomain, options);
                        if (message.sipDomainId != null && message.hasOwnProperty("sipDomainId"))
                            object.sipDomainId = message.sipDomainId;
                        return object;
                    };
    
                    /**
                     * Converts this CreateSipDomainRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.CreateSipDomainRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateSipDomainRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CreateSipDomainRequest;
                })();
    
                v1beta1.GetSipDomainRequest = (function() {
    
                    /**
                     * Properties of a GetSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IGetSipDomainRequest
                     * @property {string|null} [name] GetSipDomainRequest name
                     */
    
                    /**
                     * Constructs a new GetSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a GetSipDomainRequest.
                     * @implements IGetSipDomainRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IGetSipDomainRequest=} [properties] Properties to set
                     */
                    function GetSipDomainRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetSipDomainRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @instance
                     */
                    GetSipDomainRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetSipDomainRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetSipDomainRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.GetSipDomainRequest} GetSipDomainRequest instance
                     */
                    GetSipDomainRequest.create = function create(properties) {
                        return new GetSipDomainRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetSipDomainRequest message. Does not implicitly {@link enfonica.voice.v1beta1.GetSipDomainRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetSipDomainRequest} message GetSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSipDomainRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetSipDomainRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.GetSipDomainRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetSipDomainRequest} message GetSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSipDomainRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetSipDomainRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.GetSipDomainRequest} GetSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSipDomainRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.GetSipDomainRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetSipDomainRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.GetSipDomainRequest} GetSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSipDomainRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetSipDomainRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetSipDomainRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetSipDomainRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.GetSipDomainRequest} GetSipDomainRequest
                     */
                    GetSipDomainRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.GetSipDomainRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.GetSipDomainRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetSipDomainRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.GetSipDomainRequest} message GetSipDomainRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetSipDomainRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetSipDomainRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.GetSipDomainRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetSipDomainRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetSipDomainRequest;
                })();
    
                v1beta1.ListSipDomainsRequest = (function() {
    
                    /**
                     * Properties of a ListSipDomainsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListSipDomainsRequest
                     * @property {string|null} [parent] ListSipDomainsRequest parent
                     * @property {number|null} [pageSize] ListSipDomainsRequest pageSize
                     * @property {string|null} [pageToken] ListSipDomainsRequest pageToken
                     * @property {boolean|null} [showDeleted] ListSipDomainsRequest showDeleted
                     */
    
                    /**
                     * Constructs a new ListSipDomainsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListSipDomainsRequest.
                     * @implements IListSipDomainsRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListSipDomainsRequest=} [properties] Properties to set
                     */
                    function ListSipDomainsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSipDomainsRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @instance
                     */
                    ListSipDomainsRequest.prototype.parent = "";
    
                    /**
                     * ListSipDomainsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @instance
                     */
                    ListSipDomainsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListSipDomainsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @instance
                     */
                    ListSipDomainsRequest.prototype.pageToken = "";
    
                    /**
                     * ListSipDomainsRequest showDeleted.
                     * @member {boolean} showDeleted
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @instance
                     */
                    ListSipDomainsRequest.prototype.showDeleted = false;
    
                    /**
                     * Creates a new ListSipDomainsRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListSipDomainsRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsRequest} ListSipDomainsRequest instance
                     */
                    ListSipDomainsRequest.create = function create(properties) {
                        return new ListSipDomainsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListSipDomainsRequest message. Does not implicitly {@link enfonica.voice.v1beta1.ListSipDomainsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListSipDomainsRequest} message ListSipDomainsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSipDomainsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.showDeleted != null && Object.hasOwnProperty.call(message, "showDeleted"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.showDeleted);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSipDomainsRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListSipDomainsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListSipDomainsRequest} message ListSipDomainsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSipDomainsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSipDomainsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsRequest} ListSipDomainsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSipDomainsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListSipDomainsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            case 4:
                                message.showDeleted = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSipDomainsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsRequest} ListSipDomainsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSipDomainsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSipDomainsRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSipDomainsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.showDeleted != null && message.hasOwnProperty("showDeleted"))
                            if (typeof message.showDeleted !== "boolean")
                                return "showDeleted: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSipDomainsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsRequest} ListSipDomainsRequest
                     */
                    ListSipDomainsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListSipDomainsRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListSipDomainsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        if (object.showDeleted != null)
                            message.showDeleted = Boolean(object.showDeleted);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSipDomainsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ListSipDomainsRequest} message ListSipDomainsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSipDomainsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.showDeleted = false;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.showDeleted != null && message.hasOwnProperty("showDeleted"))
                            object.showDeleted = message.showDeleted;
                        return object;
                    };
    
                    /**
                     * Converts this ListSipDomainsRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSipDomainsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListSipDomainsRequest;
                })();
    
                v1beta1.ListSipDomainsResponse = (function() {
    
                    /**
                     * Properties of a ListSipDomainsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListSipDomainsResponse
                     * @property {Array.<enfonica.voice.v1beta1.ISipDomain>|null} [sipDomains] ListSipDomainsResponse sipDomains
                     * @property {string|null} [nextPageToken] ListSipDomainsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListSipDomainsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListSipDomainsResponse.
                     * @implements IListSipDomainsResponse
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListSipDomainsResponse=} [properties] Properties to set
                     */
                    function ListSipDomainsResponse(properties) {
                        this.sipDomains = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListSipDomainsResponse sipDomains.
                     * @member {Array.<enfonica.voice.v1beta1.ISipDomain>} sipDomains
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @instance
                     */
                    ListSipDomainsResponse.prototype.sipDomains = $util.emptyArray;
    
                    /**
                     * ListSipDomainsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @instance
                     */
                    ListSipDomainsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListSipDomainsResponse instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListSipDomainsResponse=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsResponse} ListSipDomainsResponse instance
                     */
                    ListSipDomainsResponse.create = function create(properties) {
                        return new ListSipDomainsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListSipDomainsResponse message. Does not implicitly {@link enfonica.voice.v1beta1.ListSipDomainsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListSipDomainsResponse} message ListSipDomainsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSipDomainsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sipDomains != null && message.sipDomains.length)
                            for (var i = 0; i < message.sipDomains.length; ++i)
                                $root.enfonica.voice.v1beta1.SipDomain.encode(message.sipDomains[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListSipDomainsResponse message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListSipDomainsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListSipDomainsResponse} message ListSipDomainsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListSipDomainsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListSipDomainsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsResponse} ListSipDomainsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSipDomainsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListSipDomainsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sipDomains && message.sipDomains.length))
                                    message.sipDomains = [];
                                message.sipDomains.push($root.enfonica.voice.v1beta1.SipDomain.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListSipDomainsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsResponse} ListSipDomainsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListSipDomainsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListSipDomainsResponse message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListSipDomainsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sipDomains != null && message.hasOwnProperty("sipDomains")) {
                            if (!Array.isArray(message.sipDomains))
                                return "sipDomains: array expected";
                            for (var i = 0; i < message.sipDomains.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.SipDomain.verify(message.sipDomains[i]);
                                if (error)
                                    return "sipDomains." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListSipDomainsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListSipDomainsResponse} ListSipDomainsResponse
                     */
                    ListSipDomainsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListSipDomainsResponse)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListSipDomainsResponse();
                        if (object.sipDomains) {
                            if (!Array.isArray(object.sipDomains))
                                throw TypeError(".enfonica.voice.v1beta1.ListSipDomainsResponse.sipDomains: array expected");
                            message.sipDomains = [];
                            for (var i = 0; i < object.sipDomains.length; ++i) {
                                if (typeof object.sipDomains[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.ListSipDomainsResponse.sipDomains: object expected");
                                message.sipDomains[i] = $root.enfonica.voice.v1beta1.SipDomain.fromObject(object.sipDomains[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListSipDomainsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.ListSipDomainsResponse} message ListSipDomainsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListSipDomainsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.sipDomains = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.sipDomains && message.sipDomains.length) {
                            object.sipDomains = [];
                            for (var j = 0; j < message.sipDomains.length; ++j)
                                object.sipDomains[j] = $root.enfonica.voice.v1beta1.SipDomain.toObject(message.sipDomains[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListSipDomainsResponse to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListSipDomainsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListSipDomainsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListSipDomainsResponse;
                })();
    
                v1beta1.UpdateSipDomainRequest = (function() {
    
                    /**
                     * Properties of an UpdateSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IUpdateSipDomainRequest
                     * @property {enfonica.voice.v1beta1.ISipDomain|null} [sipDomain] UpdateSipDomainRequest sipDomain
                     * @property {google.protobuf.IFieldMask|null} [updateMask] UpdateSipDomainRequest updateMask
                     */
    
                    /**
                     * Constructs a new UpdateSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an UpdateSipDomainRequest.
                     * @implements IUpdateSipDomainRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IUpdateSipDomainRequest=} [properties] Properties to set
                     */
                    function UpdateSipDomainRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateSipDomainRequest sipDomain.
                     * @member {enfonica.voice.v1beta1.ISipDomain|null|undefined} sipDomain
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @instance
                     */
                    UpdateSipDomainRequest.prototype.sipDomain = null;
    
                    /**
                     * UpdateSipDomainRequest updateMask.
                     * @member {google.protobuf.IFieldMask|null|undefined} updateMask
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @instance
                     */
                    UpdateSipDomainRequest.prototype.updateMask = null;
    
                    /**
                     * Creates a new UpdateSipDomainRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateSipDomainRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.UpdateSipDomainRequest} UpdateSipDomainRequest instance
                     */
                    UpdateSipDomainRequest.create = function create(properties) {
                        return new UpdateSipDomainRequest(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateSipDomainRequest message. Does not implicitly {@link enfonica.voice.v1beta1.UpdateSipDomainRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateSipDomainRequest} message UpdateSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSipDomainRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sipDomain != null && Object.hasOwnProperty.call(message, "sipDomain"))
                            $root.enfonica.voice.v1beta1.SipDomain.encode(message.sipDomain, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMask != null && Object.hasOwnProperty.call(message, "updateMask"))
                            $root.google.protobuf.FieldMask.encode(message.updateMask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateSipDomainRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.UpdateSipDomainRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateSipDomainRequest} message UpdateSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSipDomainRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateSipDomainRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.UpdateSipDomainRequest} UpdateSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSipDomainRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.UpdateSipDomainRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sipDomain = $root.enfonica.voice.v1beta1.SipDomain.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.updateMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateSipDomainRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.UpdateSipDomainRequest} UpdateSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSipDomainRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateSipDomainRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateSipDomainRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sipDomain != null && message.hasOwnProperty("sipDomain")) {
                            var error = $root.enfonica.voice.v1beta1.SipDomain.verify(message.sipDomain);
                            if (error)
                                return "sipDomain." + error;
                        }
                        if (message.updateMask != null && message.hasOwnProperty("updateMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.updateMask);
                            if (error)
                                return "updateMask." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateSipDomainRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.UpdateSipDomainRequest} UpdateSipDomainRequest
                     */
                    UpdateSipDomainRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.UpdateSipDomainRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.UpdateSipDomainRequest();
                        if (object.sipDomain != null) {
                            if (typeof object.sipDomain !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.UpdateSipDomainRequest.sipDomain: object expected");
                            message.sipDomain = $root.enfonica.voice.v1beta1.SipDomain.fromObject(object.sipDomain);
                        }
                        if (object.updateMask != null) {
                            if (typeof object.updateMask !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.UpdateSipDomainRequest.updateMask: object expected");
                            message.updateMask = $root.google.protobuf.FieldMask.fromObject(object.updateMask);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateSipDomainRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.UpdateSipDomainRequest} message UpdateSipDomainRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateSipDomainRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sipDomain = null;
                            object.updateMask = null;
                        }
                        if (message.sipDomain != null && message.hasOwnProperty("sipDomain"))
                            object.sipDomain = $root.enfonica.voice.v1beta1.SipDomain.toObject(message.sipDomain, options);
                        if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                            object.updateMask = $root.google.protobuf.FieldMask.toObject(message.updateMask, options);
                        return object;
                    };
    
                    /**
                     * Converts this UpdateSipDomainRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.UpdateSipDomainRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateSipDomainRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateSipDomainRequest;
                })();
    
                v1beta1.DeleteSipDomainRequest = (function() {
    
                    /**
                     * Properties of a DeleteSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IDeleteSipDomainRequest
                     * @property {string|null} [name] DeleteSipDomainRequest name
                     */
    
                    /**
                     * Constructs a new DeleteSipDomainRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a DeleteSipDomainRequest.
                     * @implements IDeleteSipDomainRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IDeleteSipDomainRequest=} [properties] Properties to set
                     */
                    function DeleteSipDomainRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteSipDomainRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @instance
                     */
                    DeleteSipDomainRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteSipDomainRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteSipDomainRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.DeleteSipDomainRequest} DeleteSipDomainRequest instance
                     */
                    DeleteSipDomainRequest.create = function create(properties) {
                        return new DeleteSipDomainRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteSipDomainRequest message. Does not implicitly {@link enfonica.voice.v1beta1.DeleteSipDomainRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteSipDomainRequest} message DeleteSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSipDomainRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteSipDomainRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.DeleteSipDomainRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteSipDomainRequest} message DeleteSipDomainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteSipDomainRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteSipDomainRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.DeleteSipDomainRequest} DeleteSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSipDomainRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.DeleteSipDomainRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteSipDomainRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.DeleteSipDomainRequest} DeleteSipDomainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteSipDomainRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteSipDomainRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteSipDomainRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteSipDomainRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.DeleteSipDomainRequest} DeleteSipDomainRequest
                     */
                    DeleteSipDomainRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.DeleteSipDomainRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.DeleteSipDomainRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteSipDomainRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.DeleteSipDomainRequest} message DeleteSipDomainRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteSipDomainRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteSipDomainRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.DeleteSipDomainRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteSipDomainRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteSipDomainRequest;
                })();
    
                v1beta1.SipInfoService = (function() {
    
                    /**
                     * Constructs a new SipInfoService service.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a SipInfoService
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function SipInfoService(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (SipInfoService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = SipInfoService;
    
                    /**
                     * Creates new SipInfoService service using the specified rpc implementation.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.SipInfoService
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {SipInfoService} RPC service. Useful where requests and/or responses are streamed.
                     */
                    SipInfoService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.SipInfoService|getSipInfo}.
                     * @memberof enfonica.voice.v1beta1.SipInfoService
                     * @typedef GetSipInfoCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.SipInfo} [response] SipInfo
                     */
    
                    /**
                     * Calls GetSipInfo.
                     * @function getSipInfo
                     * @memberof enfonica.voice.v1beta1.SipInfoService
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetSipInfoRequest} request GetSipInfoRequest message or plain object
                     * @param {enfonica.voice.v1beta1.SipInfoService.GetSipInfoCallback} callback Node-style callback called with the error, if any, and SipInfo
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(SipInfoService.prototype.getSipInfo = function getSipInfo(request, callback) {
                        return this.rpcCall(getSipInfo, $root.enfonica.voice.v1beta1.GetSipInfoRequest, $root.enfonica.voice.v1beta1.SipInfo, request, callback);
                    }, "name", { value: "GetSipInfo" });
    
                    /**
                     * Calls GetSipInfo.
                     * @function getSipInfo
                     * @memberof enfonica.voice.v1beta1.SipInfoService
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetSipInfoRequest} request GetSipInfoRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.SipInfo>} Promise
                     * @variation 2
                     */
    
                    return SipInfoService;
                })();
    
                v1beta1.SipInfo = (function() {
    
                    /**
                     * Properties of a SipInfo.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ISipInfo
                     * @property {string|null} [name] SipInfo name
                     * @property {google.protobuf.ITimestamp|null} [startTime] SipInfo startTime
                     * @property {google.protobuf.ITimestamp|null} [endTime] SipInfo endTime
                     * @property {Array.<enfonica.voice.v1beta1.ISipMessage>|null} [messages] SipInfo messages
                     * @property {string|null} [sipCallId] SipInfo sipCallId
                     * @property {Uint8Array|null} [pcap] SipInfo pcap
                     */
    
                    /**
                     * Constructs a new SipInfo.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a SipInfo.
                     * @implements ISipInfo
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ISipInfo=} [properties] Properties to set
                     */
                    function SipInfo(properties) {
                        this.messages = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SipInfo name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @instance
                     */
                    SipInfo.prototype.name = "";
    
                    /**
                     * SipInfo startTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} startTime
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @instance
                     */
                    SipInfo.prototype.startTime = null;
    
                    /**
                     * SipInfo endTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} endTime
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @instance
                     */
                    SipInfo.prototype.endTime = null;
    
                    /**
                     * SipInfo messages.
                     * @member {Array.<enfonica.voice.v1beta1.ISipMessage>} messages
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @instance
                     */
                    SipInfo.prototype.messages = $util.emptyArray;
    
                    /**
                     * SipInfo sipCallId.
                     * @member {string} sipCallId
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @instance
                     */
                    SipInfo.prototype.sipCallId = "";
    
                    /**
                     * SipInfo pcap.
                     * @member {Uint8Array} pcap
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @instance
                     */
                    SipInfo.prototype.pcap = $util.newBuffer([]);
    
                    /**
                     * Creates a new SipInfo instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipInfo=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.SipInfo} SipInfo instance
                     */
                    SipInfo.create = function create(properties) {
                        return new SipInfo(properties);
                    };
    
                    /**
                     * Encodes the specified SipInfo message. Does not implicitly {@link enfonica.voice.v1beta1.SipInfo.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipInfo} message SipInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SipInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.messages != null && message.messages.length)
                            for (var i = 0; i < message.messages.length; ++i)
                                $root.enfonica.voice.v1beta1.SipMessage.encode(message.messages[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.sipCallId != null && Object.hasOwnProperty.call(message, "sipCallId"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.sipCallId);
                        if (message.pcap != null && Object.hasOwnProperty.call(message, "pcap"))
                            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.pcap);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SipInfo message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.SipInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipInfo} message SipInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SipInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SipInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.SipInfo} SipInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SipInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.SipInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.messages && message.messages.length))
                                    message.messages = [];
                                message.messages.push($root.enfonica.voice.v1beta1.SipMessage.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                message.sipCallId = reader.string();
                                break;
                            case 6:
                                message.pcap = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SipInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.SipInfo} SipInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SipInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SipInfo message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SipInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.startTime != null && message.hasOwnProperty("startTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                            if (error)
                                return "startTime." + error;
                        }
                        if (message.endTime != null && message.hasOwnProperty("endTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                            if (error)
                                return "endTime." + error;
                        }
                        if (message.messages != null && message.hasOwnProperty("messages")) {
                            if (!Array.isArray(message.messages))
                                return "messages: array expected";
                            for (var i = 0; i < message.messages.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.SipMessage.verify(message.messages[i]);
                                if (error)
                                    return "messages." + error;
                            }
                        }
                        if (message.sipCallId != null && message.hasOwnProperty("sipCallId"))
                            if (!$util.isString(message.sipCallId))
                                return "sipCallId: string expected";
                        if (message.pcap != null && message.hasOwnProperty("pcap"))
                            if (!(message.pcap && typeof message.pcap.length === "number" || $util.isString(message.pcap)))
                                return "pcap: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a SipInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.SipInfo} SipInfo
                     */
                    SipInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.SipInfo)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.SipInfo();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.startTime != null) {
                            if (typeof object.startTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.SipInfo.startTime: object expected");
                            message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                        }
                        if (object.endTime != null) {
                            if (typeof object.endTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.SipInfo.endTime: object expected");
                            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                        }
                        if (object.messages) {
                            if (!Array.isArray(object.messages))
                                throw TypeError(".enfonica.voice.v1beta1.SipInfo.messages: array expected");
                            message.messages = [];
                            for (var i = 0; i < object.messages.length; ++i) {
                                if (typeof object.messages[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.SipInfo.messages: object expected");
                                message.messages[i] = $root.enfonica.voice.v1beta1.SipMessage.fromObject(object.messages[i]);
                            }
                        }
                        if (object.sipCallId != null)
                            message.sipCallId = String(object.sipCallId);
                        if (object.pcap != null)
                            if (typeof object.pcap === "string")
                                $util.base64.decode(object.pcap, message.pcap = $util.newBuffer($util.base64.length(object.pcap)), 0);
                            else if (object.pcap.length)
                                message.pcap = object.pcap;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SipInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @static
                     * @param {enfonica.voice.v1beta1.SipInfo} message SipInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SipInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.messages = [];
                        if (options.defaults) {
                            object.name = "";
                            object.startTime = null;
                            object.endTime = null;
                            object.sipCallId = "";
                            if (options.bytes === String)
                                object.pcap = "";
                            else {
                                object.pcap = [];
                                if (options.bytes !== Array)
                                    object.pcap = $util.newBuffer(object.pcap);
                            }
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.startTime != null && message.hasOwnProperty("startTime"))
                            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                        if (message.endTime != null && message.hasOwnProperty("endTime"))
                            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                        if (message.messages && message.messages.length) {
                            object.messages = [];
                            for (var j = 0; j < message.messages.length; ++j)
                                object.messages[j] = $root.enfonica.voice.v1beta1.SipMessage.toObject(message.messages[j], options);
                        }
                        if (message.sipCallId != null && message.hasOwnProperty("sipCallId"))
                            object.sipCallId = message.sipCallId;
                        if (message.pcap != null && message.hasOwnProperty("pcap"))
                            object.pcap = options.bytes === String ? $util.base64.encode(message.pcap, 0, message.pcap.length) : options.bytes === Array ? Array.prototype.slice.call(message.pcap) : message.pcap;
                        return object;
                    };
    
                    /**
                     * Converts this SipInfo to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.SipInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SipInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SipInfo;
                })();
    
                v1beta1.SipMessage = (function() {
    
                    /**
                     * Properties of a SipMessage.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ISipMessage
                     * @property {google.protobuf.IDuration|null} [offsetDuration] SipMessage offsetDuration
                     * @property {string|null} [sourceIp] SipMessage sourceIp
                     * @property {number|null} [sourcePort] SipMessage sourcePort
                     * @property {string|null} [destinationIp] SipMessage destinationIp
                     * @property {number|null} [destinationPort] SipMessage destinationPort
                     * @property {string|null} [method] SipMessage method
                     * @property {string|null} [requestLine] SipMessage requestLine
                     * @property {string|null} [data] SipMessage data
                     */
    
                    /**
                     * Constructs a new SipMessage.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a SipMessage.
                     * @implements ISipMessage
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ISipMessage=} [properties] Properties to set
                     */
                    function SipMessage(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SipMessage offsetDuration.
                     * @member {google.protobuf.IDuration|null|undefined} offsetDuration
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.offsetDuration = null;
    
                    /**
                     * SipMessage sourceIp.
                     * @member {string} sourceIp
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.sourceIp = "";
    
                    /**
                     * SipMessage sourcePort.
                     * @member {number} sourcePort
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.sourcePort = 0;
    
                    /**
                     * SipMessage destinationIp.
                     * @member {string} destinationIp
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.destinationIp = "";
    
                    /**
                     * SipMessage destinationPort.
                     * @member {number} destinationPort
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.destinationPort = 0;
    
                    /**
                     * SipMessage method.
                     * @member {string} method
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.method = "";
    
                    /**
                     * SipMessage requestLine.
                     * @member {string} requestLine
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.requestLine = "";
    
                    /**
                     * SipMessage data.
                     * @member {string} data
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     */
                    SipMessage.prototype.data = "";
    
                    /**
                     * Creates a new SipMessage instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipMessage=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.SipMessage} SipMessage instance
                     */
                    SipMessage.create = function create(properties) {
                        return new SipMessage(properties);
                    };
    
                    /**
                     * Encodes the specified SipMessage message. Does not implicitly {@link enfonica.voice.v1beta1.SipMessage.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipMessage} message SipMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SipMessage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.offsetDuration != null && Object.hasOwnProperty.call(message, "offsetDuration"))
                            $root.google.protobuf.Duration.encode(message.offsetDuration, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.sourceIp != null && Object.hasOwnProperty.call(message, "sourceIp"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceIp);
                        if (message.sourcePort != null && Object.hasOwnProperty.call(message, "sourcePort"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sourcePort);
                        if (message.destinationIp != null && Object.hasOwnProperty.call(message, "destinationIp"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.destinationIp);
                        if (message.destinationPort != null && Object.hasOwnProperty.call(message, "destinationPort"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.destinationPort);
                        if (message.method != null && Object.hasOwnProperty.call(message, "method"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.method);
                        if (message.requestLine != null && Object.hasOwnProperty.call(message, "requestLine"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.requestLine);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.data);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SipMessage message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.SipMessage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {enfonica.voice.v1beta1.ISipMessage} message SipMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SipMessage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SipMessage message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.SipMessage} SipMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SipMessage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.SipMessage();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.offsetDuration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.sourceIp = reader.string();
                                break;
                            case 3:
                                message.sourcePort = reader.int32();
                                break;
                            case 4:
                                message.destinationIp = reader.string();
                                break;
                            case 5:
                                message.destinationPort = reader.int32();
                                break;
                            case 6:
                                message.method = reader.string();
                                break;
                            case 7:
                                message.requestLine = reader.string();
                                break;
                            case 8:
                                message.data = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SipMessage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.SipMessage} SipMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SipMessage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SipMessage message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SipMessage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.offsetDuration != null && message.hasOwnProperty("offsetDuration")) {
                            var error = $root.google.protobuf.Duration.verify(message.offsetDuration);
                            if (error)
                                return "offsetDuration." + error;
                        }
                        if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                            if (!$util.isString(message.sourceIp))
                                return "sourceIp: string expected";
                        if (message.sourcePort != null && message.hasOwnProperty("sourcePort"))
                            if (!$util.isInteger(message.sourcePort))
                                return "sourcePort: integer expected";
                        if (message.destinationIp != null && message.hasOwnProperty("destinationIp"))
                            if (!$util.isString(message.destinationIp))
                                return "destinationIp: string expected";
                        if (message.destinationPort != null && message.hasOwnProperty("destinationPort"))
                            if (!$util.isInteger(message.destinationPort))
                                return "destinationPort: integer expected";
                        if (message.method != null && message.hasOwnProperty("method"))
                            if (!$util.isString(message.method))
                                return "method: string expected";
                        if (message.requestLine != null && message.hasOwnProperty("requestLine"))
                            if (!$util.isString(message.requestLine))
                                return "requestLine: string expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!$util.isString(message.data))
                                return "data: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SipMessage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.SipMessage} SipMessage
                     */
                    SipMessage.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.SipMessage)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.SipMessage();
                        if (object.offsetDuration != null) {
                            if (typeof object.offsetDuration !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.SipMessage.offsetDuration: object expected");
                            message.offsetDuration = $root.google.protobuf.Duration.fromObject(object.offsetDuration);
                        }
                        if (object.sourceIp != null)
                            message.sourceIp = String(object.sourceIp);
                        if (object.sourcePort != null)
                            message.sourcePort = object.sourcePort | 0;
                        if (object.destinationIp != null)
                            message.destinationIp = String(object.destinationIp);
                        if (object.destinationPort != null)
                            message.destinationPort = object.destinationPort | 0;
                        if (object.method != null)
                            message.method = String(object.method);
                        if (object.requestLine != null)
                            message.requestLine = String(object.requestLine);
                        if (object.data != null)
                            message.data = String(object.data);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SipMessage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @static
                     * @param {enfonica.voice.v1beta1.SipMessage} message SipMessage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SipMessage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.offsetDuration = null;
                            object.sourceIp = "";
                            object.sourcePort = 0;
                            object.destinationIp = "";
                            object.destinationPort = 0;
                            object.method = "";
                            object.requestLine = "";
                            object.data = "";
                        }
                        if (message.offsetDuration != null && message.hasOwnProperty("offsetDuration"))
                            object.offsetDuration = $root.google.protobuf.Duration.toObject(message.offsetDuration, options);
                        if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                            object.sourceIp = message.sourceIp;
                        if (message.sourcePort != null && message.hasOwnProperty("sourcePort"))
                            object.sourcePort = message.sourcePort;
                        if (message.destinationIp != null && message.hasOwnProperty("destinationIp"))
                            object.destinationIp = message.destinationIp;
                        if (message.destinationPort != null && message.hasOwnProperty("destinationPort"))
                            object.destinationPort = message.destinationPort;
                        if (message.method != null && message.hasOwnProperty("method"))
                            object.method = message.method;
                        if (message.requestLine != null && message.hasOwnProperty("requestLine"))
                            object.requestLine = message.requestLine;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = message.data;
                        return object;
                    };
    
                    /**
                     * Converts this SipMessage to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.SipMessage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SipMessage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SipMessage;
                })();
    
                v1beta1.GetSipInfoRequest = (function() {
    
                    /**
                     * Properties of a GetSipInfoRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IGetSipInfoRequest
                     * @property {string|null} [name] GetSipInfoRequest name
                     */
    
                    /**
                     * Constructs a new GetSipInfoRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a GetSipInfoRequest.
                     * @implements IGetSipInfoRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IGetSipInfoRequest=} [properties] Properties to set
                     */
                    function GetSipInfoRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetSipInfoRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @instance
                     */
                    GetSipInfoRequest.prototype.name = "";
    
                    /**
                     * Creates a new GetSipInfoRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetSipInfoRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.GetSipInfoRequest} GetSipInfoRequest instance
                     */
                    GetSipInfoRequest.create = function create(properties) {
                        return new GetSipInfoRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetSipInfoRequest message. Does not implicitly {@link enfonica.voice.v1beta1.GetSipInfoRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetSipInfoRequest} message GetSipInfoRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSipInfoRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetSipInfoRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.GetSipInfoRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetSipInfoRequest} message GetSipInfoRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetSipInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetSipInfoRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.GetSipInfoRequest} GetSipInfoRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSipInfoRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.GetSipInfoRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetSipInfoRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.GetSipInfoRequest} GetSipInfoRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetSipInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetSipInfoRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetSipInfoRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetSipInfoRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.GetSipInfoRequest} GetSipInfoRequest
                     */
                    GetSipInfoRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.GetSipInfoRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.GetSipInfoRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetSipInfoRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.GetSipInfoRequest} message GetSipInfoRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetSipInfoRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this GetSipInfoRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.GetSipInfoRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetSipInfoRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetSipInfoRequest;
                })();
    
                v1beta1.Streams = (function() {
    
                    /**
                     * Constructs a new Streams service.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a Streams
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Streams(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Streams.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Streams;
    
                    /**
                     * Creates new Streams service using the specified rpc implementation.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Streams
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Streams} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Streams.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Streams|streamCall}.
                     * @memberof enfonica.voice.v1beta1.Streams
                     * @typedef StreamCallCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.StreamCallResponse} [response] StreamCallResponse
                     */
    
                    /**
                     * Calls StreamCall.
                     * @function streamCall
                     * @memberof enfonica.voice.v1beta1.Streams
                     * @instance
                     * @param {enfonica.voice.v1beta1.IStreamCallRequest} request StreamCallRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Streams.StreamCallCallback} callback Node-style callback called with the error, if any, and StreamCallResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Streams.prototype.streamCall = function streamCall(request, callback) {
                        return this.rpcCall(streamCall, $root.enfonica.voice.v1beta1.StreamCallRequest, $root.enfonica.voice.v1beta1.StreamCallResponse, request, callback);
                    }, "name", { value: "StreamCall" });
    
                    /**
                     * Calls StreamCall.
                     * @function streamCall
                     * @memberof enfonica.voice.v1beta1.Streams
                     * @instance
                     * @param {enfonica.voice.v1beta1.IStreamCallRequest} request StreamCallRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.StreamCallResponse>} Promise
                     * @variation 2
                     */
    
                    return Streams;
                })();
    
                v1beta1.StreamCallRequest = (function() {
    
                    /**
                     * Properties of a StreamCallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IStreamCallRequest
                     * @property {enfonica.voice.v1beta1.IStreamSetup|null} [setup] StreamCallRequest setup
                     * @property {enfonica.voice.v1beta1.IInputAudio|null} [inputAudio] StreamCallRequest inputAudio
                     * @property {enfonica.voice.v1beta1.IUpdateRequestParameters|null} [updateRequestParameters] StreamCallRequest updateRequestParameters
                     */
    
                    /**
                     * Constructs a new StreamCallRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a StreamCallRequest.
                     * @implements IStreamCallRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IStreamCallRequest=} [properties] Properties to set
                     */
                    function StreamCallRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StreamCallRequest setup.
                     * @member {enfonica.voice.v1beta1.IStreamSetup|null|undefined} setup
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @instance
                     */
                    StreamCallRequest.prototype.setup = null;
    
                    /**
                     * StreamCallRequest inputAudio.
                     * @member {enfonica.voice.v1beta1.IInputAudio|null|undefined} inputAudio
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @instance
                     */
                    StreamCallRequest.prototype.inputAudio = null;
    
                    /**
                     * StreamCallRequest updateRequestParameters.
                     * @member {enfonica.voice.v1beta1.IUpdateRequestParameters|null|undefined} updateRequestParameters
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @instance
                     */
                    StreamCallRequest.prototype.updateRequestParameters = null;
    
                    /**
                     * Creates a new StreamCallRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamCallRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.StreamCallRequest} StreamCallRequest instance
                     */
                    StreamCallRequest.create = function create(properties) {
                        return new StreamCallRequest(properties);
                    };
    
                    /**
                     * Encodes the specified StreamCallRequest message. Does not implicitly {@link enfonica.voice.v1beta1.StreamCallRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamCallRequest} message StreamCallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamCallRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.setup != null && Object.hasOwnProperty.call(message, "setup"))
                            $root.enfonica.voice.v1beta1.StreamSetup.encode(message.setup, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.inputAudio != null && Object.hasOwnProperty.call(message, "inputAudio"))
                            $root.enfonica.voice.v1beta1.InputAudio.encode(message.inputAudio, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.updateRequestParameters != null && Object.hasOwnProperty.call(message, "updateRequestParameters"))
                            $root.enfonica.voice.v1beta1.UpdateRequestParameters.encode(message.updateRequestParameters, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StreamCallRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.StreamCallRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamCallRequest} message StreamCallRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamCallRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StreamCallRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.StreamCallRequest} StreamCallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamCallRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.StreamCallRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.setup = $root.enfonica.voice.v1beta1.StreamSetup.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.inputAudio = $root.enfonica.voice.v1beta1.InputAudio.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.updateRequestParameters = $root.enfonica.voice.v1beta1.UpdateRequestParameters.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StreamCallRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.StreamCallRequest} StreamCallRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamCallRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StreamCallRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StreamCallRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.setup != null && message.hasOwnProperty("setup")) {
                            var error = $root.enfonica.voice.v1beta1.StreamSetup.verify(message.setup);
                            if (error)
                                return "setup." + error;
                        }
                        if (message.inputAudio != null && message.hasOwnProperty("inputAudio")) {
                            var error = $root.enfonica.voice.v1beta1.InputAudio.verify(message.inputAudio);
                            if (error)
                                return "inputAudio." + error;
                        }
                        if (message.updateRequestParameters != null && message.hasOwnProperty("updateRequestParameters")) {
                            var error = $root.enfonica.voice.v1beta1.UpdateRequestParameters.verify(message.updateRequestParameters);
                            if (error)
                                return "updateRequestParameters." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a StreamCallRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.StreamCallRequest} StreamCallRequest
                     */
                    StreamCallRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.StreamCallRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.StreamCallRequest();
                        if (object.setup != null) {
                            if (typeof object.setup !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.StreamCallRequest.setup: object expected");
                            message.setup = $root.enfonica.voice.v1beta1.StreamSetup.fromObject(object.setup);
                        }
                        if (object.inputAudio != null) {
                            if (typeof object.inputAudio !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.StreamCallRequest.inputAudio: object expected");
                            message.inputAudio = $root.enfonica.voice.v1beta1.InputAudio.fromObject(object.inputAudio);
                        }
                        if (object.updateRequestParameters != null) {
                            if (typeof object.updateRequestParameters !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.StreamCallRequest.updateRequestParameters: object expected");
                            message.updateRequestParameters = $root.enfonica.voice.v1beta1.UpdateRequestParameters.fromObject(object.updateRequestParameters);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StreamCallRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.StreamCallRequest} message StreamCallRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StreamCallRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.setup = null;
                            object.inputAudio = null;
                            object.updateRequestParameters = null;
                        }
                        if (message.setup != null && message.hasOwnProperty("setup"))
                            object.setup = $root.enfonica.voice.v1beta1.StreamSetup.toObject(message.setup, options);
                        if (message.inputAudio != null && message.hasOwnProperty("inputAudio"))
                            object.inputAudio = $root.enfonica.voice.v1beta1.InputAudio.toObject(message.inputAudio, options);
                        if (message.updateRequestParameters != null && message.hasOwnProperty("updateRequestParameters"))
                            object.updateRequestParameters = $root.enfonica.voice.v1beta1.UpdateRequestParameters.toObject(message.updateRequestParameters, options);
                        return object;
                    };
    
                    /**
                     * Converts this StreamCallRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.StreamCallRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StreamCallRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StreamCallRequest;
                })();
    
                v1beta1.StreamSetup = (function() {
    
                    /**
                     * Properties of a StreamSetup.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IStreamSetup
                     * @property {string|null} [stream] StreamSetup stream
                     * @property {enfonica.voice.v1beta1.IAudioConfig|null} [audioConfig] StreamSetup audioConfig
                     */
    
                    /**
                     * Constructs a new StreamSetup.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a StreamSetup.
                     * @implements IStreamSetup
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IStreamSetup=} [properties] Properties to set
                     */
                    function StreamSetup(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StreamSetup stream.
                     * @member {string} stream
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @instance
                     */
                    StreamSetup.prototype.stream = "";
    
                    /**
                     * StreamSetup audioConfig.
                     * @member {enfonica.voice.v1beta1.IAudioConfig|null|undefined} audioConfig
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @instance
                     */
                    StreamSetup.prototype.audioConfig = null;
    
                    /**
                     * Creates a new StreamSetup instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamSetup=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.StreamSetup} StreamSetup instance
                     */
                    StreamSetup.create = function create(properties) {
                        return new StreamSetup(properties);
                    };
    
                    /**
                     * Encodes the specified StreamSetup message. Does not implicitly {@link enfonica.voice.v1beta1.StreamSetup.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamSetup} message StreamSetup message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamSetup.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.stream != null && Object.hasOwnProperty.call(message, "stream"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.stream);
                        if (message.audioConfig != null && Object.hasOwnProperty.call(message, "audioConfig"))
                            $root.enfonica.voice.v1beta1.AudioConfig.encode(message.audioConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StreamSetup message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.StreamSetup.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamSetup} message StreamSetup message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamSetup.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StreamSetup message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.StreamSetup} StreamSetup
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamSetup.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.StreamSetup();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.stream = reader.string();
                                break;
                            case 2:
                                message.audioConfig = $root.enfonica.voice.v1beta1.AudioConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StreamSetup message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.StreamSetup} StreamSetup
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamSetup.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StreamSetup message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StreamSetup.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.stream != null && message.hasOwnProperty("stream"))
                            if (!$util.isString(message.stream))
                                return "stream: string expected";
                        if (message.audioConfig != null && message.hasOwnProperty("audioConfig")) {
                            var error = $root.enfonica.voice.v1beta1.AudioConfig.verify(message.audioConfig);
                            if (error)
                                return "audioConfig." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a StreamSetup message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.StreamSetup} StreamSetup
                     */
                    StreamSetup.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.StreamSetup)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.StreamSetup();
                        if (object.stream != null)
                            message.stream = String(object.stream);
                        if (object.audioConfig != null) {
                            if (typeof object.audioConfig !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.StreamSetup.audioConfig: object expected");
                            message.audioConfig = $root.enfonica.voice.v1beta1.AudioConfig.fromObject(object.audioConfig);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StreamSetup message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @static
                     * @param {enfonica.voice.v1beta1.StreamSetup} message StreamSetup
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StreamSetup.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.stream = "";
                            object.audioConfig = null;
                        }
                        if (message.stream != null && message.hasOwnProperty("stream"))
                            object.stream = message.stream;
                        if (message.audioConfig != null && message.hasOwnProperty("audioConfig"))
                            object.audioConfig = $root.enfonica.voice.v1beta1.AudioConfig.toObject(message.audioConfig, options);
                        return object;
                    };
    
                    /**
                     * Converts this StreamSetup to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.StreamSetup
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StreamSetup.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StreamSetup;
                })();
    
                v1beta1.UpdateRequestParameters = (function() {
    
                    /**
                     * Properties of an UpdateRequestParameters.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IUpdateRequestParameters
                     * @property {Object.<string,string>|null} [parameters] UpdateRequestParameters parameters
                     */
    
                    /**
                     * Constructs a new UpdateRequestParameters.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an UpdateRequestParameters.
                     * @implements IUpdateRequestParameters
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IUpdateRequestParameters=} [properties] Properties to set
                     */
                    function UpdateRequestParameters(properties) {
                        this.parameters = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateRequestParameters parameters.
                     * @member {Object.<string,string>} parameters
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @instance
                     */
                    UpdateRequestParameters.prototype.parameters = $util.emptyObject;
    
                    /**
                     * Creates a new UpdateRequestParameters instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateRequestParameters=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.UpdateRequestParameters} UpdateRequestParameters instance
                     */
                    UpdateRequestParameters.create = function create(properties) {
                        return new UpdateRequestParameters(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateRequestParameters message. Does not implicitly {@link enfonica.voice.v1beta1.UpdateRequestParameters.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateRequestParameters} message UpdateRequestParameters message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateRequestParameters.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parameters != null && Object.hasOwnProperty.call(message, "parameters"))
                            for (var keys = Object.keys(message.parameters), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.parameters[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateRequestParameters message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.UpdateRequestParameters.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {enfonica.voice.v1beta1.IUpdateRequestParameters} message UpdateRequestParameters message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateRequestParameters.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateRequestParameters message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.UpdateRequestParameters} UpdateRequestParameters
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateRequestParameters.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.UpdateRequestParameters(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (message.parameters === $util.emptyObject)
                                    message.parameters = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.parameters[key] = value;
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateRequestParameters message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.UpdateRequestParameters} UpdateRequestParameters
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateRequestParameters.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateRequestParameters message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateRequestParameters.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parameters != null && message.hasOwnProperty("parameters")) {
                            if (!$util.isObject(message.parameters))
                                return "parameters: object expected";
                            var key = Object.keys(message.parameters);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.parameters[key[i]]))
                                    return "parameters: string{k:string} expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateRequestParameters message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.UpdateRequestParameters} UpdateRequestParameters
                     */
                    UpdateRequestParameters.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.UpdateRequestParameters)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.UpdateRequestParameters();
                        if (object.parameters) {
                            if (typeof object.parameters !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.UpdateRequestParameters.parameters: object expected");
                            message.parameters = {};
                            for (var keys = Object.keys(object.parameters), i = 0; i < keys.length; ++i)
                                message.parameters[keys[i]] = String(object.parameters[keys[i]]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateRequestParameters message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @static
                     * @param {enfonica.voice.v1beta1.UpdateRequestParameters} message UpdateRequestParameters
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateRequestParameters.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.parameters = {};
                        var keys2;
                        if (message.parameters && (keys2 = Object.keys(message.parameters)).length) {
                            object.parameters = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.parameters[keys2[j]] = message.parameters[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this UpdateRequestParameters to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.UpdateRequestParameters
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateRequestParameters.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateRequestParameters;
                })();
    
                v1beta1.StreamCallResponse = (function() {
    
                    /**
                     * Properties of a StreamCallResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IStreamCallResponse
                     * @property {enfonica.voice.v1beta1.ICallConnectedEvent|null} [callConnected] StreamCallResponse callConnected
                     * @property {enfonica.voice.v1beta1.IOutputAudioEvent|null} [outputAudio] StreamCallResponse outputAudio
                     * @property {enfonica.voice.v1beta1.IInputAudioBufferEmptyEvent|null} [inputAudioBufferEmpty] StreamCallResponse inputAudioBufferEmpty
                     */
    
                    /**
                     * Constructs a new StreamCallResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a StreamCallResponse.
                     * @implements IStreamCallResponse
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IStreamCallResponse=} [properties] Properties to set
                     */
                    function StreamCallResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StreamCallResponse callConnected.
                     * @member {enfonica.voice.v1beta1.ICallConnectedEvent|null|undefined} callConnected
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @instance
                     */
                    StreamCallResponse.prototype.callConnected = null;
    
                    /**
                     * StreamCallResponse outputAudio.
                     * @member {enfonica.voice.v1beta1.IOutputAudioEvent|null|undefined} outputAudio
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @instance
                     */
                    StreamCallResponse.prototype.outputAudio = null;
    
                    /**
                     * StreamCallResponse inputAudioBufferEmpty.
                     * @member {enfonica.voice.v1beta1.IInputAudioBufferEmptyEvent|null|undefined} inputAudioBufferEmpty
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @instance
                     */
                    StreamCallResponse.prototype.inputAudioBufferEmpty = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * StreamCallResponse event.
                     * @member {"callConnected"|"outputAudio"|"inputAudioBufferEmpty"|undefined} event
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @instance
                     */
                    Object.defineProperty(StreamCallResponse.prototype, "event", {
                        get: $util.oneOfGetter($oneOfFields = ["callConnected", "outputAudio", "inputAudioBufferEmpty"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new StreamCallResponse instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamCallResponse=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.StreamCallResponse} StreamCallResponse instance
                     */
                    StreamCallResponse.create = function create(properties) {
                        return new StreamCallResponse(properties);
                    };
    
                    /**
                     * Encodes the specified StreamCallResponse message. Does not implicitly {@link enfonica.voice.v1beta1.StreamCallResponse.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamCallResponse} message StreamCallResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamCallResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.callConnected != null && Object.hasOwnProperty.call(message, "callConnected"))
                            $root.enfonica.voice.v1beta1.CallConnectedEvent.encode(message.callConnected, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.outputAudio != null && Object.hasOwnProperty.call(message, "outputAudio"))
                            $root.enfonica.voice.v1beta1.OutputAudioEvent.encode(message.outputAudio, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.inputAudioBufferEmpty != null && Object.hasOwnProperty.call(message, "inputAudioBufferEmpty"))
                            $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent.encode(message.inputAudioBufferEmpty, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StreamCallResponse message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.StreamCallResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IStreamCallResponse} message StreamCallResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StreamCallResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StreamCallResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.StreamCallResponse} StreamCallResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamCallResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.StreamCallResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.callConnected = $root.enfonica.voice.v1beta1.CallConnectedEvent.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.outputAudio = $root.enfonica.voice.v1beta1.OutputAudioEvent.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.inputAudioBufferEmpty = $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StreamCallResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.StreamCallResponse} StreamCallResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StreamCallResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StreamCallResponse message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StreamCallResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.callConnected != null && message.hasOwnProperty("callConnected")) {
                            properties.event = 1;
                            {
                                var error = $root.enfonica.voice.v1beta1.CallConnectedEvent.verify(message.callConnected);
                                if (error)
                                    return "callConnected." + error;
                            }
                        }
                        if (message.outputAudio != null && message.hasOwnProperty("outputAudio")) {
                            if (properties.event === 1)
                                return "event: multiple values";
                            properties.event = 1;
                            {
                                var error = $root.enfonica.voice.v1beta1.OutputAudioEvent.verify(message.outputAudio);
                                if (error)
                                    return "outputAudio." + error;
                            }
                        }
                        if (message.inputAudioBufferEmpty != null && message.hasOwnProperty("inputAudioBufferEmpty")) {
                            if (properties.event === 1)
                                return "event: multiple values";
                            properties.event = 1;
                            {
                                var error = $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent.verify(message.inputAudioBufferEmpty);
                                if (error)
                                    return "inputAudioBufferEmpty." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a StreamCallResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.StreamCallResponse} StreamCallResponse
                     */
                    StreamCallResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.StreamCallResponse)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.StreamCallResponse();
                        if (object.callConnected != null) {
                            if (typeof object.callConnected !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.StreamCallResponse.callConnected: object expected");
                            message.callConnected = $root.enfonica.voice.v1beta1.CallConnectedEvent.fromObject(object.callConnected);
                        }
                        if (object.outputAudio != null) {
                            if (typeof object.outputAudio !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.StreamCallResponse.outputAudio: object expected");
                            message.outputAudio = $root.enfonica.voice.v1beta1.OutputAudioEvent.fromObject(object.outputAudio);
                        }
                        if (object.inputAudioBufferEmpty != null) {
                            if (typeof object.inputAudioBufferEmpty !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.StreamCallResponse.inputAudioBufferEmpty: object expected");
                            message.inputAudioBufferEmpty = $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent.fromObject(object.inputAudioBufferEmpty);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StreamCallResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.StreamCallResponse} message StreamCallResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StreamCallResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.callConnected != null && message.hasOwnProperty("callConnected")) {
                            object.callConnected = $root.enfonica.voice.v1beta1.CallConnectedEvent.toObject(message.callConnected, options);
                            if (options.oneofs)
                                object.event = "callConnected";
                        }
                        if (message.outputAudio != null && message.hasOwnProperty("outputAudio")) {
                            object.outputAudio = $root.enfonica.voice.v1beta1.OutputAudioEvent.toObject(message.outputAudio, options);
                            if (options.oneofs)
                                object.event = "outputAudio";
                        }
                        if (message.inputAudioBufferEmpty != null && message.hasOwnProperty("inputAudioBufferEmpty")) {
                            object.inputAudioBufferEmpty = $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent.toObject(message.inputAudioBufferEmpty, options);
                            if (options.oneofs)
                                object.event = "inputAudioBufferEmpty";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this StreamCallResponse to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.StreamCallResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StreamCallResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StreamCallResponse;
                })();
    
                v1beta1.CallConnectedEvent = (function() {
    
                    /**
                     * Properties of a CallConnectedEvent.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ICallConnectedEvent
                     * @property {string|null} [call] CallConnectedEvent call
                     */
    
                    /**
                     * Constructs a new CallConnectedEvent.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a CallConnectedEvent.
                     * @implements ICallConnectedEvent
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ICallConnectedEvent=} [properties] Properties to set
                     */
                    function CallConnectedEvent(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CallConnectedEvent call.
                     * @member {string} call
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @instance
                     */
                    CallConnectedEvent.prototype.call = "";
    
                    /**
                     * Creates a new CallConnectedEvent instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallConnectedEvent=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.CallConnectedEvent} CallConnectedEvent instance
                     */
                    CallConnectedEvent.create = function create(properties) {
                        return new CallConnectedEvent(properties);
                    };
    
                    /**
                     * Encodes the specified CallConnectedEvent message. Does not implicitly {@link enfonica.voice.v1beta1.CallConnectedEvent.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallConnectedEvent} message CallConnectedEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CallConnectedEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.call != null && Object.hasOwnProperty.call(message, "call"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.call);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CallConnectedEvent message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.CallConnectedEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.ICallConnectedEvent} message CallConnectedEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CallConnectedEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CallConnectedEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.CallConnectedEvent} CallConnectedEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CallConnectedEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.CallConnectedEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.call = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CallConnectedEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.CallConnectedEvent} CallConnectedEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CallConnectedEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CallConnectedEvent message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CallConnectedEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.call != null && message.hasOwnProperty("call"))
                            if (!$util.isString(message.call))
                                return "call: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CallConnectedEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.CallConnectedEvent} CallConnectedEvent
                     */
                    CallConnectedEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.CallConnectedEvent)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.CallConnectedEvent();
                        if (object.call != null)
                            message.call = String(object.call);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CallConnectedEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.CallConnectedEvent} message CallConnectedEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CallConnectedEvent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.call = "";
                        if (message.call != null && message.hasOwnProperty("call"))
                            object.call = message.call;
                        return object;
                    };
    
                    /**
                     * Converts this CallConnectedEvent to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.CallConnectedEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CallConnectedEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CallConnectedEvent;
                })();
    
                v1beta1.OutputAudioEvent = (function() {
    
                    /**
                     * Properties of an OutputAudioEvent.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IOutputAudioEvent
                     * @property {Uint8Array|null} [audio] OutputAudioEvent audio
                     */
    
                    /**
                     * Constructs a new OutputAudioEvent.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an OutputAudioEvent.
                     * @implements IOutputAudioEvent
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IOutputAudioEvent=} [properties] Properties to set
                     */
                    function OutputAudioEvent(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OutputAudioEvent audio.
                     * @member {Uint8Array} audio
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @instance
                     */
                    OutputAudioEvent.prototype.audio = $util.newBuffer([]);
    
                    /**
                     * Creates a new OutputAudioEvent instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.IOutputAudioEvent=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.OutputAudioEvent} OutputAudioEvent instance
                     */
                    OutputAudioEvent.create = function create(properties) {
                        return new OutputAudioEvent(properties);
                    };
    
                    /**
                     * Encodes the specified OutputAudioEvent message. Does not implicitly {@link enfonica.voice.v1beta1.OutputAudioEvent.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.IOutputAudioEvent} message OutputAudioEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OutputAudioEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.audio != null && Object.hasOwnProperty.call(message, "audio"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.audio);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OutputAudioEvent message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.OutputAudioEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.IOutputAudioEvent} message OutputAudioEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OutputAudioEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an OutputAudioEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.OutputAudioEvent} OutputAudioEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OutputAudioEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.OutputAudioEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.audio = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an OutputAudioEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.OutputAudioEvent} OutputAudioEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OutputAudioEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an OutputAudioEvent message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OutputAudioEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.audio != null && message.hasOwnProperty("audio"))
                            if (!(message.audio && typeof message.audio.length === "number" || $util.isString(message.audio)))
                                return "audio: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates an OutputAudioEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.OutputAudioEvent} OutputAudioEvent
                     */
                    OutputAudioEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.OutputAudioEvent)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.OutputAudioEvent();
                        if (object.audio != null)
                            if (typeof object.audio === "string")
                                $util.base64.decode(object.audio, message.audio = $util.newBuffer($util.base64.length(object.audio)), 0);
                            else if (object.audio.length)
                                message.audio = object.audio;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an OutputAudioEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.OutputAudioEvent} message OutputAudioEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OutputAudioEvent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.audio = "";
                            else {
                                object.audio = [];
                                if (options.bytes !== Array)
                                    object.audio = $util.newBuffer(object.audio);
                            }
                        if (message.audio != null && message.hasOwnProperty("audio"))
                            object.audio = options.bytes === String ? $util.base64.encode(message.audio, 0, message.audio.length) : options.bytes === Array ? Array.prototype.slice.call(message.audio) : message.audio;
                        return object;
                    };
    
                    /**
                     * Converts this OutputAudioEvent to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.OutputAudioEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OutputAudioEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OutputAudioEvent;
                })();
    
                v1beta1.InputAudioBufferEmptyEvent = (function() {
    
                    /**
                     * Properties of an InputAudioBufferEmptyEvent.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IInputAudioBufferEmptyEvent
                     */
    
                    /**
                     * Constructs a new InputAudioBufferEmptyEvent.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an InputAudioBufferEmptyEvent.
                     * @implements IInputAudioBufferEmptyEvent
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IInputAudioBufferEmptyEvent=} [properties] Properties to set
                     */
                    function InputAudioBufferEmptyEvent(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new InputAudioBufferEmptyEvent instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.IInputAudioBufferEmptyEvent=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.InputAudioBufferEmptyEvent} InputAudioBufferEmptyEvent instance
                     */
                    InputAudioBufferEmptyEvent.create = function create(properties) {
                        return new InputAudioBufferEmptyEvent(properties);
                    };
    
                    /**
                     * Encodes the specified InputAudioBufferEmptyEvent message. Does not implicitly {@link enfonica.voice.v1beta1.InputAudioBufferEmptyEvent.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.IInputAudioBufferEmptyEvent} message InputAudioBufferEmptyEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InputAudioBufferEmptyEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified InputAudioBufferEmptyEvent message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.InputAudioBufferEmptyEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.IInputAudioBufferEmptyEvent} message InputAudioBufferEmptyEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InputAudioBufferEmptyEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an InputAudioBufferEmptyEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.InputAudioBufferEmptyEvent} InputAudioBufferEmptyEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InputAudioBufferEmptyEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an InputAudioBufferEmptyEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.InputAudioBufferEmptyEvent} InputAudioBufferEmptyEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InputAudioBufferEmptyEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an InputAudioBufferEmptyEvent message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InputAudioBufferEmptyEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates an InputAudioBufferEmptyEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.InputAudioBufferEmptyEvent} InputAudioBufferEmptyEvent
                     */
                    InputAudioBufferEmptyEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent)
                            return object;
                        return new $root.enfonica.voice.v1beta1.InputAudioBufferEmptyEvent();
                    };
    
                    /**
                     * Creates a plain object from an InputAudioBufferEmptyEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @static
                     * @param {enfonica.voice.v1beta1.InputAudioBufferEmptyEvent} message InputAudioBufferEmptyEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InputAudioBufferEmptyEvent.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this InputAudioBufferEmptyEvent to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.InputAudioBufferEmptyEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InputAudioBufferEmptyEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return InputAudioBufferEmptyEvent;
                })();
    
                v1beta1.InputAudio = (function() {
    
                    /**
                     * Properties of an InputAudio.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IInputAudio
                     * @property {enfonica.voice.v1beta1.IAudioConfig|null} [config] InputAudio config
                     * @property {Uint8Array|null} [audio] InputAudio audio
                     * @property {boolean|null} [clear] InputAudio clear
                     */
    
                    /**
                     * Constructs a new InputAudio.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an InputAudio.
                     * @implements IInputAudio
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IInputAudio=} [properties] Properties to set
                     */
                    function InputAudio(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * InputAudio config.
                     * @member {enfonica.voice.v1beta1.IAudioConfig|null|undefined} config
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @instance
                     */
                    InputAudio.prototype.config = null;
    
                    /**
                     * InputAudio audio.
                     * @member {Uint8Array} audio
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @instance
                     */
                    InputAudio.prototype.audio = $util.newBuffer([]);
    
                    /**
                     * InputAudio clear.
                     * @member {boolean} clear
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @instance
                     */
                    InputAudio.prototype.clear = false;
    
                    /**
                     * Creates a new InputAudio instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.IInputAudio=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.InputAudio} InputAudio instance
                     */
                    InputAudio.create = function create(properties) {
                        return new InputAudio(properties);
                    };
    
                    /**
                     * Encodes the specified InputAudio message. Does not implicitly {@link enfonica.voice.v1beta1.InputAudio.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.IInputAudio} message InputAudio message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InputAudio.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.config != null && Object.hasOwnProperty.call(message, "config"))
                            $root.enfonica.voice.v1beta1.AudioConfig.encode(message.config, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.audio != null && Object.hasOwnProperty.call(message, "audio"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.audio);
                        if (message.clear != null && Object.hasOwnProperty.call(message, "clear"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.clear);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified InputAudio message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.InputAudio.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.IInputAudio} message InputAudio message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InputAudio.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an InputAudio message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.InputAudio} InputAudio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InputAudio.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.InputAudio();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.config = $root.enfonica.voice.v1beta1.AudioConfig.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.audio = reader.bytes();
                                break;
                            case 3:
                                message.clear = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an InputAudio message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.InputAudio} InputAudio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InputAudio.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an InputAudio message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InputAudio.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.config != null && message.hasOwnProperty("config")) {
                            var error = $root.enfonica.voice.v1beta1.AudioConfig.verify(message.config);
                            if (error)
                                return "config." + error;
                        }
                        if (message.audio != null && message.hasOwnProperty("audio"))
                            if (!(message.audio && typeof message.audio.length === "number" || $util.isString(message.audio)))
                                return "audio: buffer expected";
                        if (message.clear != null && message.hasOwnProperty("clear"))
                            if (typeof message.clear !== "boolean")
                                return "clear: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates an InputAudio message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.InputAudio} InputAudio
                     */
                    InputAudio.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.InputAudio)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.InputAudio();
                        if (object.config != null) {
                            if (typeof object.config !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.InputAudio.config: object expected");
                            message.config = $root.enfonica.voice.v1beta1.AudioConfig.fromObject(object.config);
                        }
                        if (object.audio != null)
                            if (typeof object.audio === "string")
                                $util.base64.decode(object.audio, message.audio = $util.newBuffer($util.base64.length(object.audio)), 0);
                            else if (object.audio.length)
                                message.audio = object.audio;
                        if (object.clear != null)
                            message.clear = Boolean(object.clear);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an InputAudio message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @static
                     * @param {enfonica.voice.v1beta1.InputAudio} message InputAudio
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InputAudio.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.config = null;
                            if (options.bytes === String)
                                object.audio = "";
                            else {
                                object.audio = [];
                                if (options.bytes !== Array)
                                    object.audio = $util.newBuffer(object.audio);
                            }
                            object.clear = false;
                        }
                        if (message.config != null && message.hasOwnProperty("config"))
                            object.config = $root.enfonica.voice.v1beta1.AudioConfig.toObject(message.config, options);
                        if (message.audio != null && message.hasOwnProperty("audio"))
                            object.audio = options.bytes === String ? $util.base64.encode(message.audio, 0, message.audio.length) : options.bytes === Array ? Array.prototype.slice.call(message.audio) : message.audio;
                        if (message.clear != null && message.hasOwnProperty("clear"))
                            object.clear = message.clear;
                        return object;
                    };
    
                    /**
                     * Converts this InputAudio to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.InputAudio
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InputAudio.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return InputAudio;
                })();
    
                v1beta1.AudioConfig = (function() {
    
                    /**
                     * Properties of an AudioConfig.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IAudioConfig
                     * @property {enfonica.voice.v1beta1.AudioEncoding|null} [audioEncoding] AudioConfig audioEncoding
                     * @property {number|null} [sampleRateHertz] AudioConfig sampleRateHertz
                     */
    
                    /**
                     * Constructs a new AudioConfig.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an AudioConfig.
                     * @implements IAudioConfig
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IAudioConfig=} [properties] Properties to set
                     */
                    function AudioConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AudioConfig audioEncoding.
                     * @member {enfonica.voice.v1beta1.AudioEncoding} audioEncoding
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @instance
                     */
                    AudioConfig.prototype.audioEncoding = 0;
    
                    /**
                     * AudioConfig sampleRateHertz.
                     * @member {number} sampleRateHertz
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @instance
                     */
                    AudioConfig.prototype.sampleRateHertz = 0;
    
                    /**
                     * Creates a new AudioConfig instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.IAudioConfig=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.AudioConfig} AudioConfig instance
                     */
                    AudioConfig.create = function create(properties) {
                        return new AudioConfig(properties);
                    };
    
                    /**
                     * Encodes the specified AudioConfig message. Does not implicitly {@link enfonica.voice.v1beta1.AudioConfig.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.IAudioConfig} message AudioConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AudioConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.audioEncoding != null && Object.hasOwnProperty.call(message, "audioEncoding"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.audioEncoding);
                        if (message.sampleRateHertz != null && Object.hasOwnProperty.call(message, "sampleRateHertz"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sampleRateHertz);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AudioConfig message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.AudioConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.IAudioConfig} message AudioConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AudioConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AudioConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.AudioConfig} AudioConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AudioConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.AudioConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.audioEncoding = reader.int32();
                                break;
                            case 2:
                                message.sampleRateHertz = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AudioConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.AudioConfig} AudioConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AudioConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AudioConfig message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AudioConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.audioEncoding != null && message.hasOwnProperty("audioEncoding"))
                            switch (message.audioEncoding) {
                            default:
                                return "audioEncoding: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.sampleRateHertz != null && message.hasOwnProperty("sampleRateHertz"))
                            if (!$util.isInteger(message.sampleRateHertz))
                                return "sampleRateHertz: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an AudioConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.AudioConfig} AudioConfig
                     */
                    AudioConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.AudioConfig)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.AudioConfig();
                        switch (object.audioEncoding) {
                        case "AUDIO_ENCODING_UNSPECIFIED":
                        case 0:
                            message.audioEncoding = 0;
                            break;
                        case "AUDIO_ENCODING_MULAW":
                        case 1:
                            message.audioEncoding = 1;
                            break;
                        case "AUDIO_ENCODING_ALAW":
                        case 2:
                            message.audioEncoding = 2;
                            break;
                        }
                        if (object.sampleRateHertz != null)
                            message.sampleRateHertz = object.sampleRateHertz | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AudioConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @static
                     * @param {enfonica.voice.v1beta1.AudioConfig} message AudioConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AudioConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.audioEncoding = options.enums === String ? "AUDIO_ENCODING_UNSPECIFIED" : 0;
                            object.sampleRateHertz = 0;
                        }
                        if (message.audioEncoding != null && message.hasOwnProperty("audioEncoding"))
                            object.audioEncoding = options.enums === String ? $root.enfonica.voice.v1beta1.AudioEncoding[message.audioEncoding] : message.audioEncoding;
                        if (message.sampleRateHertz != null && message.hasOwnProperty("sampleRateHertz"))
                            object.sampleRateHertz = message.sampleRateHertz;
                        return object;
                    };
    
                    /**
                     * Converts this AudioConfig to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.AudioConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AudioConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return AudioConfig;
                })();
    
                /**
                 * AudioEncoding enum.
                 * @name enfonica.voice.v1beta1.AudioEncoding
                 * @enum {number}
                 * @property {number} AUDIO_ENCODING_UNSPECIFIED=0 AUDIO_ENCODING_UNSPECIFIED value
                 * @property {number} AUDIO_ENCODING_MULAW=1 AUDIO_ENCODING_MULAW value
                 * @property {number} AUDIO_ENCODING_ALAW=2 AUDIO_ENCODING_ALAW value
                 */
                v1beta1.AudioEncoding = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "AUDIO_ENCODING_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "AUDIO_ENCODING_MULAW"] = 1;
                    values[valuesById[2] = "AUDIO_ENCODING_ALAW"] = 2;
                    return values;
                })();
    
                v1beta1.Transcriptions = (function() {
    
                    /**
                     * Constructs a new Transcriptions service.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a Transcriptions
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Transcriptions(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Transcriptions.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Transcriptions;
    
                    /**
                     * Creates new Transcriptions service using the specified rpc implementation.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Transcriptions} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Transcriptions.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Transcriptions|getTranscription}.
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @typedef GetTranscriptionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.Transcription} [response] Transcription
                     */
    
                    /**
                     * Calls GetTranscription.
                     * @function getTranscription
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetTranscriptionRequest} request GetTranscriptionRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Transcriptions.GetTranscriptionCallback} callback Node-style callback called with the error, if any, and Transcription
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Transcriptions.prototype.getTranscription = function getTranscription(request, callback) {
                        return this.rpcCall(getTranscription, $root.enfonica.voice.v1beta1.GetTranscriptionRequest, $root.enfonica.voice.v1beta1.Transcription, request, callback);
                    }, "name", { value: "GetTranscription" });
    
                    /**
                     * Calls GetTranscription.
                     * @function getTranscription
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @instance
                     * @param {enfonica.voice.v1beta1.IGetTranscriptionRequest} request GetTranscriptionRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.Transcription>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Transcriptions|listTranscriptions}.
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @typedef ListTranscriptionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {enfonica.voice.v1beta1.ListTranscriptionsResponse} [response] ListTranscriptionsResponse
                     */
    
                    /**
                     * Calls ListTranscriptions.
                     * @function listTranscriptions
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsRequest} request ListTranscriptionsRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Transcriptions.ListTranscriptionsCallback} callback Node-style callback called with the error, if any, and ListTranscriptionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Transcriptions.prototype.listTranscriptions = function listTranscriptions(request, callback) {
                        return this.rpcCall(listTranscriptions, $root.enfonica.voice.v1beta1.ListTranscriptionsRequest, $root.enfonica.voice.v1beta1.ListTranscriptionsResponse, request, callback);
                    }, "name", { value: "ListTranscriptions" });
    
                    /**
                     * Calls ListTranscriptions.
                     * @function listTranscriptions
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @instance
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsRequest} request ListTranscriptionsRequest message or plain object
                     * @returns {Promise<enfonica.voice.v1beta1.ListTranscriptionsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link enfonica.voice.v1beta1.Transcriptions|deleteTranscription}.
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @typedef DeleteTranscriptionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls DeleteTranscription.
                     * @function deleteTranscription
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteTranscriptionRequest} request DeleteTranscriptionRequest message or plain object
                     * @param {enfonica.voice.v1beta1.Transcriptions.DeleteTranscriptionCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Transcriptions.prototype.deleteTranscription = function deleteTranscription(request, callback) {
                        return this.rpcCall(deleteTranscription, $root.enfonica.voice.v1beta1.DeleteTranscriptionRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "DeleteTranscription" });
    
                    /**
                     * Calls DeleteTranscription.
                     * @function deleteTranscription
                     * @memberof enfonica.voice.v1beta1.Transcriptions
                     * @instance
                     * @param {enfonica.voice.v1beta1.IDeleteTranscriptionRequest} request DeleteTranscriptionRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    return Transcriptions;
                })();
    
                v1beta1.Transcription = (function() {
    
                    /**
                     * Properties of a Transcription.
                     * @memberof enfonica.voice.v1beta1
                     * @interface ITranscription
                     * @property {string|null} [name] Transcription name
                     * @property {string|null} [recording] Transcription recording
                     * @property {enfonica.voice.v1beta1.Transcription.State|null} [state] Transcription state
                     * @property {google.protobuf.IDuration|null} [duration] Transcription duration
                     * @property {number|null} [channelCount] Transcription channelCount
                     * @property {google.protobuf.ITimestamp|null} [createTime] Transcription createTime
                     * @property {google.protobuf.ITimestamp|null} [updateTime] Transcription updateTime
                     * @property {string|null} [readyUri] Transcription readyUri
                     * @property {Array.<enfonica.voice.v1beta1.IUtterance>|null} [utterances] Transcription utterances
                     */
    
                    /**
                     * Constructs a new Transcription.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a Transcription.
                     * @implements ITranscription
                     * @constructor
                     * @param {enfonica.voice.v1beta1.ITranscription=} [properties] Properties to set
                     */
                    function Transcription(properties) {
                        this.utterances = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Transcription name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.name = "";
    
                    /**
                     * Transcription recording.
                     * @member {string} recording
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.recording = "";
    
                    /**
                     * Transcription state.
                     * @member {enfonica.voice.v1beta1.Transcription.State} state
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.state = 0;
    
                    /**
                     * Transcription duration.
                     * @member {google.protobuf.IDuration|null|undefined} duration
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.duration = null;
    
                    /**
                     * Transcription channelCount.
                     * @member {number} channelCount
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.channelCount = 0;
    
                    /**
                     * Transcription createTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} createTime
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.createTime = null;
    
                    /**
                     * Transcription updateTime.
                     * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.updateTime = null;
    
                    /**
                     * Transcription readyUri.
                     * @member {string} readyUri
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.readyUri = "";
    
                    /**
                     * Transcription utterances.
                     * @member {Array.<enfonica.voice.v1beta1.IUtterance>} utterances
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     */
                    Transcription.prototype.utterances = $util.emptyArray;
    
                    /**
                     * Creates a new Transcription instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {enfonica.voice.v1beta1.ITranscription=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.Transcription} Transcription instance
                     */
                    Transcription.create = function create(properties) {
                        return new Transcription(properties);
                    };
    
                    /**
                     * Encodes the specified Transcription message. Does not implicitly {@link enfonica.voice.v1beta1.Transcription.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {enfonica.voice.v1beta1.ITranscription} message Transcription message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transcription.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.recording != null && Object.hasOwnProperty.call(message, "recording"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.recording);
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                        if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                            $root.google.protobuf.Duration.encode(message.duration, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.channelCount != null && Object.hasOwnProperty.call(message, "channelCount"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.channelCount);
                        if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                            $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                            $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.readyUri != null && Object.hasOwnProperty.call(message, "readyUri"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.readyUri);
                        if (message.utterances != null && message.utterances.length)
                            for (var i = 0; i < message.utterances.length; ++i)
                                $root.enfonica.voice.v1beta1.Utterance.encode(message.utterances[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Transcription message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.Transcription.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {enfonica.voice.v1beta1.ITranscription} message Transcription message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transcription.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Transcription message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.Transcription} Transcription
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transcription.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.Transcription();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.recording = reader.string();
                                break;
                            case 3:
                                message.state = reader.int32();
                                break;
                            case 5:
                                message.duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.channelCount = reader.int32();
                                break;
                            case 11:
                                message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 13:
                                message.readyUri = reader.string();
                                break;
                            case 15:
                                if (!(message.utterances && message.utterances.length))
                                    message.utterances = [];
                                message.utterances.push($root.enfonica.voice.v1beta1.Utterance.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Transcription message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.Transcription} Transcription
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transcription.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Transcription message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Transcription.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.recording != null && message.hasOwnProperty("recording"))
                            if (!$util.isString(message.recording))
                                return "recording: string expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.duration != null && message.hasOwnProperty("duration")) {
                            var error = $root.google.protobuf.Duration.verify(message.duration);
                            if (error)
                                return "duration." + error;
                        }
                        if (message.channelCount != null && message.hasOwnProperty("channelCount"))
                            if (!$util.isInteger(message.channelCount))
                                return "channelCount: integer expected";
                        if (message.createTime != null && message.hasOwnProperty("createTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                            if (error)
                                return "createTime." + error;
                        }
                        if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                            if (error)
                                return "updateTime." + error;
                        }
                        if (message.readyUri != null && message.hasOwnProperty("readyUri"))
                            if (!$util.isString(message.readyUri))
                                return "readyUri: string expected";
                        if (message.utterances != null && message.hasOwnProperty("utterances")) {
                            if (!Array.isArray(message.utterances))
                                return "utterances: array expected";
                            for (var i = 0; i < message.utterances.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.Utterance.verify(message.utterances[i]);
                                if (error)
                                    return "utterances." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Transcription message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.Transcription} Transcription
                     */
                    Transcription.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.Transcription)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.Transcription();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.recording != null)
                            message.recording = String(object.recording);
                        switch (object.state) {
                        case "STATE_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "PENDING":
                        case 1:
                            message.state = 1;
                            break;
                        case "COMPLETED":
                        case 2:
                            message.state = 2;
                            break;
                        case "FAILED":
                        case 3:
                            message.state = 3;
                            break;
                        }
                        if (object.duration != null) {
                            if (typeof object.duration !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Transcription.duration: object expected");
                            message.duration = $root.google.protobuf.Duration.fromObject(object.duration);
                        }
                        if (object.channelCount != null)
                            message.channelCount = object.channelCount | 0;
                        if (object.createTime != null) {
                            if (typeof object.createTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Transcription.createTime: object expected");
                            message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                        }
                        if (object.updateTime != null) {
                            if (typeof object.updateTime !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Transcription.updateTime: object expected");
                            message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                        }
                        if (object.readyUri != null)
                            message.readyUri = String(object.readyUri);
                        if (object.utterances) {
                            if (!Array.isArray(object.utterances))
                                throw TypeError(".enfonica.voice.v1beta1.Transcription.utterances: array expected");
                            message.utterances = [];
                            for (var i = 0; i < object.utterances.length; ++i) {
                                if (typeof object.utterances[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.Transcription.utterances: object expected");
                                message.utterances[i] = $root.enfonica.voice.v1beta1.Utterance.fromObject(object.utterances[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Transcription message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @static
                     * @param {enfonica.voice.v1beta1.Transcription} message Transcription
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Transcription.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.utterances = [];
                        if (options.defaults) {
                            object.name = "";
                            object.recording = "";
                            object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            object.duration = null;
                            object.channelCount = 0;
                            object.createTime = null;
                            object.updateTime = null;
                            object.readyUri = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.recording != null && message.hasOwnProperty("recording"))
                            object.recording = message.recording;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.enfonica.voice.v1beta1.Transcription.State[message.state] : message.state;
                        if (message.duration != null && message.hasOwnProperty("duration"))
                            object.duration = $root.google.protobuf.Duration.toObject(message.duration, options);
                        if (message.channelCount != null && message.hasOwnProperty("channelCount"))
                            object.channelCount = message.channelCount;
                        if (message.createTime != null && message.hasOwnProperty("createTime"))
                            object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                        if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                            object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                        if (message.readyUri != null && message.hasOwnProperty("readyUri"))
                            object.readyUri = message.readyUri;
                        if (message.utterances && message.utterances.length) {
                            object.utterances = [];
                            for (var j = 0; j < message.utterances.length; ++j)
                                object.utterances[j] = $root.enfonica.voice.v1beta1.Utterance.toObject(message.utterances[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Transcription to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.Transcription
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Transcription.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * State enum.
                     * @name enfonica.voice.v1beta1.Transcription.State
                     * @enum {number}
                     * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                     * @property {number} PENDING=1 PENDING value
                     * @property {number} COMPLETED=2 COMPLETED value
                     * @property {number} FAILED=3 FAILED value
                     */
                    Transcription.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "PENDING"] = 1;
                        values[valuesById[2] = "COMPLETED"] = 2;
                        values[valuesById[3] = "FAILED"] = 3;
                        return values;
                    })();
    
                    return Transcription;
                })();
    
                v1beta1.Utterance = (function() {
    
                    /**
                     * Properties of an Utterance.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IUtterance
                     * @property {number|null} [channel] Utterance channel
                     * @property {google.protobuf.IDuration|null} [offset] Utterance offset
                     * @property {google.protobuf.IDuration|null} [duration] Utterance duration
                     * @property {string|null} [text] Utterance text
                     */
    
                    /**
                     * Constructs a new Utterance.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents an Utterance.
                     * @implements IUtterance
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IUtterance=} [properties] Properties to set
                     */
                    function Utterance(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Utterance channel.
                     * @member {number} channel
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @instance
                     */
                    Utterance.prototype.channel = 0;
    
                    /**
                     * Utterance offset.
                     * @member {google.protobuf.IDuration|null|undefined} offset
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @instance
                     */
                    Utterance.prototype.offset = null;
    
                    /**
                     * Utterance duration.
                     * @member {google.protobuf.IDuration|null|undefined} duration
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @instance
                     */
                    Utterance.prototype.duration = null;
    
                    /**
                     * Utterance text.
                     * @member {string} text
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @instance
                     */
                    Utterance.prototype.text = "";
    
                    /**
                     * Creates a new Utterance instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {enfonica.voice.v1beta1.IUtterance=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.Utterance} Utterance instance
                     */
                    Utterance.create = function create(properties) {
                        return new Utterance(properties);
                    };
    
                    /**
                     * Encodes the specified Utterance message. Does not implicitly {@link enfonica.voice.v1beta1.Utterance.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {enfonica.voice.v1beta1.IUtterance} message Utterance message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Utterance.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.channel);
                        if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                            $root.google.protobuf.Duration.encode(message.offset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                            $root.google.protobuf.Duration.encode(message.duration, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.text);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Utterance message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.Utterance.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {enfonica.voice.v1beta1.IUtterance} message Utterance message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Utterance.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Utterance message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.Utterance} Utterance
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Utterance.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.Utterance();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.channel = reader.int32();
                                break;
                            case 2:
                                message.offset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.text = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Utterance message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.Utterance} Utterance
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Utterance.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Utterance message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Utterance.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            if (!$util.isInteger(message.channel))
                                return "channel: integer expected";
                        if (message.offset != null && message.hasOwnProperty("offset")) {
                            var error = $root.google.protobuf.Duration.verify(message.offset);
                            if (error)
                                return "offset." + error;
                        }
                        if (message.duration != null && message.hasOwnProperty("duration")) {
                            var error = $root.google.protobuf.Duration.verify(message.duration);
                            if (error)
                                return "duration." + error;
                        }
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an Utterance message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.Utterance} Utterance
                     */
                    Utterance.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.Utterance)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.Utterance();
                        if (object.channel != null)
                            message.channel = object.channel | 0;
                        if (object.offset != null) {
                            if (typeof object.offset !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Utterance.offset: object expected");
                            message.offset = $root.google.protobuf.Duration.fromObject(object.offset);
                        }
                        if (object.duration != null) {
                            if (typeof object.duration !== "object")
                                throw TypeError(".enfonica.voice.v1beta1.Utterance.duration: object expected");
                            message.duration = $root.google.protobuf.Duration.fromObject(object.duration);
                        }
                        if (object.text != null)
                            message.text = String(object.text);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Utterance message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @static
                     * @param {enfonica.voice.v1beta1.Utterance} message Utterance
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Utterance.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.channel = 0;
                            object.offset = null;
                            object.duration = null;
                            object.text = "";
                        }
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = message.channel;
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            object.offset = $root.google.protobuf.Duration.toObject(message.offset, options);
                        if (message.duration != null && message.hasOwnProperty("duration"))
                            object.duration = $root.google.protobuf.Duration.toObject(message.duration, options);
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        return object;
                    };
    
                    /**
                     * Converts this Utterance to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.Utterance
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Utterance.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Utterance;
                })();
    
                v1beta1.GetTranscriptionRequest = (function() {
    
                    /**
                     * Properties of a GetTranscriptionRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IGetTranscriptionRequest
                     * @property {string|null} [name] GetTranscriptionRequest name
                     * @property {enfonica.voice.v1beta1.TranscriptionView|null} [view] GetTranscriptionRequest view
                     */
    
                    /**
                     * Constructs a new GetTranscriptionRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a GetTranscriptionRequest.
                     * @implements IGetTranscriptionRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IGetTranscriptionRequest=} [properties] Properties to set
                     */
                    function GetTranscriptionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetTranscriptionRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @instance
                     */
                    GetTranscriptionRequest.prototype.name = "";
    
                    /**
                     * GetTranscriptionRequest view.
                     * @member {enfonica.voice.v1beta1.TranscriptionView} view
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @instance
                     */
                    GetTranscriptionRequest.prototype.view = 0;
    
                    /**
                     * Creates a new GetTranscriptionRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetTranscriptionRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.GetTranscriptionRequest} GetTranscriptionRequest instance
                     */
                    GetTranscriptionRequest.create = function create(properties) {
                        return new GetTranscriptionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetTranscriptionRequest message. Does not implicitly {@link enfonica.voice.v1beta1.GetTranscriptionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetTranscriptionRequest} message GetTranscriptionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetTranscriptionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.view != null && Object.hasOwnProperty.call(message, "view"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.view);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetTranscriptionRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.GetTranscriptionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IGetTranscriptionRequest} message GetTranscriptionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetTranscriptionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetTranscriptionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.GetTranscriptionRequest} GetTranscriptionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetTranscriptionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.GetTranscriptionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.view = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetTranscriptionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.GetTranscriptionRequest} GetTranscriptionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetTranscriptionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetTranscriptionRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetTranscriptionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.view != null && message.hasOwnProperty("view"))
                            switch (message.view) {
                            default:
                                return "view: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a GetTranscriptionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.GetTranscriptionRequest} GetTranscriptionRequest
                     */
                    GetTranscriptionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.GetTranscriptionRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.GetTranscriptionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.view) {
                        case "TRANSCRIPTION_VIEW_UNSPECIFIED":
                        case 0:
                            message.view = 0;
                            break;
                        case "TRANSCRIPTION_VIEW_BASIC":
                        case 1:
                            message.view = 1;
                            break;
                        case "TRANSCRIPTION_VIEW_FULL":
                        case 2:
                            message.view = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetTranscriptionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.GetTranscriptionRequest} message GetTranscriptionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetTranscriptionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.view = options.enums === String ? "TRANSCRIPTION_VIEW_UNSPECIFIED" : 0;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.view != null && message.hasOwnProperty("view"))
                            object.view = options.enums === String ? $root.enfonica.voice.v1beta1.TranscriptionView[message.view] : message.view;
                        return object;
                    };
    
                    /**
                     * Converts this GetTranscriptionRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.GetTranscriptionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetTranscriptionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GetTranscriptionRequest;
                })();
    
                v1beta1.ListTranscriptionsRequest = (function() {
    
                    /**
                     * Properties of a ListTranscriptionsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListTranscriptionsRequest
                     * @property {string|null} [parent] ListTranscriptionsRequest parent
                     * @property {number|null} [pageSize] ListTranscriptionsRequest pageSize
                     * @property {string|null} [pageToken] ListTranscriptionsRequest pageToken
                     * @property {enfonica.voice.v1beta1.TranscriptionView|null} [view] ListTranscriptionsRequest view
                     */
    
                    /**
                     * Constructs a new ListTranscriptionsRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListTranscriptionsRequest.
                     * @implements IListTranscriptionsRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsRequest=} [properties] Properties to set
                     */
                    function ListTranscriptionsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListTranscriptionsRequest parent.
                     * @member {string} parent
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @instance
                     */
                    ListTranscriptionsRequest.prototype.parent = "";
    
                    /**
                     * ListTranscriptionsRequest pageSize.
                     * @member {number} pageSize
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @instance
                     */
                    ListTranscriptionsRequest.prototype.pageSize = 0;
    
                    /**
                     * ListTranscriptionsRequest pageToken.
                     * @member {string} pageToken
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @instance
                     */
                    ListTranscriptionsRequest.prototype.pageToken = "";
    
                    /**
                     * ListTranscriptionsRequest view.
                     * @member {enfonica.voice.v1beta1.TranscriptionView} view
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @instance
                     */
                    ListTranscriptionsRequest.prototype.view = 0;
    
                    /**
                     * Creates a new ListTranscriptionsRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsRequest} ListTranscriptionsRequest instance
                     */
                    ListTranscriptionsRequest.create = function create(properties) {
                        return new ListTranscriptionsRequest(properties);
                    };
    
                    /**
                     * Encodes the specified ListTranscriptionsRequest message. Does not implicitly {@link enfonica.voice.v1beta1.ListTranscriptionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsRequest} message ListTranscriptionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTranscriptionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                        if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                        if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                        if (message.view != null && Object.hasOwnProperty.call(message, "view"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.view);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListTranscriptionsRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListTranscriptionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsRequest} message ListTranscriptionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTranscriptionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListTranscriptionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsRequest} ListTranscriptionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTranscriptionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListTranscriptionsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.parent = reader.string();
                                break;
                            case 2:
                                message.pageSize = reader.int32();
                                break;
                            case 3:
                                message.pageToken = reader.string();
                                break;
                            case 4:
                                message.view = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListTranscriptionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsRequest} ListTranscriptionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTranscriptionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListTranscriptionsRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListTranscriptionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            if (!$util.isString(message.parent))
                                return "parent: string expected";
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            if (!$util.isInteger(message.pageSize))
                                return "pageSize: integer expected";
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            if (!$util.isString(message.pageToken))
                                return "pageToken: string expected";
                        if (message.view != null && message.hasOwnProperty("view"))
                            switch (message.view) {
                            default:
                                return "view: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a ListTranscriptionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsRequest} ListTranscriptionsRequest
                     */
                    ListTranscriptionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListTranscriptionsRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListTranscriptionsRequest();
                        if (object.parent != null)
                            message.parent = String(object.parent);
                        if (object.pageSize != null)
                            message.pageSize = object.pageSize | 0;
                        if (object.pageToken != null)
                            message.pageToken = String(object.pageToken);
                        switch (object.view) {
                        case "TRANSCRIPTION_VIEW_UNSPECIFIED":
                        case 0:
                            message.view = 0;
                            break;
                        case "TRANSCRIPTION_VIEW_BASIC":
                        case 1:
                            message.view = 1;
                            break;
                        case "TRANSCRIPTION_VIEW_FULL":
                        case 2:
                            message.view = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListTranscriptionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.ListTranscriptionsRequest} message ListTranscriptionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListTranscriptionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parent = "";
                            object.pageSize = 0;
                            object.pageToken = "";
                            object.view = options.enums === String ? "TRANSCRIPTION_VIEW_UNSPECIFIED" : 0;
                        }
                        if (message.parent != null && message.hasOwnProperty("parent"))
                            object.parent = message.parent;
                        if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                            object.pageSize = message.pageSize;
                        if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                            object.pageToken = message.pageToken;
                        if (message.view != null && message.hasOwnProperty("view"))
                            object.view = options.enums === String ? $root.enfonica.voice.v1beta1.TranscriptionView[message.view] : message.view;
                        return object;
                    };
    
                    /**
                     * Converts this ListTranscriptionsRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListTranscriptionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListTranscriptionsRequest;
                })();
    
                v1beta1.ListTranscriptionsResponse = (function() {
    
                    /**
                     * Properties of a ListTranscriptionsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IListTranscriptionsResponse
                     * @property {Array.<enfonica.voice.v1beta1.ITranscription>|null} [transcriptions] ListTranscriptionsResponse transcriptions
                     * @property {string|null} [nextPageToken] ListTranscriptionsResponse nextPageToken
                     */
    
                    /**
                     * Constructs a new ListTranscriptionsResponse.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a ListTranscriptionsResponse.
                     * @implements IListTranscriptionsResponse
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsResponse=} [properties] Properties to set
                     */
                    function ListTranscriptionsResponse(properties) {
                        this.transcriptions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListTranscriptionsResponse transcriptions.
                     * @member {Array.<enfonica.voice.v1beta1.ITranscription>} transcriptions
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @instance
                     */
                    ListTranscriptionsResponse.prototype.transcriptions = $util.emptyArray;
    
                    /**
                     * ListTranscriptionsResponse nextPageToken.
                     * @member {string} nextPageToken
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @instance
                     */
                    ListTranscriptionsResponse.prototype.nextPageToken = "";
    
                    /**
                     * Creates a new ListTranscriptionsResponse instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsResponse=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsResponse} ListTranscriptionsResponse instance
                     */
                    ListTranscriptionsResponse.create = function create(properties) {
                        return new ListTranscriptionsResponse(properties);
                    };
    
                    /**
                     * Encodes the specified ListTranscriptionsResponse message. Does not implicitly {@link enfonica.voice.v1beta1.ListTranscriptionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsResponse} message ListTranscriptionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTranscriptionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.transcriptions != null && message.transcriptions.length)
                            for (var i = 0; i < message.transcriptions.length; ++i)
                                $root.enfonica.voice.v1beta1.Transcription.encode(message.transcriptions[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListTranscriptionsResponse message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.ListTranscriptionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.IListTranscriptionsResponse} message ListTranscriptionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListTranscriptionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListTranscriptionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsResponse} ListTranscriptionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTranscriptionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.ListTranscriptionsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.transcriptions && message.transcriptions.length))
                                    message.transcriptions = [];
                                message.transcriptions.push($root.enfonica.voice.v1beta1.Transcription.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.nextPageToken = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListTranscriptionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsResponse} ListTranscriptionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListTranscriptionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListTranscriptionsResponse message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListTranscriptionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.transcriptions != null && message.hasOwnProperty("transcriptions")) {
                            if (!Array.isArray(message.transcriptions))
                                return "transcriptions: array expected";
                            for (var i = 0; i < message.transcriptions.length; ++i) {
                                var error = $root.enfonica.voice.v1beta1.Transcription.verify(message.transcriptions[i]);
                                if (error)
                                    return "transcriptions." + error;
                            }
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            if (!$util.isString(message.nextPageToken))
                                return "nextPageToken: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListTranscriptionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.ListTranscriptionsResponse} ListTranscriptionsResponse
                     */
                    ListTranscriptionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.ListTranscriptionsResponse)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.ListTranscriptionsResponse();
                        if (object.transcriptions) {
                            if (!Array.isArray(object.transcriptions))
                                throw TypeError(".enfonica.voice.v1beta1.ListTranscriptionsResponse.transcriptions: array expected");
                            message.transcriptions = [];
                            for (var i = 0; i < object.transcriptions.length; ++i) {
                                if (typeof object.transcriptions[i] !== "object")
                                    throw TypeError(".enfonica.voice.v1beta1.ListTranscriptionsResponse.transcriptions: object expected");
                                message.transcriptions[i] = $root.enfonica.voice.v1beta1.Transcription.fromObject(object.transcriptions[i]);
                            }
                        }
                        if (object.nextPageToken != null)
                            message.nextPageToken = String(object.nextPageToken);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListTranscriptionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @static
                     * @param {enfonica.voice.v1beta1.ListTranscriptionsResponse} message ListTranscriptionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListTranscriptionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.transcriptions = [];
                        if (options.defaults)
                            object.nextPageToken = "";
                        if (message.transcriptions && message.transcriptions.length) {
                            object.transcriptions = [];
                            for (var j = 0; j < message.transcriptions.length; ++j)
                                object.transcriptions[j] = $root.enfonica.voice.v1beta1.Transcription.toObject(message.transcriptions[j], options);
                        }
                        if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                            object.nextPageToken = message.nextPageToken;
                        return object;
                    };
    
                    /**
                     * Converts this ListTranscriptionsResponse to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.ListTranscriptionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListTranscriptionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListTranscriptionsResponse;
                })();
    
                v1beta1.DeleteTranscriptionRequest = (function() {
    
                    /**
                     * Properties of a DeleteTranscriptionRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @interface IDeleteTranscriptionRequest
                     * @property {string|null} [name] DeleteTranscriptionRequest name
                     */
    
                    /**
                     * Constructs a new DeleteTranscriptionRequest.
                     * @memberof enfonica.voice.v1beta1
                     * @classdesc Represents a DeleteTranscriptionRequest.
                     * @implements IDeleteTranscriptionRequest
                     * @constructor
                     * @param {enfonica.voice.v1beta1.IDeleteTranscriptionRequest=} [properties] Properties to set
                     */
                    function DeleteTranscriptionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeleteTranscriptionRequest name.
                     * @member {string} name
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @instance
                     */
                    DeleteTranscriptionRequest.prototype.name = "";
    
                    /**
                     * Creates a new DeleteTranscriptionRequest instance using the specified properties.
                     * @function create
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteTranscriptionRequest=} [properties] Properties to set
                     * @returns {enfonica.voice.v1beta1.DeleteTranscriptionRequest} DeleteTranscriptionRequest instance
                     */
                    DeleteTranscriptionRequest.create = function create(properties) {
                        return new DeleteTranscriptionRequest(properties);
                    };
    
                    /**
                     * Encodes the specified DeleteTranscriptionRequest message. Does not implicitly {@link enfonica.voice.v1beta1.DeleteTranscriptionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteTranscriptionRequest} message DeleteTranscriptionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTranscriptionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeleteTranscriptionRequest message, length delimited. Does not implicitly {@link enfonica.voice.v1beta1.DeleteTranscriptionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.IDeleteTranscriptionRequest} message DeleteTranscriptionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteTranscriptionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeleteTranscriptionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {enfonica.voice.v1beta1.DeleteTranscriptionRequest} DeleteTranscriptionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTranscriptionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.enfonica.voice.v1beta1.DeleteTranscriptionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeleteTranscriptionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {enfonica.voice.v1beta1.DeleteTranscriptionRequest} DeleteTranscriptionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteTranscriptionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeleteTranscriptionRequest message.
                     * @function verify
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteTranscriptionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DeleteTranscriptionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {enfonica.voice.v1beta1.DeleteTranscriptionRequest} DeleteTranscriptionRequest
                     */
                    DeleteTranscriptionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.enfonica.voice.v1beta1.DeleteTranscriptionRequest)
                            return object;
                        var message = new $root.enfonica.voice.v1beta1.DeleteTranscriptionRequest();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeleteTranscriptionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @static
                     * @param {enfonica.voice.v1beta1.DeleteTranscriptionRequest} message DeleteTranscriptionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteTranscriptionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this DeleteTranscriptionRequest to JSON.
                     * @function toJSON
                     * @memberof enfonica.voice.v1beta1.DeleteTranscriptionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteTranscriptionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeleteTranscriptionRequest;
                })();
    
                /**
                 * TranscriptionView enum.
                 * @name enfonica.voice.v1beta1.TranscriptionView
                 * @enum {number}
                 * @property {number} TRANSCRIPTION_VIEW_UNSPECIFIED=0 TRANSCRIPTION_VIEW_UNSPECIFIED value
                 * @property {number} TRANSCRIPTION_VIEW_BASIC=1 TRANSCRIPTION_VIEW_BASIC value
                 * @property {number} TRANSCRIPTION_VIEW_FULL=2 TRANSCRIPTION_VIEW_FULL value
                 */
                v1beta1.TranscriptionView = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TRANSCRIPTION_VIEW_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "TRANSCRIPTION_VIEW_BASIC"] = 1;
                    values[valuesById[2] = "TRANSCRIPTION_VIEW_FULL"] = 2;
                    return values;
                })();
    
                return v1beta1;
            })();
    
            return voice;
        })();
    
        return enfonica;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @implements IFieldMask
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return new FieldMask(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.paths && message.paths.length))
                                message.paths = [];
                            message.paths.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FieldMask;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Empty;
            })();
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.publicDependency && message.publicDependency.length))
                                message.publicDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.publicDependency.push(reader.int32());
                            } else
                                message.publicDependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weakDependency && message.weakDependency.length))
                                message.weakDependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weakDependency.push(reader.int32());
                            } else
                                message.weakDependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.messageType && message.messageType.length))
                                message.messageType = [];
                            message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nestedType && message.nestedType.length))
                                message.nestedType = [];
                            message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extensionRange && message.extensionRange.length))
                                message.extensionRange = [];
                            message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneofDecl && message.oneofDecl.length))
                                message.oneofDecl = [];
                            message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            case 3:
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.typeName = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.defaultValue = reader.string();
                            break;
                        case 9:
                            message.oneofIndex = reader.int32();
                            break;
                        case 10:
                            message.jsonName = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        case 17:
                            message.proto3Optional = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.inputType = reader.string();
                            break;
                        case 3:
                            message.outputType = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.clientStreaming = reader.bool();
                            break;
                        case 6:
                            message.serverStreaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.javaPackage = reader.string();
                            break;
                        case 8:
                            message.javaOuterClassname = reader.string();
                            break;
                        case 10:
                            message.javaMultipleFiles = reader.bool();
                            break;
                        case 20:
                            message.javaGenerateEqualsAndHash = reader.bool();
                            break;
                        case 27:
                            message.javaStringCheckUtf8 = reader.bool();
                            break;
                        case 9:
                            message.optimizeFor = reader.int32();
                            break;
                        case 11:
                            message.goPackage = reader.string();
                            break;
                        case 16:
                            message.ccGenericServices = reader.bool();
                            break;
                        case 17:
                            message.javaGenericServices = reader.bool();
                            break;
                        case 18:
                            message.pyGenericServices = reader.bool();
                            break;
                        case 42:
                            message.phpGenericServices = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.ccEnableArenas = reader.bool();
                            break;
                        case 36:
                            message.objcClassPrefix = reader.string();
                            break;
                        case 37:
                            message.csharpNamespace = reader.string();
                            break;
                        case 39:
                            message.swiftPrefix = reader.string();
                            break;
                        case 40:
                            message.phpClassPrefix = reader.string();
                            break;
                        case 41:
                            message.phpNamespace = reader.string();
                            break;
                        case 44:
                            message.phpMetadataNamespace = reader.string();
                            break;
                        case 45:
                            message.rubyPackage = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                message[".google.api.resourceDefinition"] = [];
                            message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.messageSetWireFormat = reader.bool();
                            break;
                        case 2:
                            message.noStandardDescriptorAccessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.mapEntry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1053:
                            message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 15:
                            message.unverifiedLazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1052:
                            if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                message[".google.api.fieldBehavior"] = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                            } else
                                message[".google.api.fieldBehavior"].push(reader.int32());
                            break;
                        case 1055:
                            message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allowAlias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1049:
                            message[".google.api.defaultHost"] = reader.string();
                            break;
                        case 1050:
                            message[".google.api.oauthScopes"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 34:
                            message.idempotencyLevel = reader.int32();
                            break;
                        case 999:
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 72295728:
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        case 1051:
                            if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                message[".google.api.methodSignature"] = [];
                            message[".google.api.methodSignature"].push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifierValue = reader.string();
                            break;
                        case 4:
                            message.positiveIntValue = reader.uint64();
                            break;
                        case 5:
                            message.negativeIntValue = reader.int64();
                            break;
                        case 6:
                            message.doubleValue = reader.double();
                            break;
                        case 7:
                            message.stringValue = reader.bytes();
                            break;
                        case 8:
                            message.aggregateValue = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.namePart = reader.string();
                                break;
                            case 2:
                                message.isExtension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leadingComments = reader.string();
                                break;
                            case 4:
                                message.trailingComments = reader.string();
                                break;
                            case 6:
                                if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                    message.leadingDetachedComments = [];
                                message.leadingDetachedComments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.sourceFile = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Duration;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            return protobuf;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.fullyDecodeReservedExpansion = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selector = reader.string();
                            break;
                        case 2:
                            message.get = reader.string();
                            break;
                        case 3:
                            message.put = reader.string();
                            break;
                        case 4:
                            message.post = reader.string();
                            break;
                        case 5:
                            message["delete"] = reader.string();
                            break;
                        case 6:
                            message.patch = reader.string();
                            break;
                        case 8:
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.body = reader.string();
                            break;
                        case 12:
                            message.responseBody = reader.string();
                            break;
                        case 11:
                            if (!(message.additionalBindings && message.additionalBindings.length))
                                message.additionalBindings = [];
                            message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.kind = reader.string();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CustomHttpPattern;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            if (!(message.pattern && message.pattern.length))
                                message.pattern = [];
                            message.pattern.push(reader.string());
                            break;
                        case 3:
                            message.nameField = reader.string();
                            break;
                        case 4:
                            message.history = reader.int32();
                            break;
                        case 5:
                            message.plural = reader.string();
                            break;
                        case 6:
                            message.singular = reader.string();
                            break;
                        case 10:
                            if (!(message.style && message.style.length))
                                message.style = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.style.push(reader.int32());
                            } else
                                message.style.push(reader.int32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            message.childType = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResourceReference;
            })();
    
            return api;
        })();
    
        google.type = (function() {
    
            /**
             * Namespace type.
             * @memberof google
             * @namespace
             */
            var type = {};
    
            type.Money = (function() {
    
                /**
                 * Properties of a Money.
                 * @memberof google.type
                 * @interface IMoney
                 * @property {string|null} [currencyCode] Money currencyCode
                 * @property {number|Long|null} [units] Money units
                 * @property {number|null} [nanos] Money nanos
                 */
    
                /**
                 * Constructs a new Money.
                 * @memberof google.type
                 * @classdesc Represents a Money.
                 * @implements IMoney
                 * @constructor
                 * @param {google.type.IMoney=} [properties] Properties to set
                 */
                function Money(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Money currencyCode.
                 * @member {string} currencyCode
                 * @memberof google.type.Money
                 * @instance
                 */
                Money.prototype.currencyCode = "";
    
                /**
                 * Money units.
                 * @member {number|Long} units
                 * @memberof google.type.Money
                 * @instance
                 */
                Money.prototype.units = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Money nanos.
                 * @member {number} nanos
                 * @memberof google.type.Money
                 * @instance
                 */
                Money.prototype.nanos = 0;
    
                /**
                 * Creates a new Money instance using the specified properties.
                 * @function create
                 * @memberof google.type.Money
                 * @static
                 * @param {google.type.IMoney=} [properties] Properties to set
                 * @returns {google.type.Money} Money instance
                 */
                Money.create = function create(properties) {
                    return new Money(properties);
                };
    
                /**
                 * Encodes the specified Money message. Does not implicitly {@link google.type.Money.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.Money
                 * @static
                 * @param {google.type.IMoney} message Money message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Money.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.currencyCode != null && Object.hasOwnProperty.call(message, "currencyCode"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.currencyCode);
                    if (message.units != null && Object.hasOwnProperty.call(message, "units"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.units);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Money message, length delimited. Does not implicitly {@link google.type.Money.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.Money
                 * @static
                 * @param {google.type.IMoney} message Money message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Money.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Money message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.Money
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.Money} Money
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Money.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.Money();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.currencyCode = reader.string();
                            break;
                        case 2:
                            message.units = reader.int64();
                            break;
                        case 3:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Money message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.Money
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.Money} Money
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Money.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Money message.
                 * @function verify
                 * @memberof google.type.Money
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Money.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                        if (!$util.isString(message.currencyCode))
                            return "currencyCode: string expected";
                    if (message.units != null && message.hasOwnProperty("units"))
                        if (!$util.isInteger(message.units) && !(message.units && $util.isInteger(message.units.low) && $util.isInteger(message.units.high)))
                            return "units: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Money message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.Money
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.Money} Money
                 */
                Money.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.Money)
                        return object;
                    var message = new $root.google.type.Money();
                    if (object.currencyCode != null)
                        message.currencyCode = String(object.currencyCode);
                    if (object.units != null)
                        if ($util.Long)
                            (message.units = $util.Long.fromValue(object.units)).unsigned = false;
                        else if (typeof object.units === "string")
                            message.units = parseInt(object.units, 10);
                        else if (typeof object.units === "number")
                            message.units = object.units;
                        else if (typeof object.units === "object")
                            message.units = new $util.LongBits(object.units.low >>> 0, object.units.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Money message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.Money
                 * @static
                 * @param {google.type.Money} message Money
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Money.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.currencyCode = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.units = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.units = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.currencyCode != null && message.hasOwnProperty("currencyCode"))
                        object.currencyCode = message.currencyCode;
                    if (message.units != null && message.hasOwnProperty("units"))
                        if (typeof message.units === "number")
                            object.units = options.longs === String ? String(message.units) : message.units;
                        else
                            object.units = options.longs === String ? $util.Long.prototype.toString.call(message.units) : options.longs === Number ? new $util.LongBits(message.units.low >>> 0, message.units.high >>> 0).toNumber() : message.units;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Money to JSON.
                 * @function toJSON
                 * @memberof google.type.Money
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Money.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Money;
            })();
    
            type.LatLng = (function() {
    
                /**
                 * Properties of a LatLng.
                 * @memberof google.type
                 * @interface ILatLng
                 * @property {number|null} [latitude] LatLng latitude
                 * @property {number|null} [longitude] LatLng longitude
                 */
    
                /**
                 * Constructs a new LatLng.
                 * @memberof google.type
                 * @classdesc Represents a LatLng.
                 * @implements ILatLng
                 * @constructor
                 * @param {google.type.ILatLng=} [properties] Properties to set
                 */
                function LatLng(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LatLng latitude.
                 * @member {number} latitude
                 * @memberof google.type.LatLng
                 * @instance
                 */
                LatLng.prototype.latitude = 0;
    
                /**
                 * LatLng longitude.
                 * @member {number} longitude
                 * @memberof google.type.LatLng
                 * @instance
                 */
                LatLng.prototype.longitude = 0;
    
                /**
                 * Creates a new LatLng instance using the specified properties.
                 * @function create
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.ILatLng=} [properties] Properties to set
                 * @returns {google.type.LatLng} LatLng instance
                 */
                LatLng.create = function create(properties) {
                    return new LatLng(properties);
                };
    
                /**
                 * Encodes the specified LatLng message. Does not implicitly {@link google.type.LatLng.verify|verify} messages.
                 * @function encode
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.ILatLng} message LatLng message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LatLng.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.latitude != null && Object.hasOwnProperty.call(message, "latitude"))
                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.latitude);
                    if (message.longitude != null && Object.hasOwnProperty.call(message, "longitude"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.longitude);
                    return writer;
                };
    
                /**
                 * Encodes the specified LatLng message, length delimited. Does not implicitly {@link google.type.LatLng.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.ILatLng} message LatLng message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LatLng.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LatLng message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.type.LatLng
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.type.LatLng} LatLng
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LatLng.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.type.LatLng();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.latitude = reader.double();
                            break;
                        case 2:
                            message.longitude = reader.double();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LatLng message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.type.LatLng
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.type.LatLng} LatLng
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LatLng.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LatLng message.
                 * @function verify
                 * @memberof google.type.LatLng
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LatLng.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.latitude != null && message.hasOwnProperty("latitude"))
                        if (typeof message.latitude !== "number")
                            return "latitude: number expected";
                    if (message.longitude != null && message.hasOwnProperty("longitude"))
                        if (typeof message.longitude !== "number")
                            return "longitude: number expected";
                    return null;
                };
    
                /**
                 * Creates a LatLng message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.type.LatLng
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.type.LatLng} LatLng
                 */
                LatLng.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.type.LatLng)
                        return object;
                    var message = new $root.google.type.LatLng();
                    if (object.latitude != null)
                        message.latitude = Number(object.latitude);
                    if (object.longitude != null)
                        message.longitude = Number(object.longitude);
                    return message;
                };
    
                /**
                 * Creates a plain object from a LatLng message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.type.LatLng
                 * @static
                 * @param {google.type.LatLng} message LatLng
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LatLng.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.latitude = 0;
                        object.longitude = 0;
                    }
                    if (message.latitude != null && message.hasOwnProperty("latitude"))
                        object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
                    if (message.longitude != null && message.hasOwnProperty("longitude"))
                        object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
                    return object;
                };
    
                /**
                 * Converts this LatLng to JSON.
                 * @function toJSON
                 * @memberof google.type.LatLng
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LatLng.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LatLng;
            })();
    
            return type;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.int32();
                            break;
                        case 2:
                            message.message = reader.string();
                            break;
                        case 3:
                            if (!(message.details && message.details.length))
                                message.details = [];
                            message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
